[{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"l_plot-the-basic-loon-plot","dir":"Articles","previous_headings":"","what":"l_plot() the basic loon plot","title":"Introduction to loon","text":"Begin simple scatterplot quakes data R prints information loon plot (later) causes two windows appear. One scatterplot:  “loon inspector”:  moment ’ll focus mainly scatterplot.","code":"l_plot(x = quakes$long,         y = quakes$lat,         xlabel = \"longitude\",         ylabel = \"latitude\",        title = \"Tonga trench earthquakes\") [1] \".l0.plot\" attr(,\"class\") [1] \"l_plot\" \"loon\""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"direct-manipulation-on-the-plot","dir":"Articles","previous_headings":"l_plot() the basic loon plot","what":"Direct manipulation on the plot","title":"Introduction to loon","text":"loon scatterplot highly interactive can directly manipulated using mouse. Several interactions immediately available. follows, images two button mouse (left primary, right secondary) scroll wheel used indicate interaction. colour red indicates selection, arrows double images suggest movement, modifier keys shown body mouse.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"panning","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Direct manipulation on the plot","what":"Panning","title":"Introduction to loon","text":"pan plot, select plot interior right (secondary) mouse button move mouse (button still ). direction panning can constrained holding named modifier keys panning.  Try . Select anywhere scatterplot move freely horizontally vertically Question: inspector change response movement? Reproduce movements smaller “World View” plot appearing top inspector. larger scatterplot change?","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"zooming","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Direct manipulation on the plot","what":"Zooming","title":"Introduction to loon","text":"Another way dynamically focus different parts plot zooming, using scrolling:  try , note small cluster 16 points towards top left scatterplot. scatterplot, zoom move plot around 16 points appear scatterplot use restricted horizontal vertical zooming 16 points occupy much scatterplot’s space possible Question: inspector changed response? inspector click button titled plot. happened? Using zooming panning “World View” focus scatterplot 16 points.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"selecting","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Direct manipulation on the plot","what":"Selecting","title":"Introduction to loon","text":"two ways directly select points scatterplot using mouse: either selection (one time multiple selections) “sweep selection” shown :  try , scatterplot (contain 16 points) point highlighted (magenta coloured) now 4 magenta points click background plot see change colour Question: inspector changed? Now try holding left mouse button move mouse. called sweeping sweep selection allows us sweep contiguous area plot. use sweep select identify, give different colours (none black) 4 different (roughly) contiguous groups choice 16 points. Check: 16 points now separated colour 4 groups glyph shape 2 groups. Question: inspector changed? already discovered colour selected points inspector. can now use inspector select points colour: inspector, select points colour turn.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"the-inspector-interacting-with-the-plot","dir":"Articles","previous_headings":"l_plot() the basic loon plot","what":"The inspector – interacting with the plot","title":"Introduction to loon","text":"experimentation, already discovered inspector used change loon plot. example, try checking “guides” box inspector place background grid guide lines loon plot. Unchecking removes guide lines. loon inspector consists several component pieces. top “World View” shows miniature version whole current plot, displayed , active. “World View” tabs. default (used) one “Analysis” tab common interactions separated three regions: “Plot”, “Select”, “Modify” systems. Try (order) following interactions inspector plot: select black points scale plot selected points invert selection colour selected points red select points, make open circles glyphs select red points deactivate select brushing mode brush select remaining black points dividing two groups colour one groups blue, orange turn brush re-activate points scale scatterplot “world” add guides (scales) Check: scatterplot open circles three clusters points red, blue, orange","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"on-brushing","dir":"Articles","previous_headings":"l_plot() the basic loon plot > More on direct manipulation","what":"on brushing","title":"Introduction to loon","text":"scatterplot open circles three clusters points red, blue, orange. Use functionality loon inspector (order) Using colour selection inspector, select largest group (others) Turn brushing (opposed sweeping) mode dynamic selection, choose deselect scatterplot use brush mode deselect region nearest highest density (shaped bit like question mark – ?) Colour selected points green (.e. low density region largest coloured group) now four different coloured groups clusters. fun, inspector select green group dynamic selection, choose invert move brush scatterplot move brush scatterplot holding <Shift> key Question: going ? might functionality useful?","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"on-selection","dir":"Articles","previous_headings":"l_plot() the basic loon plot > More on direct manipulation","what":"on selection","title":"Introduction to loon","text":"done, turn selection back defaults:  , [static:] none [dynamic:] select [:] sweeping Shift selection works mix individual point selection static selection dynamic selection sweeping brushing color Exercise: Try different combinations selections.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"moving-points","dir":"Articles","previous_headings":"l_plot() the basic loon plot > More on direct manipulation","what":"moving points","title":"Introduction to loon","text":"variety reasons, sometimes want (temporarily) move points scatterplot. inspector: deactivate small red group select red group scale plot selected selected points, explore effect move modifications configuration selected points describe words one scatterplot, selected points may moved hand one time using <Ctrl>-<Left-button> groups using <Shift><Ctrl><Left-button> example: select red group move red group bottom plot return red group original location","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"adding-colours-to-the-inspector","dir":"Articles","previous_headings":"l_plot() the basic loon plot > More on direct manipulation","what":"adding colours to the inspector","title":"Introduction to loon","text":"colours can added directly clicking + +5 colour modification section inspector. clicking +5 twice adds 10 new colours colours persist inspector every loon scatterplot inspector palette colours loon system default list colours get found programmatically: [1] \"gray60\"    \"#A6CEE3\"   \"pink\"      \"#B2DF8A\"   \"#FDBF6F\"   \"#FFFF99\" Note: loon colours 6 hexadecimal digits length can named R colour constrained tcl/tk colours, alpha level available time loon R similar set base colours default graphics devices: [1] \"black\"   \"#DF536B\" \"#61D04F\" \"#2297E6\" \"#28E2E5\" \"#CD0BBC\" like R palette, loon inspector palette persists.","code":"head(l_getColorList()) head(palette())"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"changing-the-inspector-palette-of-colours","dir":"Articles","previous_headings":"l_plot() the basic loon plot > More on direct manipulation","what":"changing the inspector palette of colours","title":"Introduction to loon","text":"beginning loon session (, immediately executing library(loon)) might choose change default palette inspector something suits tastes/problem. Note: may unintended side effects changing inspector colours plot (hence inspector) created avoided. variety functions exist change inspector’s palette colours: change palette execute one functions inspector open (recommended), select inspector close force refresh colour palette. l_setColorList_loon() returns inspector default loon colour palette.","code":"l_setColorList_baseR()  # base R palette l_setColorList_ColorBrewer(\"Set2\")  # colorblind friendly choice from ColorBrewer l_setColorList_hcl(luminance = 80)  # set of hcl colours l_setColorList_ggplot2()  # ggplot2's palette  l_setColorList_loon()  # default loon palette l_setColorList(l_colRemoveAlpha(rainbow(5)))  # any set of colours without alpha"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"accessing-the-plot","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Programmatic manipulation","what":"accessing the plot","title":"Introduction to loon","text":"plot (tcl) data structure can assigned R variable. Either construction (preferable way): , () forgot reassigned something else variable (likely), accessing plot tcl string: Note string \".l0.plot\" appears right side window title l_plot. assign plot p. might look window get string created one l_plot().","code":"# loon graphics (note that the result is assigned to p) p <- l_plot(x = quakes$long, y = quakes$lat,              xlabel = \"longitude\", ylabel = \"latitude\",             title = \"Tonga trench earthquakes\") # accessing the plot from its string representation p <- l_create_handle(\".l0.plot\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"printing-the-plot","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Programmatic manipulation","what":"printing the plot","title":"Introduction to loon","text":"now print p get string name plot, class attribute. value p provides us access rich data structure, one whose values reside tcl. example, can access value , like plots lattice ggplot2 produce grid data structure can displayed grid graphic R. simplest way achieve use generic R function plot() Note always reflect current state loon plot. way, can get snapshots loon plot interaction. Exercise: Try . Change p direct manipulation loon repeat. allows visual representation loon plot displayed time.","code":"p [1] \".l0.plot\" attr(,\"class\") [1] \"l_plot\" \"loon\" plot(p)"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"getting-plot-contents","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Programmatic manipulation","what":"getting plot contents","title":"Introduction to loon","text":"names associated loon plot indicating contents states: [1] \"glyph\"            \"itemLabel\"        \"showItemLabels\"   \"linkingGroup\"     \"linkingKey\"       \"zoomX\" features p can directly accessed [] function. example, [1] TRUE meaningful example might identify groups colours points. done simply follows Alternatively, function written save groups list logical vectors (one group): Similarly, point symbol characteristics (e.g. size, glyph) might used define groups. particularly handy first determined interactively.","code":"head(names(p)) p[\"showGuides\"] unique_cols <- unique(p['color']) group1 <- p['color'] == unique_cols[1] # Number in group 1 (e.g. as you might have -- here from saved colours) sum(group1) [1] 425 # Data on first few quakes in group 1. head(quakes[group1,]) lat   long depth mag stations 1  -20.42 181.62   562 4.8       41 2  -20.62 181.03   650 4.2       15 4  -17.97 181.66   626 4.1       19 5  -20.42 181.96   649 4.0       11 10 -17.47 179.59   622 4.3       19 11 -21.44 180.69   583 4.4       13 getGroups <- function(loonplot){     # make sure it is an \"l_plot\"     if (!is(loonplot, \"l_plot\")) stop(\"loonplot must be an l_plot\")          # use color to identify groups     unique_cols <- unique(loonplot['color'])     lapply(unique_cols,            FUN = function(col){loonplot['color'] == col}            ) }  myGroups <- getGroups(p)    # returns groups identified by unique colour in p nGroups <- length(myGroups) # number of groups group1 <- myGroups[[1]]     # each group is an element of the list myGroups"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"setting-plot-contents","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Programmatic manipulation","what":"setting plot contents","title":"Introduction to loon","text":"addition accessing state values loon plot using [], values may also set using []. example, try :","code":"p[\"showGuides\"] <- TRUE  p[\"size\"] <- sample(1:30, size = length(p[\"x\"]), replace = TRUE)  for (i in 1:length(myGroups))  {     p[\"selected\"] <- myGroups[[i]]     Sys.sleep(1) } p[\"selected\"] <- FALSE  # something a little more involved for up to 6 groups myCols <- c(\"firebrick\", \"steelblue\", \"purple\",              \"orange\", \"grey10\", \"grey80\") for (i in 1:length(myGroups)) {     p[\"color\"][myGroups[[i]]] <- myCols[i] }  # something crazy for (j in 1:10) {   p[\"xTemp\"] <- p[\"x\"] + runif(length(p[\"x\"]), min = -0.5, max = 0.5)   Sys.sleep(0.1) }  # putting locations and size back p[\"xTemp\"] <- p[\"x\"] p[\"size\"] <- 4"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"adding-layers","dir":"Articles","previous_headings":"l_plot() the basic loon plot","what":"Adding layers","title":"Introduction to loon","text":"loon plots actually little richer still. scatterplot one possible layer plot. many , layer different geometric objects.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"example-adding-maps","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Adding layers","what":"Example: adding maps","title":"Introduction to loon","text":"example, can add map current loon plot p. First get relevant map: added “layer” loon plot Try .   can seen world view, much map outside plot display (shown black-bordered rectangle world view). Now play scaling buttons loon inspector.","code":"library(maps) NZFijiMap <- map(\"world2\", regions = c(\"New Zealand\", \"Fiji\"), plot = FALSE) l_layer(p, NZFijiMap,          label = \"New Zealand and Fiji\",         color = \"forestgreen\",         index = \"end\") loon layer \"New Zealand and Fiji\" of type polygons of plot .l0.plot [1] \"layer0\""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"effect-of-scaling-choices","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Adding layers","what":"Effect of scaling choices","title":"Introduction to loon","text":"Adding map allows us see effect three plot scaling choices available inspector. effect best seen world view:  Note plot world view matches actual plot. Also aspect ratio changes scaling.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"the-layers-tab","dir":"Articles","previous_headings":"l_plot() the basic loon plot > Adding layers","what":"the “Layers” tab","title":"Introduction to loon","text":"map added layer, can seen selecting “Layers” tab inspector:  allows lot interaction layers - example changing display order, making invisible, grouping layers, .","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"syntax-loons-l_plot-is-like-base-graphics-plot","dir":"Articles","previous_headings":"l_plot() the basic loon plot","what":"Syntax: loon’s l_plot() is like base graphics plot()","title":"Introduction to loon","text":"loon’s l_plot() syntax intentionally resembles plot() base graphics package: arguments l_plot() provide initial values named state. Note argument names l_plot slightly different. result, however, loon plots quite different displays look different rich data structure many states can transformed grob either inspector programmatically loon, function plot.loon() method base plot() generic function turns loon plot (first argument plot.loon()) grid object plots current R graphics device.","code":"# Base graphics plot(x = quakes$long, y = quakes$lat,       xlab = \"longitude\", ylab = \"latitude\",      main = \"Tonga trench earthquakes\")  # loon graphics l_plot(x = quakes$long, y = quakes$lat,         xlabel = \"longitude\", ylabel = \"latitude\",        title = \"Tonga trench earthquakes\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"l_hist-the-loon-histogram","dir":"Articles","previous_headings":"","what":"l_hist() the loon histogram","title":"Introduction to loon","text":"seen earlier, quakes data variates addition latitude longitude quakes. starting, make sure four groups coloured loon plot p described earlier. don’t, colour now. Let’s consider histogram depth earthquake. Note inspector changed. different inspector type base loon plot. Exercise: plot section histogram inspector, select yshows: density histogram, see individual bars can selected happens modify colour? can make go away? histogram inspector, turn stacked colours select colours histogram","code":"h <- l_hist(quakes$depth,              xlabel = \"depth\",              title = \"Tonga trench earthquakes\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"linking","dir":"Articles","previous_headings":"","what":"Linking","title":"Introduction to loon","text":"Now scatterplot histogram, can explore one important features interactive data visualization system like loon.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"linkinggroup","dir":"Articles","previous_headings":"Linking","what":"linkingGroup","title":"Introduction to loon","text":"principal feature loon plots effect linking displays setting common linkingGroup. histogram inspector, says linking group, select text “none” replace “quakes” scatterplot inspector, now prompted either “push” “pull”. Select “push”. NOTE: Programmatically, might tried set linking group directly plot resulted error. problem synchronization must set time determine linked states drawn . effect , loon command l_confiure() must used whenever two states set simultaneously. correct programmatic setting “linkingGroup” causes h push linked states “quakes” group p pull “quakes” group. (example, “pull” used cases generally recommended.) brush scatterplot observe effects histogram brush histogram observe effects scatterplot shape brush tall thin brush left right right left (.e. shallow deeper earthquake depths) also set colours programmatically histogram. colour histogram bars earthquakes deepest darkest.","code":"h[\"linkingGroup\"] <- \"quakes\" p[\"linkingGroup\"] <- \"quakes\" l_configure(h, linkingGroup = \"quakes\", sync = \"push\") l_configure(p, linkingGroup = \"quakes\", sync = \"pull\") blues5 <- blues9[c(2,4,6,8,9)] # select 5 from light blue to dark h[\"color\"] <- blues5[cut(quakes$depth, breaks=5)] # assign colours by depth p[\"glyph\"] <- \"ccircle\" p[\"showGuides\"] <- TRUE # plot(p) # will print the plot"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"linking-many-plots","dir":"Articles","previous_headings":"Linking","what":"linking many plots","title":"Introduction to loon","text":"Arbitrarily many plots may created linked loon. Consider, example, adding two histograms linkingGroup. Note linking done creation synchronization default “pull”. Brush show relationship magnitude earthquake number stations reporting. Alternatively, look linked scatterplot two variates explore relationship conditional depth Brushing one plots cause plots highlight response. Note selection effectively shows relations one plot conditional upon values actively selected (e.g. brushed) another.","code":"h_mag <- l_hist(x = quakes$mag,                  linkingGroup = \"quakes\",                  showStackedColors = TRUE,                 yshows = \"density\",                 xlabel = \"magnitude\")  h_stations <- l_hist(x = quakes$stations,                       linkingGroup = \"quakes\",                       showStackedColors = TRUE,                      yshows = \"density\",                      xlabel = \"Number of stations reporting\") p_mag_stations <- l_plot(x = quakes$mag,                           y = quakes$stations,                           showGuides = TRUE,                          glyph = \"ccircle\",                          linkingGroup = \"quakes\",                           xlabel = \"Magnitude\",                           ylabel = \"Number of stations reporting\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"linkingkey","dir":"Articles","previous_headings":"Linking","what":"linkingKey","title":"Introduction to loon","text":"Observations loon plot uniquely identified (purpose linking) linkingKey. Pardon pun key linking loon. part, default linking ever need . Trouble may arise, however, want link two different plots created different data frames whose rows match row row. example, one data.frame might re-ordering rows . , might subset rows . either case, linking work properly linkingKey plots associated two data frames need managed. example, new plots p_new p_subset link correctly rest. Rather default values, linkingKey can vector unique strings used newly created plot . course, using default linking keys loon may require little care management user.","code":"new_order <- sample(1:nrow(quakes), nrow(quakes), replace = FALSE) some_quakes <- sample(1:nrow(quakes), 100, replace = FALSE) quakes_linkingKey <- p[\"linkingKey\"] p_new <- with(quakes[new_order, ], l_plot(long, lat, title = \"quakes reordered\",     linkingGroup = \"quakes\", linkingKey = quakes_linkingKey[new_order])) p_subset <- with(quakes[some_quakes, ], l_plot(long, lat, title = \"quakes reordered\",     linkingGroup = \"quakes\", linkingKey = quakes_linkingKey[some_quakes]))"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"three-dimensional-plots---l_plot3d","dir":"Articles","previous_headings":"","what":"Three dimensional plots - l_plot3D","title":"Introduction to loon","text":"Given quakes data three spatial dimensions (long, lat, depth), natural view three dimensional scatterplot. Select plot, type r turn rotation mode. Press arrow keyboard darkest points (deepest quakes) bottom display. Press r turn rotation mode. Selecting plot, key r toggles rotation mode; arrow keys rotate plot vertically horizontally. rotation mode plot may also rotated free hand using mouse. rotation mode toggled (key r), plot can brushed et cetera l_plot. See help(\"l_plot3D\") details. NOTE Many methods exist visualizing higher dimensional data loon. e.g. see help(\"l_navgraph\"), help(\"l_pairs\"), help(\"l_serialaxes\"). See also online manual l_web().","code":"# First, scale the data scaled_quakes <- l_scale3D(quakes)  p_mag_stations <- l_plot3D(x = scaled_quakes$long,                              y = scaled_quakes$lat,                             z = scaled_quakes$depth,                             showGuides = TRUE,                            linkingGroup = \"quakes\",                             title = \"Three dimensional plot of quakes\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"extras","dir":"Articles","previous_headings":"","what":"Extras","title":"Introduction to loon","text":"Miscellaneous topics sources working programming loon.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"more-examples","dir":"Articles","previous_headings":"Extras","what":"More examples","title":"Introduction to loon","text":"able get set plot contents means possible capture different plot states grobs. variety ways see might put loon use. course many smaller examples available loon’s R documentation available via complex examples general discussion via loon’s online web documentation","code":"help(package = \"loon\") l_web() # or more generally via the online loon (with complex examples) l_help()"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"other-vignettes","dir":"Articles","previous_headings":"Extras > More examples","what":"Other vignettes","title":"Introduction to loon","text":"vignettes developed cover range topics. currently include: example exploratory analysis: “Visible minorities Canadian cities” available via illustrates variety loon features including map layers, parallel coordinate axes, radial axes glyphs context exploratory analysis distribution visible minorities 33 Canadian cities. New interactive graphics loon teaching example: “Smoothers Bone Mineral Density” available via illustrates create new interactions loon general bindings. done developing teaching tool explaining smoothing works. example data set bone loon.data package. suggestions integrating loon plots Rmarkdown document: “Loon RMarkdown” via","code":"vignette(\"minorities\", package = \"loon\") vignette(\"teaching-example-smoothing\", package = \"loon\") vignette(\"Rmarkdown\", package = \"loon\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"loon-demos","dir":"Articles","previous_headings":"Extras > More examples","what":"loon demos","title":"Introduction to loon","text":"numerous demos loon whose source code might examined examples using loon. see range quite broad. example, code appears console demo can examined reused create loony loon code.","code":"demo(package = \"loon\")  # list all demos ### teaching demos demo(\"l_regression\", package = \"loon\")  # lots using the Old Faithful geyser demo(\"l_regression_influential\", package = \"loon\")  # change points change the regression fit  ### gapminder demo(\"l_us_and_them\", package = \"loon\")  #  basic demo demo(\"l_us_and_them_slider\", package = \"loon\")  # year selected on a slider demo(\"l_us_and_them_choropleth\", package = \"loon\")  # world map and linked with a scatterplot  ### the spatial package sp demo(\"l_polygons_sp\", package = \"loon\")  # layer polygons with class sp   ### layering and custom layouts demo(\"l_layers\")  # demonstrate layer types    demo(\"l_layout\")  # custom layout widgets       demo(\"l_widgets\")  # inspector and plot in one window  ### novel brushing and linking demo(\"l_knn\")  # brushing by k nearest points in some subspace demo(\"l_us_and_them_choropleth\")  # many to one linking   ### high dimensional data and dimensionality reduction demo(\"l_ng_images_frey_LLE\")  # navigation graphs, image data, LLE demo(\"l_ng_dimred\")  # comparing dimension reduction methods"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"zenplots","dir":"Articles","previous_headings":"Extras > Extensions to loon via other packages","what":"zenplots","title":"Introduction to loon","text":"package available CRAN. Provides means compact layout alternating 1d (e.g. histograms) 2d (e.g. scatterplots) plots. layout base graphics plots, grid graphics plots, loon plots. similar pairs plots allows many many plots displayed. introductory vignette: “zenplot can show information pairs plot two important display differences. First, matrix organization pairs layout replaced “zig-zag” layout zenplot. Second, number plots produced half pairs plot allowing plot zenplot given visual space.”","code":"install.packages(\"zenplots\") vignette(\"intro\", package = \"zenplots\")"},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"specialty-loon-extensions---loon-specialty-packages","dir":"Articles","previous_headings":"Extras > Extensions to loon via other packages","what":"Specialty loon extensions - loon.<specialty> packages","title":"Introduction to loon","text":"/packages available build loon. developed us typically prefixed loon (e.g. loon.ggplot) typically CRAN ready, development versions accessible great northern diver github repositories. example, https://github.com/great-northern-diver can see related packages well coming .","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/introduction.html","id":"more-on-grid-graphics-and-loon","dir":"Articles","previous_headings":"Extras","what":"More on grid graphics and loon","title":"Introduction to loon","text":"Graphics grid package built graphical objects grobs. loon, functions grid.loon() loonGrob() construct grobs loon plots can used grob grid example, transformed grid, loon plot p structure becomes gTree grid. simply produces grid data structure corresponding current state loon plot p, can seen listing contents: grob gp now used functionality grid package. Note elements loon plot appear grob, either explicitly , drawn loon plot, empty grob containing relevant arguments drawing . Another function loon help grid.loon() function display p grid graphic … entails.","code":"gp <- loonGrob(p) gp gTree[GRID.gTree.33] library(grid) grid.ls(gp)  # lists the contents of the grob library(grid) grid.newpage() grid.loon(p)"},{"path":"https://great-northern-diver.github.io/loon/articles/logicalQueries.html","id":"the-cars-of-the-1974-motor-trends-magazine","dir":"Articles","previous_headings":"","what":"The cars of the 1974 Motor Trends magazine","title":"Logical queries","text":"Begin classic data set R – mtcars. sake illustration, enrichment variables values made: illustration, convenient separate categorical continuous data. varTypes list two named components: categorical numeric.","code":"data(mtcars, package = \"datasets\")  mtcars$country <- c(\"Japan\", \"Japan\", \"Japan\", \"USA\", \"USA\", \"USA\", \"USA\",                      \"Germany\", \"Germany\", \"Germany\", \"Germany\", \"Germany\",                      \"Germany\", \"Germany\", \"USA\", \"USA\", \"USA\", \"Italy\",                      \"Japan\", \"Japan\", \"Japan\", \"USA\", \"USA\", \"USA\", \"USA\",                      \"Italy\", \"Germany\", \"UK\", \"USA\", \"Italy\", \"italy\", \"Sweden\") mtcars$continent <- c(\"Asia\", \"Asia\", \"Asia\", \"North America\", \"North America\",                        \"North America\", \"North America\", \"Europe\", \"Europe\",                        \"Europe\", \"Europe\", \"Europe\", \"Europe\", \"Europe\",                         \"North America\", \"North America\", \"North America\",                        \"Europe\", \"Asia\", \"Asia\", \"Asia\", \"North America\",                        \"North America\", \"North America\", \"North America\",                        \"Europe\", \"Europe\", \"Europe\", \"North America\",                        \"Europe\", \"Europe\", \"Europe\" ) mtcars$company <- c(\"Mazda\", \"Mazda\", \"Nissan\", \"AMC\", \"AMC\", \"Chrysler\",                      \"Chrysler\", \"Mercedes\", \"Mercedes\", \"Mercedes\", \"Mercedes\",                     \"Mercedes\", \"Mercedes\", \"Mercedes\", \"GM\", \"Ford\",                      \"Chrysler\", \"Fiat\", \"Honda\", \"Toyota\", \"Toyota\", \"Chrysler\",                      \"AMC\", \"GM\", \"GM\", \"Fiat\", \"Porsche\", \"Lotus\", \"Ford\",                      \"Ferrari\", \"Maserati\", \"Volvo\")  mtcars$Engine <- factor(c(\"V-shaped\", \"Straight\")[mtcars$vs +1],                          levels = c(\"V-shaped\", \"Straight\")) mtcars$Transmission <- factor(c(\"automatic\", \"manual\")[mtcars$am +1],                                levels = c(\"automatic\", \"manual\"))  mtcars$vs <- NULL  # These are redundant now mtcars$am <- NULL  # varTypes <- split(names(mtcars),                    sapply(mtcars,                           FUN = function(x){                              if(is.factor(x)|is.character(x)){                                   \"categorical\"                                   } else {\"numeric\"} } ))"},{"path":"https://great-northern-diver.github.io/loon/articles/logicalQueries.html","id":"some-interactive-plots","dir":"Articles","previous_headings":"","what":"Some interactive plots","title":"Logical queries","text":"explore data, several interactive plots likely constructed. Typically, constructed one time assigned linking group (perhaps via inspector). , histograms/barplots constructed categorical variable assigned variable name now prefixed h_ “histogram”. evaluated vignette. Note linkingGroup. linked plots might exist well – example, scatterplot gear (number forward gears) versus disp (engine displacement cubic inches). Note - car’s name appears itemLabel point plot (revealed “tooltip” style pop ), - plot p linking group histograms. combination selection, inversion, deactivation, reactivation, logical queries may made interactively data. simplicity, basic logical operators illustrated using histograms. generally, apply interactive loon graphic.","code":"for (varName in varTypes$categorical) {     assign(paste0(\"h_\", varName),            l_hist(mtcars[ , varName], showFactors = TRUE,                     xlabel = varName, title = varName,                    linkingGroup = \"Motor Trend\")) } p <- with(mtcars, l_plot(disp, cyl,                           xlabel = \"engine displacement\", ylabel = \"number of cylinders\",                          title = \"1974 Motor Trend cars\",                           linkingGroup = \"Motor Trend\",                          size = 10, showScales = TRUE,                          itemLabel = rownames(mtcars), showItemLabels = TRUE                          ))"},{"path":"https://great-northern-diver.github.io/loon/articles/logicalQueries.html","id":"interactive-logical-operations","dir":"Articles","previous_headings":"","what":"Interactive logical operations","title":"Logical queries","text":"Five logical conditions/operations illustrated basic ones: TRUE Negation: () TRUE Inclusive : (B) TRUE (one ), Conjunction: (B) TRUE Exclusive : (XOR B) meaning (TRUE) (B TRUE) (B) FALSE corresponds sequence actions plots /inspector. Whatever highlighted end corresponds result. , simplicity operations illustrated interacting values categorical variates various histograms. logical elements also satisfying numerical constraints undertaking corresponding actions scatterplot (histogram continuous values). logical operator illustrated turn: (== ) plot select , e.g., click \"manual\" bar Transmission histogram highlighted ⇔\\iffTransmission == \"manual\" TRUE (=¯= \\overline{}~~ ¬~~\\neg ) plot select , inspector click invert e.g., click \"North America\" bar continent histogram, invert highlighted ⇔\\iffcontinent == \"North America\" FALSE highlighted \"North America\", namely \"Asia\" \"Europe\" B (=∪B= \\cup B~~ ∨B~~\\lor B), plot select , (different linked) plot <SHIFT>- select B e.g., click \"manual\" bar Transmission histogram, holding <SHIFT> key, click Mercedes bar company histogram highlighted ⇔\\iffTransmission == \"manual\" TRUE company = \"Mercedes\" TRUE () B (=∩B= \\cap B ∧BA \\land B) lots solutions, one always works plot select , inspector, invert deactivate (remains), plot remaining select B, inspector reactivate elements highlighted ⇔∩B\\iff \\cap B e.g. try highlighting European cars manual transmissions. XOR B (=(∪B)∩(∩B¯)= (\\cup B) \\cap (\\overline{\\cap B}) (∨B)∧¬(∧B)(\\lor B) \\land \\neg({\\land B})) following steps 4, select B, inspector invert deactivate (¬(∧B)\\neg({\\land B}) remains) following steps 3, select B, inspector reactivate (XOR B highlighted) logical conditions (including numerical ones disp > 300 scatterplot p) constructed combination (exclusive ). can quite complex may help, number steps, mark intermediary results colour (also glyph scatterplots). Note possibly missing data, linked plots may share set observations.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/logicalQueries.html","id":"missing-data-and-linking-keys","dir":"Articles","previous_headings":"","what":"Missing data and linking keys","title":"Logical queries","text":"mtcars data example complete data set. missing values, appear loon plots require . example, suppose data four variables , B, C, D, wherever NA appears , B, C, point missing p_test Note generally good idea use C simple display characteristic like color indeed C missing values since remove non-missing x y values plot. values x y accessible plot logical queries, wherever NA appears either C D, point missing h_test Using logical operations original data change plot properties (e.g. select values) can challenging data values missing plot (since missing depends missing time construction). example, may work! logical operation data (data$> 0) typically longer corresponding x value p_test[\"x\"] plot work. Even logical vector right length (contains NAs ), values may correctly match data points. two general approaches logical queries data contains NAs. Using complete data , like mtcars, data used contains NAs conducting logical queries plot identical conducting data. data complete (contains one NA), can made complete removing observations (rows) contain NA. E.g. replacing data c_data <- na.omit(data). logic c_data match plots made c_data. depending amount pattern missing data, critically reduce amount data analysis. Using information loon plots. course, recommended approach data missing. Logical queries can made directly plots, either interactively described previous sections, , programmatically p_test[\"x\"] > 0 place data$> 0. directly data applied plots help manage , linkingKey plot can used. default value plot character vector entries \"0\" \"n-1\" n =nrow(data)`. easily turned row numbers original data. E.g. p_test row numbers data correspond points 1 + .numeric(p_test[\"linkingKey\"]) Logical values rows data can select points p follows Similarly h_test. E.g., compare p_test[\"linkingKey\"] h_test[\"linkingKey]\". Note: user can always provide character vector linkingKey plots. E.g., linkingKey = rownames(data) , care may needed use identify rows logical vector.","code":"data <- data.frame(A = sample(c(rnorm(10), NA), 10, replace = FALSE),                    B = sample(c(rnorm(10), NA), 10, replace = FALSE),                    C = sample(c(\"firebrick\", \"steelblue\", NA), 10, replace = TRUE),                    D = sample(c(1:10, NA), 10, replace = FALSE)) p_test <- l_plot(x = data$A, y = data$B, color = data$C, linkingGroup = \"test missing\") h_test <- l_hist(x = data$D, color = data$C, linkingGroup = \"test missing\") p_test[\"selected\"] <- (data$A > 0) LogVal <- data$A > data$B p[\"selected\"] <- logVal[1 + as.numeric(p_test[\"linkingKey\"])]"},{"path":"https://great-northern-diver.github.io/loon/articles/logicalQueries.html","id":"loons-linking-model","dir":"Articles","previous_headings":"Missing data and linking keys","what":"loon’s linking model","title":"Logical queries","text":"Loon’s linking model following three parts linkingGroup identifies plots linked linkingKey, character vector element key uniquely identifying single observation plot (two observations plot can value linking key), linked display states plot declared (e.g. see l_getlinkedStates()). Observations different plots (linking group) linked (linked states change together) linking key. Points appearing different plots (linkingGroup) matched value linkingKey share value linked states.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"producing-static-grid-plots","dir":"Articles","previous_headings":"","what":"Producing static grid plots","title":"Loon plots and grid graphics","text":"grid graphics package one fundamental graphics systems R. provides low-level, general purpose graphics system producing wide variety plots. Many well-known graphical systems, e.g. lattice ggplot2, use grid draw plots. loon plots transformed grid graphics plots provide, close possible, wysiwyg snapshot interactive plot. grid graphics plots, turn can edited using various grid functions. Begin classic data set R – mtcars contains 32 automobiles 11 (numeric) variables. , p loon widget. aesthetics attributes can accessed either function l_cget() simple [, returned values always reflect current states p. example, suppose size points modified 6 direct manipulations plot, call p['size'], length 32 vector 6 returned. handy “querying tool”, essential elements loon widget can accessed construct selfsame grid graphics, produced printed plot p (presently appears) first translating loon plot grid graphics object (grob). can used time, including RMarkdown document (). users, need done. vignette end . users might also interested turning loon plots ggplots (vice versa); , information provided towards end vignette ggplots section. interested deeper understanding grid plots, read . Note: plot() function simply wrapper function around workhorse function loonGrob() translatation current display loon plot grid object (grob) capturing features loon display. resulting grob drawn using grid.draw() grid package.","code":"library(loon) p <- with(mtcars, l_plot(mpg, hp,                           size = 8,                          showScales = TRUE)) # x coordinates p['x'] ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 ## [14] 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 ## [27] 26.0 30.4 15.8 19.7 15.0 21.4 # point size p['size'] ## [1] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 # `p` is a loon widget plot(p)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"loongrob-loon-grid-object","dir":"Articles","previous_headings":"Producing static grid plots","what":"loonGrob(): loon –> grid object","title":"Loon plots and grid graphics","text":"grid graphic plot saved assigning variable created. Either drawing time (side-effect) postponing drawing later Either way, grid data structure created assigned variable g0. Alternatively, loonGrob() can called directly, returns grid graphics object grob. can drawn time using grid.draw() grid package.","code":"g0 <- plot(p) g0 <- plot(p, draw = FALSE) g0 <- loonGrob(p) library(grid) grid.newpage() grid.draw(g0)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"multiple-plots","dir":"Articles","previous_headings":"Producing static grid plots","what":"multiple plots","title":"Loon plots and grid graphics","text":"grob, output loonGrob()ccan manipulated can grid data structure – perhaps arranging several compound display using grid.arrange() (gridExtra package). example, might several stages interactive plot ow might captured. might constructed programmatically drawn single display arrangement positioned within another arrrangement.","code":"oldColor <- p[\"color\"] set.seed(3141) selection <- sample(c(TRUE, FALSE),                      size = length(oldColor),                      replace = TRUE) p[\"color\"]  <- selection gtrans <- loonGrob(p) p[\"active\"] <- selection gauto <- loonGrob(p) p[\"active\"] <- !selection gmanual <- loonGrob(p) p[\"active\"] <- TRUE p[\"color\"] <- oldColor library(gridExtra) grid.newpage() grid.arrange(g0, gtrans, gauto, gmanual, nrow = 2)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"the-data-structure-returned-by-loongrob","dir":"Articles","previous_headings":"Producing static grid plots","what":"the data structure returned by loonGrob()","title":"Loon plots and grid graphics","text":"returned data structure gTree object tree data structure grid contains many grobs needed draw plot demand. Numerous functions exist within grid package validating, drawing, modifying grid graphical objects like gTree many elements. tree structure g0 easily seen using grid.ls() list contents: levels indicated indenting. following figure renders tree structure generally:  Node labels give loonGrob names tree hierarchy following solid lines left right. Grey values indicate types loon plots (separate braces) identify potential options peculiar loon plot. example, root node “l_plot” contains “bounding box” “loon plot”, loon plot “guides”, “labels”, “axes”, “clipping region”, “boundary rectangle” “l_xxxx_layers” (according type loon plot), loon plot p “l_plot_layers” consisting “scatterplot” possibly layers like lines .","code":"class(g0) ## [1] \"gTree\" \"grob\"  \"gDesc\" grid.ls(g0) ## GRID.gTree.2 ##   l_plot ##     bounding box ##     loon plot ##       guides ##         guides background ##         guidelines: xaxis (major), x = 15 ##         guidelines: xaxis (major), x = 25 ##         guidelines: xaxis (major), x = 35 ##         guidelines: xaxis (minor), x = 10 ##         guidelines: xaxis (minor), x = 20 ##         guidelines: xaxis (minor), x = 30 ##         guidelines: yaxis (major), y = 100 ##         guidelines: yaxis (major), y = 200 ##         guidelines: yaxis (major), y = 300 ##         guidelines: yaxis (minor), y = 50 ##         guidelines: yaxis (minor), y = 150 ##         guidelines: yaxis (minor), y = 250 ##         guidelines: yaxis (minor), y = 350 ##       labels ##         x label ##         y label ##         title: textGrob arguments ##       axes ##         x axis ##           major ##           ticks ##           labels ##         y axis ##           major ##           ticks ##           labels ##       clipping region ##       l_plot_layers ##         scatterplot ##           points: primitive glyphs ##       boundary rectangle"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"changing-a-grid-object-get-edit-set","dir":"Articles","previous_headings":"Producing static grid plots","what":"changing a grid object: get, edit, set","title":"Loon plots and grid graphics","text":"Knowing labels, one can retrieve, edit, even replace fine details static plot. example, consider “xlabel” “ylabel” gTree. label (appears list gTree) provides path corresponding grob. Changes existing grid plot made three steps: getGrob() get copy grob changed editGrob() produce grob desired changes, setGrob() set newly produced grob appropriate place plot. now illustrated turn.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"getgrob","dir":"Articles","previous_headings":"Producing static grid plots > changing a grid object: get, edit, set","what":"getGrob()","title":"Loon plots and grid graphics","text":"Knowing path “x label” gTree g0, grob extracted using getGrob(). example, structure: Note xlabelGrob copy grob found “x label” path g0. Similarly grobs paths (e.g., “y label”) extracted copied. Note also elements gTree appearing listing grid.ls(g0) actually parts grob path . example, consider x-axis elements:","code":"# retrieve xlabel grob xlabelGrob <- getGrob(g0, \"x label\") xlabelGrob ## text[x label] class(xlabelGrob) ## [1] \"text\"  \"grob\"  \"gDesc\" names(xlabelGrob) ##  [1] \"label\"         \"x\"             \"y\"             \"just\"          ##  [5] \"hjust\"         \"vjust\"         \"rot\"           \"check.overlap\" ##  [9] \"name\"          \"gp\"            \"vp\" xlabelGrob$label ## [1] \"mpg\" xAxisGrob <- getGrob(g0, \"x axis\") names(xAxisGrob) ## [1] \"major\"  \"ticks\"  \"labels\" names(xAxisGrob$children) ## [1] \"at\"            \"label\"         \"main\"          \"edits\"         ## [5] \"name\"          \"gp\"            \"vp\"            \"children\"      ## [9] \"childrenOrder\""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"editgrob","dir":"Articles","previous_headings":"Producing static grid plots > changing a grid object: get, edit, set","what":"editGrob()","title":"Loon plots and grid graphics","text":"xlabelGrob hand, can use create another copy changed features using editGrob(). example, meaningful x axis “label” name can assigned: newGrob now textGrob informative label:","code":"newGrob = editGrob(xlabelGrob,                     label = \"Miles per (US) gallon\") class(newGrob) ## [1] \"text\"  \"grob\"  \"gDesc\" newGrob$label ## [1] \"Miles per (US) gallon\""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"setgrob","dir":"Articles","previous_headings":"Producing static grid plots > changing a grid object: get, edit, set","what":"setGrob()","title":"Loon plots and grid graphics","text":"complete change g0, old “x label” needs replaced newGrob: Now “xlabel” changed “Miles/(US) gallon” within grid plot g0. way, features “x label” changed well grobs paths gTree returned loonGrob().","code":"g0 <- setGrob(gTree = g0,                gPath = \"x label\",               newGrob = newGrob) grid.newpage() grid.draw(g0)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"adding-an-alpha-channel-to-the-points","dir":"Articles","previous_headings":"Producing static grid plots","what":"adding an alpha channel to the points","title":"Loon plots and grid graphics","text":"common place reason edit add features grid plot available loon. example, transparency (presently) missing tcltk colours (loon based) – tcltk system presently uses 12 digit hexadecimal colour represent three channels (one RGB colours) fourth channel indicating alpha transparency. contrast, transparency accommodated grid graphics one might choose set alpha values transformation. points plot can made transparent using setGrob(), editGrob(), getGrob(), given path points grob, namely “points: primitive glyphs”. modification, points now transparent size made larger.","code":"pathGrob <- \"points: primitive glyphs\" newLoonPointsGrob <-    editGrob(     getGrob(g0, pathGrob),      gp = gpar(fill = as_hex6color(p['color']),               col = l_getOption(\"foreground\"),               fontsize = 20, # give a larger point size,               alpha = 0.3 # turn color transparent               )     ) # update loon points grob g0 <- setGrob(   gTree = g0,   gPath = \"points: primitive glyphs\",   newGrob = newLoonPointsGrob ) grid.newpage() grid.draw(g0)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"helper-functions-from-loon","dir":"Articles","previous_headings":"Producing static grid plots","what":"helper functions from loon","title":"Loon plots and grid graphics","text":"Three loon helper functions simplify editing gTree produced loon special case grobs gTree incompletely specified. three helper functions l_instantiateGrob() instatiates complete grob using information available incomplete description grob; l_setGrobPlotView() resets margins grid plot loon plot labels scales shown (margin sizes specified arguments); l_updateGrob() behaves much like editGrob() except can work incomplete grob descriptions called l_instantiateGrob(). See help(\"loonGrobInstantiation\") . Common cases functions might used pieces plot rendered invisible.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"e-g--missing-title","dir":"Articles","previous_headings":"Producing static grid plots > helper functions from loon","what":"e.g. missing title","title":"Loon plots and grid graphics","text":"plot p given title title appears g0 drawn. Nevertheless, gTree g0 appear title information indicated path “title: textGrob arguments”. indication loonGrob() transfer title information p g0 incomplete way. access grob path, empty label string , looking class: appears text grob. Instead, incomplete description, gDesc, grob. Note fontsize chosen small fit space available. little room standard title margins loon plot p smaller title. alternative making font small return loon (alternatively user specified) margins plot using l_setGrobPlotView(): displays title default fontsize (translating p). extra room title also admit larger font sizes.","code":"titleGrob <- getGrob(g0, \"title: textGrob arguments\") titleGrob$label ## [1] \"\" class(titleGrob) ## [1] \"grob\"  \"gDesc\" g1 <- l_instantiateGrob(g0, \"title: textGrob arguments\",                         label = \"1974 Motor Trend cars data\",                         gp = gpar(col = \"blue\",                                   fontsize = 8)) grid.newpage() grid.draw(g1) g2 <- l_instantiateGrob(g0, \"title: textGrob arguments\",                         label = \"1974 Motor Trend cars data\",                         gp = gpar(col = \"red\")) g2 <- l_setGrobPlotView(g2) grid.newpage() grid.draw(g2)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"e-g--missing-labels","dir":"Articles","previous_headings":"Producing static grid plots > helper functions from loon","what":"e.g. missing labels","title":"Loon plots and grid graphics","text":"Oftentimes labels (.e., “xlabel”, “ylabel”, “title”) p turned loonGrob() called: like turn labels static plot. gTree g3 now different path label. Knowing paths missing labels, two helper functions (together desiredtextGrob() arguments) construct desired plot: Extra arguments l_instantiateGrob() passed grobFun (case textGrob()).","code":"p['showLabels'] <- FALSE g3 <- loonGrob(p) grid.newpage() grid.draw(g3) grid.ls(g3) ## GRID.gTree.5 ##   l_plot ##     bounding box ##     loon plot ##       guides ##         guides background ##         guidelines: xaxis (major), x = 15 ##         guidelines: xaxis (major), x = 25 ##         guidelines: xaxis (major), x = 35 ##         guidelines: xaxis (minor), x = 10 ##         guidelines: xaxis (minor), x = 20 ##         guidelines: xaxis (minor), x = 30 ##         guidelines: yaxis (major), y = 100 ##         guidelines: yaxis (major), y = 200 ##         guidelines: yaxis (major), y = 300 ##         guidelines: yaxis (minor), y = 50 ##         guidelines: yaxis (minor), y = 150 ##         guidelines: yaxis (minor), y = 250 ##         guidelines: yaxis (minor), y = 350 ##       labels ##         x label: textGrob arguments ##         y label: textGrob arguments ##         title: textGrob arguments ##       axes ##         x axis ##           major ##           ticks ##           labels ##         y axis ##           major ##           ticks ##           labels ##       clipping region ##       l_plot_layers ##         scatterplot ##           points: primitive glyphs ##       boundary rectangle g4 <-l_instantiateGrob(g3,                         \"title: textGrob arguments\",                        x = unit(8, \"native\"),                        just = \"left\",                        label = \"Motor Trend Magazine 1974\")  g4 <-l_instantiateGrob(g4,                         \"x label: textGrob arguments\",                        label = \"Miles per US gallon\",                        x = unit(35, \"native\"),                        y = unit(-1.5, \"lines\"),                        just = \"right\",                        gp = gpar(fontsize = 15,                                   fontface = \"italic\",                                  col = \"blue\"))  g4 <-l_instantiateGrob(g4,                         \"y label: textGrob arguments\",                        label = \"Horse power\",                        rot = 45,                        x = unit(7, \"native\"),                        y = unit(275, \"native\"),                        just = \"right\",                        gp = gpar(fontsize = 15,                                   fontface = \"italic\",                                  col = \"blue\"))  g4 <- l_setGrobPlotView(g4) grid.newpage() grid.draw(g4)"},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"l_updategrob","dir":"Articles","previous_headings":"Producing static grid plots > helper functions from loon","what":"l_updateGrob()","title":"Loon plots and grid graphics","text":"function called l_instantiateGrob() perform role editGrob(), operating incomplete grobs gDescs. function l_updateGrob() also used editGrob() complete grob (e.g. classes text, grob, gDesc).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"some-points-are-invisible","dir":"Articles","previous_headings":"Producing static grid plots > What if …","what":"some points are invisible?","title":"Loon plots and grid graphics","text":"Unfortunately, points invisible, coordinates aesthetics attributes missing loonGrob. Technically speaking, possible include invisible points inside loonGrob, however, stops us data structure changed – pointsGrob replaced gTree several children pointsGrobs preserve display order distinguish visible invisible point. solution seems overly complicated implemented. Better simply make changes interactively loon plot translate new grid data structure.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"some-points-are-not-primitive-glyphs","dir":"Articles","previous_headings":"Producing static grid plots > What if …","what":"some points are not primitive glyphs?","title":"Loon plots and grid graphics","text":"loon provides non-primitive glyphs, e.g. text glyphs, image glyphs, polygon glyphs, et cetera. non-primitive glyph drawn, grob label beneath scatterplot points: mixed glyph. returns gTree object child textGrob.","code":"# add text glyph carNames <- l_glyph_add_text(p, text = rownames(mtcars)) p['glyph'] <- carNames # loonGrob g2 <- loonGrob(p) getGrob(g2, \"points: mixed glyphs\") grid.newpage() grid.draw(g2)"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"ggplots-from-loon-ggplot","dir":"Articles","previous_headings":"Other packages","what":"ggplots from loon.ggplot","title":"Loon plots and grid graphics","text":"Elegant print graphics also provided popular ggplot2 package built top grid graphics. Users familiar ggplot2 grammar graphics might interested loon companion package loon.ggplot extends grammar grammar interactive graphics. loon plot can captured ggplot simply calling loon.ggplot() . function also create interactive loon plot called existing ggplot. Details can found . probably simplest solution static plot can subsequently edited programmatically (via grammar ggplot2). changes ggplot also ve turned interactive loon plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/loonPlotsAndGridGraphics.html","id":"shiny-applications-from-loon-shiny","dir":"Articles","previous_headings":"Other packages","what":"shiny applications from loon.shiny","title":"Loon plots and grid graphics","text":"interest supporting reproducible research, analysts sometimes want share interactive (linked) plots curated analysis. shiny app way shared interaction. loon companion package loon.shiny makes possible just incorporating interactive loon style plots shiny app. viewer may interactively explore data analysis inside hyml browser. interaction open ended using loon R peculiar data app features selected y author. loon.shiny transformation relies loon grid functionality described . Details can found .","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"interactive-analysis-and-static-plots","dir":"Articles","previous_headings":"","what":"Interactive analysis and static plots","title":"Saving loon plots","text":"carrying interactive analysis, might want save pictures include later report. might also want save state interactive plot can pause analysis, quit R, later return analysis left . illustrate , consider classic data set iris. three different linked plots might displayed. plot simply just appear () processed RMarkdown file. grid gridExtra packages loaded, arrange see several plots one place.","code":"library(loon) # First, make sure you always assign a loon plot to a variable # at the same time that you create it.  This will give you access # to it later.   # (NB: If you haven't assigned it, you can later using l_getFromPath(). ) #  #  A histogram, the name for the linkingGroup is arbitrary h <- l_hist(iris$Sepal.Length, color = \"grey\", xlabel = \"Sepal length\",             linkingGroup = \"flowers\") # # A scatterplot p <- l_plot(iris$Petal.Width, iris$Petal.Length,               color = \"grey\", size = 10,             xlabel = \"Petal Width\", ylabel = \"Petal Length\",             linkingGroup = \"flowers\") # # A serial axes plot using the first 4 columns of iris (i.e. no Species info). sa <- l_serialaxes(iris[, 1:4],                color = \"grey\", linkingGroup = \"flowers\") # # A static version of the plot can be easily produced. plot(h) library(grid); library(gridExtra) # First get the data stuctures corresponding to the static snapshots # of the current plots.  Because we want to arrange them, we don't # draw them at first. plot_h <- plot(h, draw = FALSE) plot_p <- plot(p, draw = FALSE) plot_sa <- plot(sa, draw = FALSE) # Now we draw them grid.arrange(plot_h, plot_p, plot_sa, nrow = 1)"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"when-interaction-is-only-programmatic","dir":"Articles","previous_headings":"Interactive analysis and static plots","what":"When interaction is only programmatic","title":"Saving loon plots","text":"works fine want display entirely determined programming done inside RMarkdown code. example, colours changed programmatically, linked plots change plotting reflect change. couple things note . First, plots redrawn static snapshots reflecting interactive plot looked like time snapshot taken using plot(). Second, linked plots changed colour directly changed histogram. Finally, numerous states can programmatically accessed set interactive plot. states can found calling names() plot question. e.g. names(h) returns state names histogram h. Knowing state names provides user programmatic means access /set values. values can queried time, whether set programmatically interactively. example, problem things interactively direct manipulation plots using inspector brushing, panning, zooming, etc. recorded. want values states (set interactively) appear later report, values need recorded somewhere first. necessary save state somehow, either snapshot data separate file recovered later (saving plot states like colours, selections, etc.). either case, information must stored RMarkdown file can read back adjust plots programmatically.","code":"# Change the colour by changing it *programmatically* on the plot #  h[\"color\"] <- iris$Species  # use species to determine the colours plot_h <- plot(h, draw = FALSE) plot_p <- plot(p, draw = FALSE) plot_sa <- plot(sa, draw = FALSE) # And draw them again grid.arrange(plot_h, plot_p, plot_sa, nrow = 1) # Accessing values head(sa[\"color\"])  # will show the current colours of sa # Note that these colours are expressed as 12 hexadecimal digits  # This is what is used in TCL.  To turn them into R's 6 digit hexadecimal  # (to use in other R static plots, for example) just use hex12tohex6() hex12tohex6(sa[\"color\"][1:3]) # Setting values ... make only specied iris versicolor active sa[\"active\"] <- iris$Species == \"versicolor\" plot(sa) # Setting values ... make everything active sa[\"active\"] <- TRUE plot(sa)"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"saving-shapshots-for-later-display-","dir":"Articles","previous_headings":"Interactive analysis and static plots","what":"Saving shapshots for later display.","title":"Saving loon plots","text":"things interactively, may just want save current version plot, effectively snapshot, file. , completed analysis can read back . save current picture variety ways.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"export-from-rstudio","dir":"Articles","previous_headings":"Interactive analysis and static plots > Saving shapshots for later display.","what":"Export from RStudio","title":"Saving loon plots","text":"Simply plot(p) select Export button static plot. Choose file name location plot. plot() actually turns loon plot grid graphic, picture saves close necessarily exactly appears screen. Typical differences include font sizes names.","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"use-l_export","dir":"Articles","previous_headings":"Interactive analysis and static plots > Saving shapshots for later display.","what":"Use l_export()","title":"Saving loon plots","text":"loon function export loon plot file. plus side, see get. loon plot saved file appears display. Trouble , depending OS, might able save picture type image. example, pdf images available nearly OSes, png . need specify file suffix:","code":"l_export(p, filename = \"myplot_via_l_export.pdf\", height = 500, width = 600)"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"use-rs-png-device","dir":"Articles","previous_headings":"Interactive analysis and static plots > Saving shapshots for later display.","what":"Use R’s png() device","title":"Saving loon plots","text":"R, variety graphics “devices”. identify R draw static plot. call dev.cur() tell current device . One device png() allows R plots drawn png graphic. work like ","code":"# turn the png graphics device on with name of the file png(file = \"myplot_via_R.png\", width = 600, height = 500) # Draw the static plot plot(p) # Turn the device off/close the file dev.off()"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"including-saved-graphics-in-your-report","dir":"Articles","previous_headings":"Interactive analysis and static plots > Saving shapshots for later display.","what":"Including saved graphics in your report","title":"Saving loon plots","text":"saved various snapshots various files, can now include Rmarkdown file using include_graphics() function knitr. course, means various files mentioned previously saved (created markdown file) can now read RMarkdown report follows: Alternatively, use LaTeX want control. example, following LaTeX code centre three plots column tabular lay :","code":"# The one exported from RStudio knitr::include_graphics(\"myplot_via_RStudio.png\") # Followed by the one saved using l_export  # (note that background grid is missing) knitr::include_graphics(\"myplot_via_l_export.pdf\") # And finally, the one saved using R's png device knitr::include_graphics(\"myplot_via_R.png\") \\begin{center}   \\begin{tabular} {ccc}     \\includegraphics[height = 0.15\\textheight]{myplot_via_RStudio.png} &      \\includegraphics[height = 0.15\\textheight]{myplot_via_l_export.pdf} &     \\includegraphics[height = 0.15\\textheight]{myplot_via_R.png}      \\\\     {\\scriptsize The one exported from RStudio} &      {\\scriptsize The one saved using \\code{l\\_export}} &      {\\scriptsize The one saved using R's \\code{png} device}   \\end{tabular} \\end{center}"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"reconstruct-the-plot-from-saved-states","dir":"Articles","previous_headings":"Interactive analysis and static plots","what":"Reconstruct the plot from saved states","title":"Saving loon plots","text":"loon also provides functionality save current states loon plot. saving snapshots, done time interactive analysis. later, time write report, saved states plot read back plot reconstructed programmatically displayed report using plot() . use model Use l_saveStates() save current states loon plot file (repeat often desirable, saving different file time). Later, use l_getStates() recover saved states named file/ Construct new loon plot desired type. Copy saved states new plot using l_copyStates() (alternatively, assign selected saved states new plot using $). Produce static picture new loon plot using plot() . Note first step happens interactive part analysis. Steps 2 5 programmatically recover plot picture incorporation report. course place step 5, one use steps 2 4 restart interactive analysis one left .","code":""},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"a-simple-example","dir":"Articles","previous_headings":"Interactive analysis and static plots > Reconstruct the plot from saved states","what":"A simple example","title":"Saving loon plots","text":"typical use simply recording plot interaction display, usually involving linking two displays, say scatterplot histogram . save states plot p file Later, construct new plot (perhaps report), states recovered file new plot constructed saved states transferred . can programmatically incorporated report , alternatively new_p simply reconstruction continue interactive analysis point.","code":"l_saveStates(p, file = \"p_savedStates\") p_savedStates <- l_getSavedStates(file = \"p_savedStates\") new_p <- l_plot(iris$Petal.Width, iris$Petal.Length) l_copyStates(source = p_savedStates, target = new_p) plot(new_p)"},{"path":"https://great-northern-diver.github.io/loon/articles/savingLoonPlots.html","id":"a-more-complex-example","dir":"Articles","previous_headings":"Interactive analysis and static plots > Reconstruct the plot from saved states","what":"A more complex example","title":"Saving loon plots","text":", default, following states related linking saved [1] \"color\"        \"active\"       \"selected\"     \"linkingKey\"   \"linkingGroup\" Sometimes, interactive analysis involved. , example, involved panning zooming, changing glyphs, particular choices labels titles, . example, direct manipulation loon plot inspector, scatterplot p might point look something like : , analyst zoomed species “versicolor”, jittered locations points, changed glyphs large closed triangles. involves many states, must saved reproduce plot. states saved can named explicitly efficient storage, providing course one knows states need saved. states loon plot p given names(p). risk saving information necessary, choose save states p, Now states available file read back . comes transferring states new plot many choices. go large collection display states (default states still excluding “basic” states panning zooming example). see states, add argument returnNames = TRUE: excluded “basic” states argument excludeBasicStates whose default value TRUE. , different, states excluded using argument exclude list vector. Alternatively, states transferred made explicit naming value argument states. “basic” states excluded default, new plot now looks like can seen, glyph sizes shapes transferred zooming jittering. ensure get exact copy, need include states, exclude none . Now new_p look much like original interactive plot saved. .","code":"names(p_savedStates) ## [1] \"color\"        \"active\"       \"selected\"     \"linkingKey\"   \"linkingGroup\" l_saveStates(p,               states = names(p),               file = \"p_focusOnVersicolor\") p_focusOnVersicolor <- l_getSavedStates(file = \"p_focusOnVersicolor\") l_copyStates(source = p_focusOnVersicolor,               target = new_p,               returnNames = TRUE) plot(new_p) l_copyStates(source = p_focusOnVersicolor,               target = new_p,               excludeBasicStates = FALSE) plot(new_p)"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"illustrates","dir":"Articles","previous_headings":"","what":"Illustrates:","title":"Smoothers and Bone Mineral Density","text":"linked scatterplots panning zooming creating new interactions bindings","code":"library(loon)"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"the-data-bone-mineral-density","dir":"Articles","previous_headings":"","what":"The data: Bone mineral density","title":"Smoothers and Bone Mineral Density","text":"data consists measurements spinal bone mineral density. Several measurements taken 261 North American adolescents years. entire dataset called bone can found R package loon.data. can seen, five variates. idnum uniquely identifies 261 adolescents (N.B. numbered 1 261), sex identifies sex, ethnic “ethnicity/race”. response variate interest rspnbmd relative measure spinal bone mineral density determined ratio difference bone mineral density measured two consecutive visits divided average. Similarly, explanatory variate age average adolescent’s age years two visits. vignette investigate fit smoothing splines data.","code":"data(bone, package = \"loon.data\") summary(bone)"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"the-scatterplot","dir":"Articles","previous_headings":"","what":"The scatterplot","title":"Smoothers and Bone Mineral Density","text":"begin, execute following code: Two windows appeared code executed. One plot p, inspector plot p. plot interactive. Hovering mouse point plot, example, pop itemLabel point. Scrolling mouse wheel (equivalent) plot zooms () plot; note zoom centred mouse position. horizontal zooming , hold “control” key scrolling; vertical zooming hold “alt” (cmd Mac) key scrolling. Zoom anywhere plot. Notice inspector displays miniature version whole plot World View top display. plot bounded World View grey rectangle region plot displayed shown brighter region bounded black rectangle. bright display region can grabbed clicking (holding depressed) left (primary) mouse button. Moving mouse around keeping left button depressed moves bright region inspector turn cause display plot update accordingly. way, inspector World View can used pan entire display. Alternatively, panning may also effected right (secondary) button clicking interior plot, holding mouse button moving mouse. inspector region moves mouse, plot background . Panning zooming can occur either inspector plot plot . either case, panning zooming constrained horizontal control key held time vertical alt cmd key held. get displayed scatterplot back original scale, inspector click scale : plot. Alternatively effect can hand programmatically l_scaleto_plot(p). (scale layers plot use l_scaleto_world(p).) See help(l_plot) details examples. inspector window, immediately World View several tabs, first Analysis tab. first subsection analysis tab contains plot attributes. values determined plot p created according values arguments given l_plot(...). can changed inspector toggling check boxes. complete set arguments used time creation can querying plot p names(l_info_states). values can also accessed changed programmatically example vertical variate, rspnbmd, measured change spinal bone mineral density. Anything zero indicates increase, anything decrease; magnitude rate change density. might interest, , add horizontal line plot zero. accomplished layering line plot p follows: “axis” can turned via inspector programmatically. inspector, click Layers tab. layers appear list ordered top bottom inspector order displayed plot. axis appears Scatterplot hence displayed behind points. Selecting axis, buttons bottom list allow axis placed Scatterplot. axis (Scatterplot) can moved display. Either can made (temporarily) invisible clicking icon showing cartoon eye stroke made visible clicking cartoon eye. Try . axis (layer, e.g. Scatterplot), removed entirely minus sign. Don’t right now; click “Analysis” tab instead.","code":"# The plot x <- bone$age y <- bone$rspnbmd #  A scatterplot p <- l_plot(x, y,             color=\"darkgrey\",             xlabel=\"age\", ylabel=\"rspnbmd\",             showGuides = TRUE, showScales = TRUE,             itemLabel = paste0(\"IDnum = \", bone$idnum, \"\\n\",                                 bone$sex, \"\\n\",                                 \"Age: \", bone$age),             showItemLabels = TRUE,             linkingGroup=\"Bone density\",             title = \"Spinal bone mineral density (rspnbmd)\") p[\"showItemLabels\"] p[\"showGuides\"] p[\"swapAxes\"] <- TRUE p[\"swapAxes\"] <- FALSE axis <- l_layer_line(p,                      x=extendrange(x, f=0.5), y=c(0,0),                      label=\"axis\", linewidth=2,                      color = \"black\",                      dash=c(10,10),                      index=\"end\")   # last argument places axis behind other layers"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"histogram","dir":"Articles","previous_headings":"","what":"Histogram","title":"Smoothers and Bone Mineral Density","text":"histogram can constructed way numeric values. Now, sex factor, result essentially simple bar plot layer labelling bars corresponding sex: Note inspector now shows histogram (.e. barplot) World View plot section Analysis now options peculiar histogram. histogram scatterplot linkingGroup “Bone density” inspector shows 2 plots linked. Selecting left bar histogram highlights females plots. Switching back forth two bars observing scatterplot shows pattern males seems shifted slightly right females. Similarly, selecting point scatterplot causes corresponding slice bar appears histogram highlighted. Multiple selections can made holding shift key selecting. Alternatively, clicking background, holding mouse button sweeping rectangle highlight data objects intersect rectangle. selected, display points can modified clicking colour patches change colour, glyph symbols change shape points, - + signs change size, deactivate (reactivate) remove points (return ) display. Try selecting points scatterplot making various modifications. Note displays linked changes effected (sensible) displays. Note points coloured also possible select points colour inspector. Note shift sweeping (sweeping shift key pressed), multiple selections can made. Couple dynamic selection deselects inverts complex patterns selected points can constructed. return displays original configuration, inspector reactivate points, select Select part Analysis panel, select filled circle glyph shape, single colour available (selecting colour + pop colour picker) return original colour execute p[\"color\"] <- \"darkgrey\".","code":"h <- l_hist(bone$sex,              xlabel = \"sex\",             linkingGroup=\"Bone density\",             title = \"Sex\"             )"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"panning-and-brushing","dir":"Articles","previous_headings":"","what":"Panning and brushing","title":"Smoothers and Bone Mineral Density","text":"second scatterplot display variates. example, plotting age versus patient ID number gives: Ideally plot look like fairly uniform scatter. Assuming idnum assigned recruitment patterns. middle idnum range, example, appears preponderance older ages followed immediately preponderance younger ages. might investigate change idnum low high manifests relationship bone mineral density age brushing points p2 observing effect p. , click p2 inspector p2 focus (appears inspector World View). inspector Select panel (Analysis tab) select : brushing. rectangle appear p2; brush. Since interested observing relationship bone density age conditional idnum, need shape brush long, relatively thin, vertical brush. brush reshaped selecting box lower-right corner moving get shape desired. brush maintain shape (unique p2) changed. Now clicking anywhere p2 brush follow mouse (mouse button depressed) highlight points located within rectangle. example beginning lower left corner scatterplot moving mouse left right horizontally, tall narrow brush select points (nearly ) idnum relationship bone density age idnum increases can seen original scatterplot p. sticky brush, brush accumulate selections brushed, simply use shift key . nature brushing can changed selecting different dynamic modes. turn brushing select sweeping Select panel inspector p2. Zooming panning p2 also reveals interesting structure. Horizontally zoom p2 idnum well separated. horizontally pan across idnums (easily done inspector World View). becomes easy see subject (idnum) appears one, two, three times. value change bone density (must calculated basis two visits) means person two, three, four visits. Checking scales guides boxes plot panel inspector panning reveals also every idnum, difference age 2 appear span 3 years. Together, suggests data may collected single time period 3 years. Moreover, bulk idnums three entries occur early order idnum, possibly meaning early recruitment.","code":"p2 <- l_plot(bone$idnum, bone$age,              xlabel=\"idnum\", ylabel=\"age\",              linkingGroup=\"Bone density\",              title = \"ID numbers and age\")"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"adding-a-dynamically-changing-smooth","dir":"Articles","previous_headings":"","what":"Adding a (dynamically changing) smooth","title":"Smoothers and Bone Mineral Density","text":"summarize relationship, first add straight line fitted lm() using function l_layer_smooth() method \"lm\". function also used add smooth (default method = \"loess\"). Instead, add smoothing spline splines package use fit bone mineral density function time (.e. data p). Unlike straight line fit, smooth shows change spinal bone mineral density rises 12 years age declines thereafter ultimately hitting zero. course aggregate behaviour, sexes. might interesting see changes males females. adding smooth sex may subgroups data like investigate. end introduce dynamic update smooth. Now, like update called whenever interesting change state occurs. numerous possible states (see names(p), names(l_info_states(p)), l_help(\"learn_R_bind\") ). bind anonymous function arguments called whenever change values p contained selected state. means function called point p selected deselected. Note also smooth based temporary x y values. Points scatterplot may moved selecting control button depressed (well shift multiple selection). Alternatively, selected points may pushed together, distributed vertically horizontally, arranged grid, jittered selecting corresponding move button Modify panel inspector. points can returned original position clicking recover button Now go histogram select first female bar, make bar, watch smoothing spline adapts sex. Clearly, females greater changes spinal bone mineral density younger age males. doubt consequence different ages girls boys sexually mature. Brushing set points, linked plots now cause smooth function automatically recalculate redisplay. way one might pursue, example smooth changes subsets idnum values. Note points must active selected. , example, focus smooth changes subset females first deactivating males brushing subset females. Note states bound can seen l_bind_state_ids(p) deleted using l_bind_state_delete(p, \"stateBinding0\").","code":"l_layer_smooth(p, method = \"lm\",                 label = \"straight line fit\",                linecolor = \"firebrick\",                linedash = c(4,4),                linewidth = 4) library(splines) # Fit a smoothing spline fitsmooth <- smooth.spline(x, y, df=5) xOrder <- order(x) smooth <- l_layer_line(p,                        x = x[xOrder],                        y = predict(fitsmooth, x = x[xOrder])$y,                        label = \"smooth fit\",                         linewidth = 4,                        color = \"blue\") ## Define the update function updateSmooth <- function(myPlot, minpts, df, color=\"blue\") {   ## Get the values for x and y from the plot   ##   ## For x   xnew <- myPlot[\"xTemp\"]   if (length(xnew) == 0) {xnew <- myPlot[\"x\"]}      ## For y   ynew <- myPlot[\"yTemp\"]   if (length(ynew) == 0) {ynew <- myPlot[\"y\"]}      ## Now **only** use the active selected points to construct the smooth   sel <- myPlot[\"selected\"] & myPlot[\"active\"]   xnew <- xnew[sel]   ynew <- ynew[sel]   Nsel <- sum(sel)      if (Nsel > 3 & diff(range(xnew)) > 0) {     ## Find the range of the selected x values     xrng <- extendrange(xnew)     xvals.temp <- seq(from=min(xrng),                       to=max(xrng),                        length.out=100)          ## Redo our smooth **only** if we have enough points     if ((Nsel > minpts) & (minpts > (df + 1))){       fit.temp <- smooth.spline(xnew, ynew, df=df)       ypred.temp <- predict(fit.temp,x=xvals.temp)$y       ## update the smooth       if (smooth %in% l_layer_ids(myPlot)) {         ## reconfigure the smooth with new data         l_configure(smooth, x=xvals.temp, y=ypred.temp)       } else {         ## If the smooth has been deleted, then we recreate it          ## (N.B. in the global environment)         smooth <<-  l_layer_line(myPlot,                                  x=xvals.temp,                                   y=ypred.temp,                                  label=\"smooth fit\",                                   linewidth=4,                                  color = color)       }      }   }   ## Update the tcl language's event handler   tcl(\"update\", \"idletasks\") } # Here we \"bind\" the anonymous to the named state changes of p l_bind_state(p, c(\"selected\"),              function() {updateSmooth(p, 10, 5, \"blue\")} )"},{"path":"https://great-northern-diver.github.io/loon/articles/teaching-example-smoothing.html","id":"a-smooth-as-a-running-linear-fit","dir":"Articles","previous_headings":"","what":"A smooth as a running linear fit","title":"Smoothers and Bone Mineral Density","text":"Linear smoothers can thought connected predicted values locally fitted linear models weights maximal point xx prediction made drop zero xx values far away . illustrate add straight line scatterplot fitted data via weighted least squares using Gaussian weights. collection xx values, prediction made median. Gaussian weight function centred median: Use weights fit line data. Clicking Layers tab inspector shows scatterplot, axis, smooth fit, Gaussian weight straight line. Select last render invisible clicking button, , programmatically executing following. Now make fitted line update fit selected points. now bind update function change p either select active states. Selecting male female sex histograms show weighted least squares line sex. Brushing tall thin vertical brush p2 show fitted line changes () similar idnums change. interestingly, object lesson, brush p2 short wide brush age can kept roughly constant. age increases decreases, line segment changes fit: height slope. smooth seen earlier essentially connected midpoints line segments.","code":"GaussWt <- function(x) {   # Get an estimated standard deviation   h <- diff(range(x))/4   # Centre at median   xloc <- median(x)   # Gaussian density   dnorm(x, mean=xloc, sd=h) } # Fit a local line using some Gaussian weights. # Prediction will be at the median of x, fit by ### weights that decrease with x's # distance from the median. fitwls <- lm(y ~ x, weights=GaussWt(x)) linewls <- l_layer_line(p,                          x=x,                         y=predict(fitwls,                                   newdata=data.frame(x=x)),                         label=\"Fitted line\",                         linewidth=4,                         color = \"blue\") l_layer_hide(p, smooth) updateLocalLine <- function(myPlot, minpts, df, volor=\"blue\") {   ## Get the values for x and y from the plot   ## For x   xnew <- myPlot[\"xTemp\"]   if (length(xnew) == 0) {xnew <- myPlot[\"x\"]}      ## For y   ynew <- myPlot[\"yTemp\"]   if (length(ynew) == 0) {ynew <- myPlot[\"y\"]}    ## Now **only** use the active selected points to construct the smooth   sel <- myPlot[\"selected\"] & myPlot[\"active\"]   xnew <- xnew[sel]   ynew <- ynew[sel]   Nsel <- sum(sel)   if (Nsel > 3 & diff(range(xnew)) > 0) {     xrng <- extendrange(xnew)     xvals.temp <- seq(from=min(xrng),                       to=max(xrng),                        length.out=100)     ## Redo line if more than two points.     if (Nsel> 2) {       fit.wls <-  lm(ynew ~ xnew, weights=GaussWt(xnew))       ywls.temp <- predict(fit.wls,                            newdata=data.frame(xnew=xvals.temp))       ## update the fit       if (linewls %in% l_layer_ids(myPlot)) {         l_configure(linewls, x=xvals.temp, y=ywls.temp)       } else {         ## If it's been deleted, we recreate it (in the global environment).         linewls <<- l_layer_line(myPlot,                                  x=xvals.temp,                                  y=predict(fitwls,                                            newdata=data.frame(x=xvals.temp)                                  ),                                  label=\"GaussWt at median line\",                                   linewidth=4,                                  color=\"blue\"         )       }     }      }   ## Update the tcl language's event handler   tcl(\"update\", \"idletasks\") } # Here we \"bind\" the anonymous to the named state changes of p l_bind_state(p, c(\"active\",\"selected\"),              function() {updateLocalLine(p, 10, 5, \"blue\")} )"},{"path":"https://great-northern-diver.github.io/loon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adrian Waddell. Author. R. Wayne Oldford. Author, maintainer, thesis advisor. Zehao Xu. Contributor. Martin Gauch. Contributor.","code":""},{"path":"https://great-northern-diver.github.io/loon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Waddell , Oldford R (2025). loon: Interactive Statistical Data Visualization. R package version 1.4.2, https://great-northern-diver.github.io/loon/.","code":"@Manual{,   title = {loon: Interactive Statistical Data Visualization},   author = {Adrian Waddell and R. Wayne Oldford},   year = {2025},   note = {R package version 1.4.2},   url = {https://great-northern-diver.github.io/loon/}, }"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"loon-","dir":"","previous_headings":"","what":"loon","title":"Interactive Statistical Data Visualization","text":"loon extendible interactive data visualization system designed exploratory visualization. Though primarily exploratory data analysis, can also used develop new interactive analysis teaching tools. sense breadth application possible extensions can seen various vignettes, demos, examples documentation. sense use loon can articles, especially introduction, available .","code":""},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"web-documentation","dir":"","previous_headings":"","what":"Web Documentation","title":"Interactive Statistical Data Visualization","text":"addition R package documentation also TCL R documentation . ß R, accessible loon ","code":"# Combined TCL and R documentation (a learning document) l_help()  # R only manual l_web()  l_web(directory = \"articles\")  # R system documentation help(package = loon\")  vignette(package = \"loon\")  demo(package = \"loon\")"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive Statistical Data Visualization","text":"interactive graphics loon written TCL, accessible R via tcltk R package. sure version R includes Tcl/Tk 8.6.6 (happens default might missing custom R build).","code":"# The easiest way to install loon install.packages(\"loon\")  # You could also install the latest development release directly from GitHub devtools::install_github(\"great-northern-diver/loon\", subdir = \"R\") # Or, to ensure you have the vignettes as well  # (  also accessible via l_web(directory = \"articles\")  ) devtools::install_github(\"great-northern-diver/loon\", subdir = \"R\",                           build_opts = c(\"--no-resave-data\") )"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"other-usageinstallation-notes","dir":"","previous_headings":"Installation","what":"Other Usage/Installation notes","title":"Interactive Statistical Data Visualization","text":"best use loon RStudio within terminal. Rgui app OSX work well loon. default Windows R GUI accept debug messages Tcl, now need use RStudio terminal. Mac users need install XQuartz close XQuartz R running! Otherwise end crashing active R session (including RStudio). Ubuntu one install libtk-img debian package (e.g. sudo apt-get install libtk-img) order get wide variety export formats l_export function.","code":""},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Interactive Statistical Data Visualization","text":"loon installed, work way introductory vignette:","code":"library(loon) # # from the vignette in R vignette(\"introduction\", package = \"loon\") # # or via the web l_web(page = \"introduction\", directory = \"articles\")"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"demos","dir":"","previous_headings":"Getting started","what":"Demos","title":"Interactive Statistical Data Visualization","text":"data used demo quakes giving locations, depth, Richter magnitude earthquakes Fiji since 1964.","code":""},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"histogram","dir":"","previous_headings":"Getting started > Demos","what":"Histogram","title":"Interactive Statistical Data Visualization","text":"binsize can modified graphical element bottom histogram.","code":"h <- l_hist(quakes$depth,             yshows = \"density\",             showBinHandle = TRUE,             xlabel = \"depth\",             title = \"Tonga trench earthquakes\",             linkingGroup = \"quakes\")"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"scatterplot","dir":"","previous_headings":"Getting started > Demos","what":"Scatterplot","title":"Interactive Statistical Data Visualization","text":"Scrolling mouse zoom plot. pan plot, press right mouse button move mouse","code":"p <- l_plot(x = quakes$long, y = quakes$lat,             xlabel = \"longitude\", ylabel = \"latitude\",             linkingGroup = \"quakes\",             title = \"Tonga trench earthquakes\")"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"linking-and-brushing","dir":"","previous_headings":"Getting started > Demos","what":"Linking and Brushing","title":"Interactive Statistical Data Visualization","text":"Two plots linked change one change can affect changes .","code":""},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"id_3d-rotation","dir":"","previous_headings":"Getting started > Demos","what":"3D rotation","title":"Interactive Statistical Data Visualization","text":"","code":"with(l_scale3D(quakes),      l_plot3D(long, lat, depth, linkingGroup = \"quakes\") )"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"facetting","dir":"","previous_headings":"Getting started > Demos","what":"Facetting","title":"Interactive Statistical Data Visualization","text":"plot splited three panels level Richter magnitude.","code":"# add a map layer NZFijiMap <- maps::map(\"world2\", regions = c(\"New Zealand\", \"Fiji\"), plot = FALSE) l_layer(p, NZFijiMap,         label = \"New Zealand and Fiji\",         color = \"forestgreen\",         index = \"end\") # facet `p` levels <- rep(NA, nrow(quakes)) levels[quakes$mag < 5 & quakes$mag >= 4] <- \"Light\" levels[quakes$mag < 6 & quakes$mag >= 5] <- \"Moderate\" levels[quakes$mag >= 6] <- \"Strong\" l_facet(p, by = levels,          linkingGroup = \"quakes\")"},{"path":"https://great-northern-diver.github.io/loon/index.html","id":"on-the-name","dir":"","previous_headings":"","what":"On the name","title":"Interactive Statistical Data Visualization","text":"software named large aquatic bird known common loon (Gavia immer) Canada United States, great northern diver United Kingdom. (Hence name github organization: https://github.com/great-northern-diver) loon visual predator, diving deep beneath surface, chasing prey speed remarkable maneuvrability. apprehended, prey either swallowed immediately , large, least brought surface dealt . seemed excellent metaphor agile, interactive, exploratory visualization system; one empowered analyst chase, perhaps discover, whatever features might revealed data quickly diving surface. goal provide system loon. acronym “loon” fare well (least obvious ostensive name) perhaps synonym “diver” better (direct interactive visual exploration R). , , “loon” funnier … diveR name collection “loon” related packages. can find documentation related packages via l_web() Enjoy!","code":"library(loon) l_web(package = \"loon.data\", directory = \"reference\") l_web(package = \"zenplots\")     # become one with your data l_web(package = \"ggmulti\")      # high dimensional graphics extending the ggplot2 package l_web(package = \"loon.ggplot\")  # interactive grammar of graphics via ggplot2 package l_web(package = \"loon.tourr\")   # interactive high dimensional tours via tourr package # And more coming .."},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"Quickly calculates returns Euclidean distances m vectors one set n vectors another.  set vectors given columns matrix.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"","code":"L2_distance(a, b, df = 0)"},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"d m numeric matrix giving first set m vectors dimension d columns . b d n numeric matrix giving second set n vectors dimension d columns b. df Indicator whether force diagonals returned matrix zero (df = 1) (default df = 0).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"m n matrix containing Euclidean distances column vectors matrix column vectors matrix b.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"fully vectorized (FAST!) function computes Euclidean distance two vectors : ||-B|| = sqrt ( ||||^2 + ||B||^2 - 2*.B ) Originally written L2_distance.m Matlab Roland Bunschoten University Amsterdam, Netherlands.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"Roland Bunschoten (original), Adrian Waddell, Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/L2_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Euclidean distance between two vectors, or between column vectors of two matrices. — L2_distance","text":"","code":"A <- matrix(rnorm(400), nrow = 10) B <- matrix(rnorm(800), nrow = 10) L2_distance(A[,1, drop = FALSE], B[,1, drop = FALSE]) #>          [,1] #> [1,] 6.139374 d_AB <- L2_distance(A,B) d_BB <- L2_distance(B,B, df = 1) # force diagonal to be zero"},{"path":"https://great-northern-diver.github.io/loon/reference/UsAndThem.html","id":null,"dir":"Reference","previous_headings":"","what":"Data to re-create Hans Rosling's famous ","title":"Data to re-create Hans Rosling's famous ","text":"data sourced https://www.gapminder.org/   contains Population, Life Expectancy, Fertility, Income,   Geographic.Region information 1962 2013 198 countries.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/UsAndThem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data to re-create Hans Rosling's famous ","text":"","code":"UsAndThem"},{"path":"https://great-northern-diver.github.io/loon/reference/UsAndThem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data to re-create Hans Rosling's famous ","text":"data frame 9855 rows 8 variables Country country name Year year recorded measurements Population country's population LifeExpectancy average life expectancy years birth Fertility number babies per woman Income Gross domestic product per person adjusted inflation purchasing power  (international dollars) Geographic.Region one six large global regions Geographic.Region.ID two letter identification country","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/UsAndThem.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data to re-create Hans Rosling's famous ","text":"https://www.gapminder.org/","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a loongraph object to an object of class graph — as.graph","title":"Convert a loongraph object to an object of class graph — as.graph","text":"Loon's native graph class fairly basic. graph package (  bioconductor) provides powerful alternative create work   graphs. Also, many graph theoretic algorithms complement   function graph layout visualization methods implemented   graph objects RBGL Rgraphviz R packages.   information packages useful work graphs see   gRaphical Models R CRAN Task View   https://cran.r-project.org/web/views/.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a loongraph object to an object of class graph — as.graph","text":"","code":"as.graph(loongraph)"},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a loongraph object to an object of class graph — as.graph","text":"loongraph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a loongraph object to an object of class graph — as.graph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a loongraph object to an object of class graph — as.graph","text":"See   https://www.bioconductor.org/packages/release/bioc/html/graph.html   information graph R package.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a loongraph object to an object of class graph — as.graph","text":"","code":"if (requireNamespace(\"graph\", quietly = TRUE)) {   g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)   g1 <- as.graph(g) }"},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a graph object to a loongraph object — as.loongraph","title":"Convert a graph object to a loongraph object — as.loongraph","text":"Sometimes simpler work objects class loongraph   work object class graph.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a graph object to a loongraph object — as.loongraph","text":"","code":"as.loongraph(graph)"},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a graph object to a loongraph object — as.loongraph","text":"graph object class graph (defined graph library)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a graph object to a loongraph object — as.loongraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a graph object to a loongraph object — as.loongraph","text":"See   https://www.bioconductor.org/packages/release/bioc/html/graph.html   information graph R package. information run: l_help(\"learn_R_display_graph.html.html#graph-utilities\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as.loongraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a graph object to a loongraph object — as.loongraph","text":"","code":"if (requireNamespace(\"graph\", quietly = TRUE)) {   graph_graph  = graph::randomEGraph(LETTERS[1:15], edges=100)   loon_graph <- as.loongraph(graph_graph) }"},{"path":"https://great-northern-diver.github.io/loon/reference/as_grid_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a loon size to a grid size — as_grid_size","title":"Turn a loon size to a grid size — as_grid_size","text":"size loon determined pixel (px), , grid graphics, size determined pointsize (pt)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as_grid_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a loon size to a grid size — as_grid_size","text":"","code":"as_grid_size(   size,   type = c(\"points\", \"texts\", \"images\", \"radial\", \"parallel\", \"polygon\", \"lines\"),   adjust = 1,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/as_grid_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a loon size to a grid size — as_grid_size","text":"size input loon size type glyph type; one \"points\", \"texts\", \"images\", \"radial\", \"parallel\", \"polygon\", \"lines\". adjust pixel (px) 96DPI (dots per inch) equal 0.75 point. However, different machines, DPI slightly different. Argument adjust used twist size. HACK removed later version. ... arguments used specify size, e.g. pch \"points\", ratio \"image\" p \"parallel\".","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as_hex6color.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a 6 hexidecimal digit color representations — as_hex6color","title":"Return a 6 hexidecimal digit color representations — as_hex6color","text":"Return 6 hexidecimal digit color representations","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as_hex6color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a 6 hexidecimal digit color representations — as_hex6color","text":"","code":"as_hex6color(color)"},{"path":"https://great-northern-diver.github.io/loon/reference/as_hex6color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a 6 hexidecimal digit color representations — as_hex6color","text":"color input color","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/as_hex6color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a 6 hexidecimal digit color representations — as_hex6color","text":"Compared hex12tohex6(), accommodate 6 digit code, 12 digit code real color names.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/as_hex6color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a 6 hexidecimal digit color representations — as_hex6color","text":"","code":"color <- c(\"#FF00FF\", \"#999999999999\", \"red\") # return 12 hexidecimal digit color loon:::l_hexcolor(color) #> [1] \"#FFFF0000FFFF\" \"#999999999999\" \"#FFFF00000000\" # return 6 hexidecimal digit color as_hex6color(color) #> [1] \"#FF00FF\" \"#999999\" \"#FF0000\" # return color names l_colorName(color) #> [1] \"magenta\" \"gray60\"  \"red\"      if (FALSE) # WRONG COLORS hex12tohex6(color) # \\dontrun{}"},{"path":"https://great-northern-diver.github.io/loon/reference/char2num.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"A Character Data Frame to a Numerical Data Frame — char2num.data.frame","title":"A Character Data Frame to a Numerical Data Frame — char2num.data.frame","text":"Turn data frame characters data frame numerical values. character converted numerical direct, turned factor first, numerical data","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/char2num.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Character Data Frame to a Numerical Data Frame — char2num.data.frame","text":"","code":"char2num.data.frame(chardataframe)"},{"path":"https://great-northern-diver.github.io/loon/reference/char2num.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Character Data Frame to a Numerical Data Frame — char2num.data.frame","text":"chardataframe char data frame","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/char2num.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Character Data Frame to a Numerical Data Frame — char2num.data.frame","text":"","code":"data <- data.frame(x = c(\"1\", \"2\", \"3\"),                    y = c(\"foo\", \"bar\", \"foo\"),                    z = 4:6) # ERROR # data + 1 numData <- char2num.data.frame(data) numData + 1 #>   x y z #> 1 2 2 5 #> 2 3 1 6 #> 3 4 2 7  if(interactive()) {   s <- l_serialaxes(iris)   data <- s[\"data\"]   # it is a character data frame   data[1,1]   numData <- char2num.data.frame(data)   numData[1,1] }"},{"path":"https://great-northern-diver.github.io/loon/reference/color_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a palette with loon's color mapping — color_loon","title":"Create a palette with loon's color mapping — color_loon","text":"Used map nominal data colors. default colors   chosen categories can well differentiated visually (e.g.   highlight different groups)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/color_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a palette with loon's color mapping — color_loon","text":"","code":"color_loon()"},{"path":"https://great-northern-diver.github.io/loon/reference/color_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a palette with loon's color mapping — color_loon","text":"function takes vector values maps vector   6 digit hexadecimal encoded color representation (strings). Note   loon uses internally 12 digit hexadecimal encoded color values.    values get passed function valid color names Tcl   colors get returned hexencoded. Otherwise, one   elements valid color name uses loons default color   mapping algorithm.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/color_loon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a palette with loon's color mapping — color_loon","text":"function loon uses default map values   colors. Loon's mapping algorithm follows:  values already represent valid Tk colors (see   tkcolors) colors taken number distinct values less number values   loon's color mapping list get mapped according color list,   see l_setColorList l_getColorList. distinct values colors loon's color   mapping list loon's color mapping algorithm used. See   loon_palette details section documentation   l_setColorList. mappings see col_numeric   col_factor functions scales package.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/color_loon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a palette with loon's color mapping — color_loon","text":"","code":"pal <- color_loon() pal(letters[1:4]) #> [1] \"#999999\" \"#A6CEE3\" \"#FFC0CB\" \"#B2DF8A\" pal(c('a','a','b','c')) #> [1] \"#999999\" \"#999999\" \"#A6CEE3\" \"#FFC0CB\" pal(c('green', 'yellow')) #> [1] \"#008000\" \"#FFFF00\"  # show color choices for different n's if (requireNamespace(\"grid\", quietly = TRUE)) {   grid::grid.newpage()   grid::pushViewport(grid::plotViewport())   grid::grid.rect()   n <- c(2,4,8,16, 21)   # beyond this, colors are generated algorithmically   # generating a warning   grid::pushViewport(grid::dataViewport(xscale=c(0, max(n)+1),                      yscale=c(0, length(n)+1)))   grid::grid.yaxis(at=c(1:length(n)), label=paste(\"n =\", n))   for (i in rev(seq_along(n))) {    cols <- pal(1:n[i])    grid::grid.points(x = 1:n[i], y = rep(i, n[i]),                      default.units = \"native\", pch=15,                      gp=grid::gpar(col=cols))   }   grid::grid.text(\"note the first i colors are shared for each n\",                   y = grid::unit(1,\"npc\") + grid::unit(1, \"line\")) }"},{"path":"https://great-northern-diver.github.io/loon/reference/complement.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the Complement Graph of a Graph — complement","title":"Create the Complement Graph of a Graph — complement","text":"Creates complement graph graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the Complement Graph of a Graph — complement","text":"","code":"complement(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/complement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the Complement Graph of a Graph — complement","text":"x graph loongraph object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the Complement Graph of a Graph — complement","text":"graph object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the Complement Graph of a loon Graph — complement.loongraph","title":"Create the Complement Graph of a loon Graph — complement.loongraph","text":"Creates complement graph graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the Complement Graph of a loon Graph — complement.loongraph","text":"","code":"# S3 method for class 'loongraph' complement(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/complement.loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the Complement Graph of a loon Graph — complement.loongraph","text":"x loongraph object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.loongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the Complement Graph of a loon Graph — complement.loongraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/complement.loongraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create the Complement Graph of a loon Graph — complement.loongraph","text":"method currently implemented undirected graphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete graph or digraph with a set of nodes — completegraph","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"Wikipedia: \"complete graph simple undirected graph   every pair distinct vertices connected unique edge.   complete digraph directed graph every pair distinct   vertices connected pair unique edges (one direction","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"","code":"completegraph(nodes, isDirected = FALSE)"},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"nodes character vector node names, element defines node hence elements need unique isDirected boolean scalar indicate wheter returned object complete graph (undirected) complete digraph (directed).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"Note function masks completegraph function   graph package. Hence good idead specify package namespace   ::, .e. loon::completegraph graph::completegraph. information run: l_help(\"learn_R_display_graph.html.html#graph-utilities\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/completegraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete graph or digraph with a set of nodes — completegraph","text":"","code":"g <- loon::completegraph(letters[1:5])"},{"path":"https://great-northern-diver.github.io/loon/reference/condGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a named grob or a template grob depending on a test — condGrob","title":"Create a named grob or a template grob depending on a test — condGrob","text":"Creates returns grid object using function given `grobFun` `test` `TRUE`  Otherwise simple `grob()` produced parameters.  grob parameters given `...`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/condGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a named grob or a template grob depending on a test — condGrob","text":"","code":"condGrob(test = TRUE, grobFun = grid::grob, name = \"grob name\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/condGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a named grob or a template grob depending on a test — condGrob","text":"test Either `TRUE` `FALSE` indicate whether `grobFun` used (default `TRUE`) . grobFun function used create grob `test = TRUE` (e.g. `textGrob`, `polygonGrob`, etc.). name name used returned grob. ... arguments given `grobFun` (`grob()` `test = FALSE`).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/condGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a named grob or a template grob depending on a test — condGrob","text":"grob produced either `grobFun` given `grob()` using remaining arguments. `test = FALSE` name suffixed \": `grobFun name` arguments\".","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/condGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a named grob or a template grob depending on a test — condGrob","text":"","code":"myGrob <- condGrob(test = (runif(1) > 0.5),                    grobFun = textGrob,                    name = \"my label\",                    label = \"Some random text\") #> Error: object 'textGrob' not found myGrob #> Error: object 'myGrob' not found"},{"path":"https://great-northern-diver.github.io/loon/reference/facet_grid_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout as a grid — facet_grid_layout","title":"Layout as a grid — facet_grid_layout","text":"Layout grid","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/facet_grid_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout as a grid — facet_grid_layout","text":"","code":"facet_grid_layout(   plots,   subtitles,   by = NULL,   prop = 10,   parent = NULL,   title = \"\",   xlabel = \"\",   ylabel = \"\",   labelLocation = c(\"top\", \"right\"),   byrow = FALSE,   swapAxes = FALSE,   labelBackground = l_getOption(\"facetLabelBackground\"),   labelForeground = l_getOption(\"foreground\"),   labelBorderwidth = 2,   labelRelief = \"ridge\",   plotWidth = 200,   plotHeight = 200,   sep = \"*\",   maxCharInOneRow = 10,   new.toplevel = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/facet_grid_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout as a grid — facet_grid_layout","text":"plots list loon plots subtitles subtitles layout. list length equal number variables. element list unique values variable. object class \"formula\" (one can coerced class): symbolic description plots separated prop proportion label height widget height parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . title title widget xlabel xlabel widget ylabel ylabel widget labelLocation Labels location. Length two vector layout grid. first one used determine position column labels ('top' 'bottom'). second one used determine position row labels ('right' 'left'). Length one vector layout wrap, 'top' 'bottom'. byrow Place widget row column swapAxes swap axes, TRUE FALSE labelBackground Label background color labelForeground Label foreground color labelBorderwidth Label border width labelRelief Label relief plotWidth default plot width (pixel) plotHeight default plot height (pixel) sep character string separate combine vector maxCharInOneRow deprecated new.toplevel determine whether parent new top level. new window, widgets packed ... named arguments modify plot states. See l_info_states instantiated l_plot examples names values.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/facet_separate_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"layout separately — facet_separate_layout","title":"layout separately — facet_separate_layout","text":"layout separately","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/facet_separate_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"layout separately — facet_separate_layout","text":"","code":"facet_separate_layout(   plots,   subtitles,   title = \"\",   xlabel = \"\",   ylabel = \"\",   sep = \"*\",   maxCharInOneRow = 10,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/facet_separate_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"layout separately — facet_separate_layout","text":"plots list loon plots subtitles subtitles layout. list length equal number variables. element list unique values variable. title title widget xlabel xlabel widget ylabel ylabel widget sep character string separate combine vector maxCharInOneRow deprecated ... named arguments modify plot states. See l_info_states instantiated l_plot examples names values.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/facet_wrap_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout as a wrap — facet_wrap_layout","title":"Layout as a wrap — facet_wrap_layout","text":"Layout wrap","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/facet_wrap_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout as a wrap — facet_wrap_layout","text":"","code":"facet_wrap_layout(   plots,   subtitles,   prop = 10,   parent = NULL,   title = \"\",   xlabel = \"\",   ylabel = \"\",   nrow = NULL,   ncol = NULL,   labelLocation = \"top\",   byrow = TRUE,   swapAxes = FALSE,   labelBackground = l_getOption(\"facetLabelBackground\"),   labelForeground = l_getOption(\"foreground\"),   labelBorderwidth = 2,   labelRelief = \"ridge\",   plotWidth = 200,   plotHeight = 200,   sep = \"*\",   maxCharInOneRow = 10,   new.toplevel = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/facet_wrap_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout as a wrap — facet_wrap_layout","text":"plots list loon plots subtitles subtitles layout. list length equal number variables. element list unique values variable. prop proportion label height widget height parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . title title widget xlabel xlabel widget ylabel ylabel widget nrow number layout rows ncol number layout columns labelLocation Labels location. Length two vector layout grid. first one used determine position column labels ('top' 'bottom'). second one used determine position row labels ('right' 'left'). Length one vector layout wrap, 'top' 'bottom'. byrow Place widget row column swapAxes swap axes, TRUE FALSE labelBackground Label background color labelForeground Label foreground color labelBorderwidth Label border width labelRelief Label relief plotWidth default plot width (pixel) plotHeight default plot height (pixel) sep character string separate combine vector maxCharInOneRow deprecated new.toplevel determine whether parent new top level. new window, widgets packed ... named arguments modify plot states. See l_info_states instantiated l_plot examples names values.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the Displayed Color — get_display_color","title":"Return the Displayed Color — get_display_color","text":"Always reflect current displayed color.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the Displayed Color — get_display_color","text":"","code":"get_display_color(color, selected)"},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the Displayed Color — get_display_color","text":"color loon widget color selected selected states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the Displayed Color — get_display_color","text":"color shown plot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the Displayed Color — get_display_color","text":"loon, element (.e. point, bin, line) \"temporary\" color \"permanent\" color. one element selected, color switched \"temporary\" color highlight . selection state eliminated, \"permanent\" color element displayed. function always gives \"temporary\" displayed color.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_display_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the Displayed Color — get_display_color","text":"","code":"if(interactive()) {   p <- l_plot(1:10)   p['selected'][c(1,3,5)] <- TRUE    displayedColor <- get_display_color(p['color'], p['selected'])   plot(1:10, bg = as_hex6color(displayedColor), pch = 21) }"},{"path":"https://great-northern-diver.github.io/loon/reference/get_facets.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a loon plot for each facet from an existing loon plot. — get_facets","title":"Creates a loon plot for each facet from an existing loon plot. — get_facets","text":"generic function used l_facet facetting existing loon plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_facets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a loon plot for each facet from an existing loon plot. — get_facets","text":"","code":"get_facets(widget, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/get_facets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a loon plot for each facet from an existing loon plot. — get_facets","text":"widget loon widget ... arguments function used create loon plot facet.  Depending plot facetted, include arguments ,  , parent,  layout, inheritLayers, separate, bySubstitute. See l_facet details parameters. loon plot constructor parameters can passed well way.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_facets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a loon plot for each facet from an existing loon plot. — get_facets","text":"list containing named components plots, subtitles, child = child, new.toplevel containing facets plots relevant information construct facetted plot.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/get_font_info_from_tk.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Font Information — get_font_info_from_tk","title":"Return Font Information — get_font_info_from_tk","text":"Return Font Information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_font_info_from_tk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Font Information — get_font_info_from_tk","text":"","code":"get_font_info_from_tk(tkFont)"},{"path":"https://great-northern-diver.github.io/loon/reference/get_font_info_from_tk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Font Information — get_font_info_from_tk","text":"tkFont specified tk font character, one l_getOption(\"font-scales\"), l_getOption(\"font-title\"), l_getOption(\"font-xlabel\"), l_getOption(\"font-ylabel\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_font_info_from_tk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Font Information — get_font_info_from_tk","text":"list font information, containing font \"family\", font \"face\" font \"size\"","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_font_info_from_tk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Font Information — get_font_info_from_tk","text":"","code":"fontscales <- l_getOption(\"font-scales\") get_font_info_from_tk(fontscales) #> $family #> [1] \"sans\" #>  #> $face #> [1] \"plain\" #>  #> $size #> [1] \"9\" #>"},{"path":"https://great-northern-diver.github.io/loon/reference/get_layer_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Layer States — get_layer_states","title":"Get Layer States — get_layer_states","text":"Return input widget states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_layer_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Layer States — get_layer_states","text":"","code":"get_layer_states(target, native_unit = TRUE, omit = NULL)"},{"path":"https://great-northern-diver.github.io/loon/reference/get_layer_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Layer States — get_layer_states","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. native_unit return numerical vectors unit objects omit deprecated","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_layer_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Layer States — get_layer_states","text":"get layer states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_layer_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Layer States — get_layer_states","text":"","code":"if(interactive()){ p <- l_plot(x = c(0,1), y = c(0,1)) l <- l_layer_rectangle(p, x = c(0,0.5), y = c(0, 0.5)) # the coordinates are in `unit` get_layer_states(p) # the coordinates are numerical get_layer_states(p, native_unit = FALSE) # get `l_layer` state get_layer_states(l) }"},{"path":"https://great-northern-diver.github.io/loon/reference/get_model_display_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Order of the Display — get_model_display_order","title":"Get the Order of the Display — get_model_display_order","text":"loon, points (scatter plot) lines (parallel radial coordinate) highlighted, displayed order changed. function always reflects current displayed order","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_model_display_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Order of the Display — get_model_display_order","text":"","code":"get_model_display_order(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/get_model_display_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Order of the Display — get_model_display_order","text":"widget l_plot l_serialaxes widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/get_model_display_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Order of the Display — get_model_display_order","text":"","code":"if(interactive()) {   p <- l_plot(rnorm(10))   get_model_display_order(p)   p['selected'][c(1,3,5,7)] <- TRUE   # The 1st, 3rd, 5th, 7th points will be drawn afterwards   # to make sure that they are displayed on top   get_model_display_order(p) }"},{"path":"https://great-northern-diver.github.io/loon/reference/glyph_to_pch.html","id":null,"dir":"Reference","previous_headings":"","what":"Glyph to Pch — glyph_to_pch","title":"Glyph to Pch — glyph_to_pch","text":"turn loon point glyph R graphics plotting 'character' (pch)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/glyph_to_pch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glyph to Pch — glyph_to_pch","text":"","code":"glyph_to_pch(glyph)"},{"path":"https://great-northern-diver.github.io/loon/reference/glyph_to_pch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glyph to Pch — glyph_to_pch","text":"glyph glyph type loon, must \"circle\", \"ocircle\", \"ccircle\", \"square\", \"osquare\", \"csquare\", \"triangle\", \"otriangle\", \"ctriangle\", \"diamond\", \"cdiamond\", \"odiamond\". input glyph valid, NA returned.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/glyph_to_pch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glyph to Pch — glyph_to_pch","text":"pch type","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/glyph_to_pch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glyph to Pch — glyph_to_pch","text":"","code":"glyph_to_pch(c(\"circle\", \"ocircle\", \"ccircle\",                \"square\", \"osquare\", \"csquare\",                \"triangle\", \"otriangle\", \"ctriangle\",                \"diamond\", \"cdiamond\", \"odiamond\",                \"foo\")) #>    circle   ocircle   ccircle    square   osquare   csquare  triangle otriangle  #>        19         1        21        15         0        22        17         2  #> ctriangle   diamond  cdiamond  odiamond       foo  #>        24        18        23         5        NA"},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Make each space in a node apprear only once — graphreduce","title":"Make each space in a node apprear only once — graphreduce","text":"Reduce graph unique node names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make each space in a node apprear only once — graphreduce","text":"","code":"graphreduce(graph, separator)"},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make each space in a node apprear only once — graphreduce","text":"graph graph class loongraph separator one character separates spaces node names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make each space in a node apprear only once — graphreduce","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make each space in a node apprear only once — graphreduce","text":"Note string based operation. Node names must contain   separator character!","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/graphreduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make each space in a node apprear only once — graphreduce","text":"","code":"G <- completegraph(nodes=LETTERS[1:4]) LG <- linegraph(G)  LLG <- linegraph(LG)  R_LLG <- graphreduce(LLG)"},{"path":"https://great-northern-diver.github.io/loon/reference/grid.loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","title":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","text":"Create optionally draw grid grob loon widget handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/grid.loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","text":"","code":"grid.loon(target, name = NULL, gp = gpar(), draw = TRUE, vp = NULL)"},{"path":"https://great-northern-diver.github.io/loon/reference/grid.loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. name character identifier grob, NULL. Used find grob display list /child another grob. gp gpar object, NULL, typically output call function gpar. basically list graphical parameter settings. draw logical value indicating whether graphics output produced. vp grid viewport object (NULL).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/grid.loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","text":"grid grob loon plot","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/grid.loon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and optionally draw a grid grob from a loon widget handle — grid.loon","text":"","code":"if (FALSE) { # \\dontrun{ library(grid) widget <- with(iris, l_plot(Sepal.Length, Sepal.Width)) grid.loon(widget) } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/hex12tohex6.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","title":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","text":"Tk colors must 6 hexadecimal format two hexadecimal digits red, green, blue components.  Twelve hexadecimal digit colors 4 hexadecimal digits .  function converts 12 digit format 6 provided color preserved.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/hex12tohex6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","text":"","code":"hex12tohex6(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/hex12tohex6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","text":"x vector 12 digit hexcolors","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/hex12tohex6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","text":"Function throws warning conversion loses information.   l_hexcolor function converts Tcl color specification   12 digit hexadecimal color representation.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/hex12tohex6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 12 hexadecimal digit color representations to 6 hexidecimal digit color representations — hex12tohex6","text":"","code":"x <- l_hexcolor(c(\"red\", \"green\", \"blue\", \"orange\")) x #> [1] \"#FFFF00000000\" \"#000080800000\" \"#00000000FFFF\" \"#FFFFA5A50000\" hex12tohex6(x) #> [1] \"#FF0000\" \"#008000\" \"#0000FF\" \"#FFA500\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_Rlist2nestedTclList.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","title":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","text":"helper function create nested Tcl list R   list (.e. list vectors).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_Rlist2nestedTclList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","text":"","code":"l_Rlist2nestedTclList(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_Rlist2nestedTclList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","text":"x list vectors","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_Rlist2nestedTclList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","text":"string represents tcl nested list","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_Rlist2nestedTclList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an R list to a nested Tcl list — l_Rlist2nestedTclList","text":"","code":"x <- list(c(1,3,4), c(4,3,2,1), c(4,3,2,5,6)) l_Rlist2nestedTclList(x) #> [1] \"{1 3 4} {4 3 2 1} {4 3 2 5 6}\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_after_idle.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a function on once the processor is idle — l_after_idle","title":"Evaluate a function on once the processor is idle — l_after_idle","text":"possible observer call configure method   plot plot still configuration pipeline.   case, warning thrown unwanted side effects can happen next   observer line gets outdated notification. case,   recommended use l_after_idle function evaluates code   processor idle.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_after_idle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a function on once the processor is idle — l_after_idle","text":"","code":"l_after_idle(fun)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_after_idle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a function on once the processor is idle — l_after_idle","text":"fun function evaluated tcl interpreter idle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the aspect ratio of a plot — l_aspect<-","title":"Set the aspect ratio of a plot — l_aspect<-","text":"aspect ratio defined ratio number pixels   one data unit y axis number pixels one data unit   x axes.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the aspect ratio of a plot — l_aspect<-","text":"","code":"l_aspect(widget) <- value"},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the aspect ratio of a plot — l_aspect<-","text":"widget widget path string object handle value aspect ratio","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect-set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the aspect ratio of a plot — l_aspect<-","text":"Changing aspect ratio l_aspect<- changes effectively   zoomY state obtain desired aspect ratio. Note   aspect ratio loon depends plot width, plot height states   zoomX, zoomY, deltaX, deltaY   swapAxes. Hence, aspect aspect ratio can set permanently   loon plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the aspect ratio of a plot — l_aspect<-","text":"","code":"if (FALSE) { # \\dontrun{ p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))  l_aspect(p) l_aspect(p) <- 1 } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the aspect ratio of a plot — l_aspect","title":"Query the aspect ratio of a plot — l_aspect","text":"aspect ratio defined ratio number pixels   one data unit y axis number pixels one data unit   x axes.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the aspect ratio of a plot — l_aspect","text":"","code":"l_aspect(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the aspect ratio of a plot — l_aspect","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the aspect ratio of a plot — l_aspect","text":"aspect ratio","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_aspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the aspect ratio of a plot — l_aspect","text":"","code":"if (FALSE) { # \\dontrun{ p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))  l_aspect(p) l_aspect(p) <- 1 } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_basePaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the set of basic path types for loon plots. — l_basePaths","title":"Get the set of basic path types for loon plots. — l_basePaths","text":"Loon's plots constructed TCL identified path string appearing window containing plot. path string begins unique identifier plot ends suffix describing type loon plot displayed. path identifying plot string concatenation identifier type. function returns set base (non-compound) loon path types.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_basePaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the set of basic path types for loon plots. — l_basePaths","text":"","code":"l_basePaths()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_basePaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the set of basic path types for loon plots. — l_basePaths","text":"character vector base path types.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_binCut.html","id":null,"dir":"Reference","previous_headings":"","what":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","title":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","text":"l_binCut divides l_hist widget x current histogram intervals codes values x according interval fall (active). modelled cut base package.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_binCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","text":"","code":"l_binCut(widget, labels, digits = 2, inactive)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_binCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","text":"widget loon histogram widget. labels Labels identify bin observations . default, labels constructed using \"(,b]\" interval notation. labels = FALSE, simple integer codes given histogram's bin number returned instead factor. labels can also vector length equal number bins; used construct vector identifying bins. digits number digits used formatting breaks default labels. inactive value use inactive observations labels vector. Default depends labels.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_binCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","text":"vector bin identifiers length equal total number observations histogram. type vector depends labels argument. default labels = NULL, factor returned, labels = FALSE, vector bin numbers, arbitrary vector labels vector bins labelled order labels returned. Inactive cases appear bin assigned value active given. default active value also depends labels:  labels = NULL, default active \"(-Inf, Inf)\"; labels = FALSE, default active  -1; labels vector length equal number bins, default active NA. value active denotes bin name inactive cases.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_binCut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get labels for each observation according to bin cuts in the histogram. — l_binCut","text":"","code":"if(interactive()) { h <- l_hist(iris) h[\"active\"] <- iris$Species != \"setosa\" binCut <- l_binCut(h) h['color'] <- binCut ## number of bins nBins <- length(l_getBinIds(h)) ## ggplot color hue gg_color_hue <- function(n) {   hues <- seq(15, 375, length = n + 1)   hcl(h = hues, l = 65, c = 100)[1:n] } h['color'] <- l_binCut(h, labels = gg_color_hue(nBins), inactive = \"firebrick\") h[\"active\"] <- TRUE }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Canvas Binding — l_bind_canvas","title":"Create a Canvas Binding — l_bind_canvas","text":"Canvas bindings triggered mouse/keyboard gesture   plot whole.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Canvas Binding — l_bind_canvas","text":"","code":"l_bind_canvas(widget, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Canvas Binding — l_bind_canvas","text":"widget widget path string object handle event event patterns defined Tk canvas widget https://www.tcl-lang.org/man/tcl8.6/TkCmd/bind.htm#M5. callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Canvas Binding — l_bind_canvas","text":"canvas binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Canvas Binding — l_bind_canvas","text":"Canvas bindings used evaluate callbacks certain X events canvas widget (underlying widget loon's plot widgets). X events include re-sizing canvas entering canvas mouse. Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Canvas Binding — l_bind_canvas","text":"","code":"# binding for when plot is resized if(interactive()){ p <- l_plot(iris[,1:2], color=iris$Species)  printSize <- function(p) {     size <- l_size(p)     cat(paste('Size of widget ', p, ' is: ',               size[1], 'x', size[2], ' pixels\\n', sep='')) }  l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})  id <- l_bind_canvas_ids(p) id  l_bind_canvas_get(p, id)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a canvas binding — l_bind_canvas_delete","title":"Delete a canvas binding — l_bind_canvas_delete","text":"Remove canvas binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a canvas binding — l_bind_canvas_delete","text":"","code":"l_bind_canvas_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a canvas binding — l_bind_canvas_delete","text":"widget widget path string object handle id canvas binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a canvas binding — l_bind_canvas_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"","code":"l_bind_canvas_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"widget widget path string object handle id canvas binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the event pattern and callback Tcl code of a canvas binding — l_bind_canvas_get","text":"","code":"# binding for when plot is resized if(interactive()){ p <- l_plot(iris[,1:2], color=iris$Species)  printSize <- function(p) {     size <- l_size(p)     cat(paste('Size of widget ', p, ' is: ',               size[1], 'x', size[2], ' pixels\\n', sep='')) }  l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})  id <- l_bind_canvas_ids(p) id  l_bind_canvas_get(p, id)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List canvas binding ids — l_bind_canvas_ids","title":"List canvas binding ids — l_bind_canvas_ids","text":"List user added canvas binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List canvas binding ids — l_bind_canvas_ids","text":"","code":"l_bind_canvas_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List canvas binding ids — l_bind_canvas_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List canvas binding ids — l_bind_canvas_ids","text":"vector canvas binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List canvas binding ids — l_bind_canvas_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List canvas binding ids — l_bind_canvas_ids","text":"","code":"# binding for when plot is resized if(interactive()){ p <- l_plot(iris[,1:2], color=iris$Species)  printSize <- function(p) {     size <- l_size(p)     cat(paste('Size of widget ', p, ' is: ',               size[1], 'x', size[2], ' pixels\\n', sep='')) }  l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})  id <- l_bind_canvas_ids(p) id  l_bind_canvas_get(p, id)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","title":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","text":"order canvas bindings defines get evaluated   event matches event patterns multiple canvas bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","text":"","code":"l_bind_canvas_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","text":"widget widget path string object handle ids new canvas binding id evaluation order, must rearrangement elements returned l_bind_canvas_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_canvas_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the canvas binding evaluation sequence — l_bind_canvas_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a context binding — l_bind_context","title":"Add a context binding — l_bind_context","text":"Creates binding evaluates callback particular changes collection contexts display.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a context binding — l_bind_context","text":"","code":"l_bind_context(widget, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a context binding — l_bind_context","text":"widget widget path string object handle event vector one following events: 'add', 'delete', 'relabel' callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a context binding — l_bind_context","text":"context binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a context binding — l_bind_context","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a context binding — l_bind_context_delete","title":"Delete a context binding — l_bind_context_delete","text":"Remove context binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a context binding — l_bind_context_delete","text":"","code":"l_bind_context_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a context binding — l_bind_context_delete","text":"widget widget path string object handle id context binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a context binding — l_bind_context_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","title":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","text":"","code":"l_bind_context_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","text":"widget widget path string object handle id context binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a context binding — l_bind_context_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List context binding ids — l_bind_context_ids","title":"List context binding ids — l_bind_context_ids","text":"List user added context binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List context binding ids — l_bind_context_ids","text":"","code":"l_bind_context_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List context binding ids — l_bind_context_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List context binding ids — l_bind_context_ids","text":"vector context binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List context binding ids — l_bind_context_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the context binding evaluation sequence — l_bind_context_reorder","title":"Reorder the context binding evaluation sequence — l_bind_context_reorder","text":"order context bindings defines get evaluated   event matches event patterns multiple context bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the context binding evaluation sequence — l_bind_context_reorder","text":"","code":"l_bind_context_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the context binding evaluation sequence — l_bind_context_reorder","text":"widget widget path string object handle ids new context binding id evaluation order, must rearrangement elements returned l_bind_context_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the context binding evaluation sequence — l_bind_context_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_context_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the context binding evaluation sequence — l_bind_context_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a glyph binding — l_bind_glyph","title":"Add a glyph binding — l_bind_glyph","text":"Creates binding evaluates callback particular changes collection glyphs display.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a glyph binding — l_bind_glyph","text":"","code":"l_bind_glyph(widget, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a glyph binding — l_bind_glyph","text":"widget widget path string object handle event vector one following events: 'add', 'delete', 'relabel' callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a glyph binding — l_bind_glyph","text":"glyph binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a glyph binding — l_bind_glyph","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a glyph binding — l_bind_glyph_delete","title":"Delete a glyph binding — l_bind_glyph_delete","text":"Remove glyph binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a glyph binding — l_bind_glyph_delete","text":"","code":"l_bind_glyph_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a glyph binding — l_bind_glyph_delete","text":"widget widget path string object handle id glyph binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a glyph binding — l_bind_glyph_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","title":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","text":"","code":"l_bind_glyph_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","text":"widget widget path string object handle id glyph binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a glyph binding — l_bind_glyph_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List glyph binding ids — l_bind_glyph_ids","title":"List glyph binding ids — l_bind_glyph_ids","text":"List user added glyph binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List glyph binding ids — l_bind_glyph_ids","text":"","code":"l_bind_glyph_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List glyph binding ids — l_bind_glyph_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List glyph binding ids — l_bind_glyph_ids","text":"vector glyph binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List glyph binding ids — l_bind_glyph_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","title":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","text":"order glyph bindings defines get evaluated   event matches event patterns multiple glyph bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","text":"","code":"l_bind_glyph_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","text":"widget widget path string object handle ids new glyph binding id evaluation order, must rearrangement elements returned l_bind_glyph_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_glyph_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the glyph binding evaluation sequence — l_bind_glyph_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Canvas Binding — l_bind_item","title":"Create a Canvas Binding — l_bind_item","text":"Canvas bindings triggered mouse/keyboard gesture   plot whole.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Canvas Binding — l_bind_item","text":"","code":"l_bind_item(widget, tags, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Canvas Binding — l_bind_item","text":"widget widget path string object handle tags item tags explained l_help(\"learn_R_bind.html#item-bindings\") event event patterns defined Tk canvas widget https://www.tcl-lang.org/man/tcl8.6/TkCmd/bind.htm#M5. callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Canvas Binding — l_bind_item","text":"item binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Canvas Binding — l_bind_item","text":"Item bindings used evaluating callbacks certain mouse /keyboard gestures events (.e. X events) visual items canvas. Items canvas can tags item bindings specified evaluated certain X events items specific tags. Note item bindings get currently evaluated order added. Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a item binding — l_bind_item_delete","title":"Delete a item binding — l_bind_item_delete","text":"Remove item binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a item binding — l_bind_item_delete","text":"","code":"l_bind_item_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a item binding — l_bind_item_delete","text":"widget widget path string object handle id item binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a item binding — l_bind_item_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","title":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","text":"","code":"l_bind_item_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","text":"widget widget path string object handle id item binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a item binding — l_bind_item_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List item binding ids — l_bind_item_ids","title":"List item binding ids — l_bind_item_ids","text":"List user added item binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List item binding ids — l_bind_item_ids","text":"","code":"l_bind_item_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List item binding ids — l_bind_item_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List item binding ids — l_bind_item_ids","text":"vector item binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List item binding ids — l_bind_item_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the item binding evaluation sequence — l_bind_item_reorder","title":"Reorder the item binding evaluation sequence — l_bind_item_reorder","text":"order item bindings defines get evaluated   event matches event patterns multiple item bindings. Reordering item bindings currently effect. Item bindings   evaluated order added.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the item binding evaluation sequence — l_bind_item_reorder","text":"","code":"l_bind_item_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the item binding evaluation sequence — l_bind_item_reorder","text":"widget widget path string object handle ids new item binding id evaluation order, must rearrangement elements returned l_bind_item_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the item binding evaluation sequence — l_bind_item_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_item_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the item binding evaluation sequence — l_bind_item_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a layer binding — l_bind_layer","title":"Add a layer binding — l_bind_layer","text":"Creates binding evaluates callback particular changes collection layers display.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a layer binding — l_bind_layer","text":"","code":"l_bind_layer(widget, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a layer binding — l_bind_layer","text":"widget widget path string object handle event vector one following events: 'add', 'delete', 'move', 'hide', 'show', 'relabel' callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a layer binding — l_bind_layer","text":"layer binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a layer binding — l_bind_layer","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a layer binding — l_bind_layer_delete","title":"Delete a layer binding — l_bind_layer_delete","text":"Remove layer binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a layer binding — l_bind_layer_delete","text":"","code":"l_bind_layer_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a layer binding — l_bind_layer_delete","text":"widget widget path string object handle id layer binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a layer binding — l_bind_layer_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","title":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","text":"","code":"l_bind_layer_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","text":"widget widget path string object handle id layer binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a layer binding — l_bind_layer_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List layer binding ids — l_bind_layer_ids","title":"List layer binding ids — l_bind_layer_ids","text":"List user added layer binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List layer binding ids — l_bind_layer_ids","text":"","code":"l_bind_layer_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List layer binding ids — l_bind_layer_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List layer binding ids — l_bind_layer_ids","text":"vector layer binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List layer binding ids — l_bind_layer_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","title":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","text":"order layer bindings defines get evaluated   event matches event patterns multiple layer bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","text":"","code":"l_bind_layer_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","text":"widget widget path string object handle ids new layer binding id evaluation order, must rearrangement elements returned l_bind_layer_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_layer_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the layer binding evaluation sequence — l_bind_layer_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a navigator binding — l_bind_navigator","title":"Add a navigator binding — l_bind_navigator","text":"Creates binding evaluates callback particular changes collection navigators display.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a navigator binding — l_bind_navigator","text":"","code":"l_bind_navigator(widget, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a navigator binding — l_bind_navigator","text":"widget widget path string object handle event vector one following events: 'add', 'delete', 'relabel' callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a navigator binding — l_bind_navigator","text":"navigator binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a navigator binding — l_bind_navigator","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a navigator binding — l_bind_navigator_delete","title":"Delete a navigator binding — l_bind_navigator_delete","text":"Remove navigator binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a navigator binding — l_bind_navigator_delete","text":"","code":"l_bind_navigator_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a navigator binding — l_bind_navigator_delete","text":"widget widget path string object handle id navigator binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a navigator binding — l_bind_navigator_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","title":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","text":"","code":"l_bind_navigator_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","text":"widget widget path string object handle id navigator binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a navigator binding — l_bind_navigator_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List navigator binding ids — l_bind_navigator_ids","title":"List navigator binding ids — l_bind_navigator_ids","text":"List user added navigator binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List navigator binding ids — l_bind_navigator_ids","text":"","code":"l_bind_navigator_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List navigator binding ids — l_bind_navigator_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List navigator binding ids — l_bind_navigator_ids","text":"vector navigator binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List navigator binding ids — l_bind_navigator_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","title":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","text":"order navigator bindings defines get evaluated   event matches event patterns multiple navigator bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","text":"","code":"l_bind_navigator_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","text":"widget widget path string object handle ids new navigator binding id evaluation order, must rearrangement elements returned l_bind_navigator_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_navigator_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the navigator binding evaluation sequence — l_bind_navigator_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a state change binding — l_bind_state","title":"Add a state change binding — l_bind_state","text":"callback state change binding evaluated certain   states change, specified binding creation.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a state change binding — l_bind_state","text":"","code":"l_bind_state(target, event, callback)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a state change binding — l_bind_state","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. event vector state names callback callback function R function called Tcl interpreter event interest happens. Note loon callback functions support different optional arguments depending binding type, read details information","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a state change binding — l_bind_state","text":"state change binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a state change binding — l_bind_state","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a state binding — l_bind_state_delete","title":"Delete a state binding — l_bind_state_delete","text":"Remove state binding","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a state binding — l_bind_state_delete","text":"","code":"l_bind_state_delete(target, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a state binding — l_bind_state_delete","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. id state binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a state binding — l_bind_state_delete","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","title":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","text":"function returns registered event pattern Tcl   callback code Tcl interpreter evaluates event occurs   matches event pattern.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","text":"","code":"l_bind_state_get(target, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. id state binding id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","text":"Character vector length two. First element event pattern,   second element Tcl callback code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the event pattern and callback Tcl code of a state binding — l_bind_state_get","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List state binding ids — l_bind_state_ids","title":"List state binding ids — l_bind_state_ids","text":"List user added state binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List state binding ids — l_bind_state_ids","text":"","code":"l_bind_state_ids(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List state binding ids — l_bind_state_ids","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List state binding ids — l_bind_state_ids","text":"vector state binding ids","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List state binding ids — l_bind_state_ids","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the state binding evaluation sequence — l_bind_state_reorder","title":"Reorder the state binding evaluation sequence — l_bind_state_reorder","text":"order state bindings defines get evaluated   event matches event patterns multiple state bindings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the state binding evaluation sequence — l_bind_state_reorder","text":"","code":"l_bind_state_reorder(target, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the state binding evaluation sequence — l_bind_state_reorder","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. ids new state binding id evaluation order, must rearrangement elements returned l_bind_state_ids function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the state binding evaluation sequence — l_bind_state_reorder","text":"vector binding id evaluation order (id argument)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_bind_state_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder the state binding evaluation sequence — l_bind_state_reorder","text":"Bindings, callbacks, binding substitutions described detail loon's documentation webpage, .e. run l_help(\"learn_R_bind\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the boundaries of the histogram bins containing active points. — l_breaks","title":"Gets the boundaries of the histogram bins containing active points. — l_breaks","text":"Queries histogram returns ids active points bin contains active points.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the boundaries of the histogram bins containing active points. — l_breaks","text":"","code":"l_breaks(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the boundaries of the histogram bins containing active points. — l_breaks","text":"widget loon histogram widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the boundaries of the histogram bins containing active points. — l_breaks","text":"named list minimum maximum values boundaries active bins histogram.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_cget.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a Plot State — l_cget","title":"Query a Plot State — l_cget","text":"loon's displays plot states. Plot states specify   displayed, displayed plot linked   loon plots. Layers, glyphs, navigators contexts states   (also refered plot states). function queries single plot   state.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_cget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a Plot State — l_cget","text":"","code":"l_cget(target, state)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_cget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a Plot State — l_cget","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. state state name","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_cget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a Plot State — l_cget","text":"","code":"if(interactive()){  p <- l_plot(iris, color = iris$Species) l_cget(p, \"color\") p['selected'] }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_colRemoveAlpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert color representations having an alpha transparency level to 6 digit color representations — l_colRemoveAlpha","title":"Convert color representations having an alpha transparency level to 6 digit color representations — l_colRemoveAlpha","text":"Colors standard tk used loon allow alpha transparency. function allows loon use color palettes (e.g. l_setColorList) produce colors alpha transparency simply using rgb.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colRemoveAlpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert color representations having an alpha transparency level to 6 digit color representations — l_colRemoveAlpha","text":"","code":"l_colRemoveAlpha(col)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_colRemoveAlpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert color representations having an alpha transparency level to 6 digit color representations — l_colRemoveAlpha","text":"col vector colors (potentially) containing alpha level","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colRemoveAlpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert color representations having an alpha transparency level to 6 digit color representations — l_colRemoveAlpha","text":"","code":"x <- l_colRemoveAlpha(rainbow(6)) # Also works with ordinary color string representations # since it just extracts the rgb values from the colors. x <- l_colRemoveAlpha(c(\"red\", \"blue\", \"green\", \"orange\")) x #> [1] \"#FF0000\" \"#0000FF\" \"#00FF00\" \"#FFA500\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Color Names from the Hex Code — l_colorName","title":"Get Color Names from the Hex Code — l_colorName","text":"Return built-color names given hex code.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Color Names from the Hex Code — l_colorName","text":"","code":"l_colorName(color, error = TRUE, precise = FALSE)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Color Names from the Hex Code — l_colorName","text":"color vector 12 digit (tcl) 6 (8 transparency) digit color hex code, e.g. \"#FFFF00000000\", \"#FF0000\" error Suppose input valid color, TRUE, error returned; else input vector returned. precise Logical; precise = FALSE, name nearest built-colour returned. precise = TRUE, name returned minimum Euclidean distance zero; otherwise hex code colour returned. See details.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Color Names from the Hex Code — l_colorName","text":"vector built-color names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Color Names from the Hex Code — l_colorName","text":"Function colors returns built-color names R knows . convert hex code real color name, first convert built-colours hex code RGB (red/green/blue) values (e.g., \"black\" –> [0, 0, 0]). , using RGB vector value, closest (Euclidean distance) built-colour determined. Matching \"precise\" whenever minimum distance zero; otherwise \"approximate\", locating nearest R colour.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_colorName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Color Names from the Hex Code — l_colorName","text":"","code":"l_colorName(c(\"#FFFF00000000\", \"#FF00FF\", \"blue\")) #> [1] \"red\"     \"magenta\" \"blue\"     if(require(grid)) { # redGradient is a matrix of 20 different colors redGradient <- matrix(hcl(0, 80, seq(49, 68, 1)),                       nrow=4, ncol=5, byrow = TRUE) # a color plate grid::grid.newpage() grid::grid.raster(redGradient,                   interpolate = FALSE)  # a \"rough matching\"; r <- l_colorName(redGradient) # the color name of each row is identical... r grid::grid.newpage() # very different from the first plate grid::grid.raster(r, interpolate = FALSE)  # a \"precise matching\"; p <- l_colorName(redGradient, precise = TRUE) # no built-in color names can be precisely matched... p } #> Loading required package: grid   #>      [,1]      [,2]      [,3]      [,4]      [,5]      #> [1,] \"#C24C6A\" \"#C54E6D\" \"#C7516F\" \"#CA5472\" \"#CD5774\" #> [2,] \"#D05A77\" \"#D35C79\" \"#D65F7C\" \"#D8627F\" \"#DB6581\" #> [3,] \"#DE6884\" \"#E16A86\" \"#E46D89\" \"#E7708C\" \"#EA738E\" #> [4,] \"#ED7591\" \"#F07894\" \"#F37B96\" \"#F57E99\" \"#F8809C\" if (FALSE) { # \\dontrun{ # an error will be returned l_colorName(c(\"foo\", \"bar\", \"red\"))  # c(\"foo\", \"bar\", \"red\") will be returned l_colorName(c(\"foo\", \"bar\", \"#FFFF00000000\"), error = FALSE) } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_compoundPaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the set of basic path types for loon plots. — l_compoundPaths","title":"Get the set of basic path types for loon plots. — l_compoundPaths","text":"Loon's plots constructed TCL identified path string appearing window containing plot. path string begins unique identifier plot ends suffix describing type loon plot displayed. path identifying plot string concatenation identifier type. function returns set loon path types compound loon plots.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_compoundPaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the set of basic path types for loon plots. — l_compoundPaths","text":"","code":"l_compoundPaths()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_compoundPaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the set of basic path types for loon plots. — l_compoundPaths","text":"character vector compound path types.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify one or multiple plot states — l_configure","title":"Modify one or multiple plot states — l_configure","text":"loon's displays plot states. Plot states specify   displayed, displayed plot linked   loon plots. Layers, glyphs, navigators contexts states   (also refered plot states). function modifies one   multiple plot states.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify one or multiple plot states — l_configure","text":"","code":"l_configure(target, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify one or multiple plot states — l_configure","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. ... state=value pairs","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify one or multiple plot states — l_configure","text":"","code":"if(interactive()){  p <- l_plot(iris, color = iris$Species) l_configure(p, color='red') p['size'] <- ifelse(iris$Species == \"versicolor\", 2, 8) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_context2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a context2d navigator context — l_context_add_context2d","title":"Create a context2d navigator context — l_context_add_context2d","text":"context2d maps every location 2d space graph list   xvars list yvars , moving navigator along   graph, changes possible take place xvars yvars. Contexts detail explained webmanual accessible l_help. Please read section context running l_help(\"learn_R_display_graph.html#contexts\").","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_context2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a context2d navigator context — l_context_add_context2d","text":"","code":"l_context_add_context2d(navigator, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_context2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a context2d navigator context — l_context_add_context2d","text":"navigator navigator handle object ... arguments passed modify context states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_context2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a context2d navigator context — l_context_add_context2d","text":"context handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_geodesic2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a geodesic2d navigator context — l_context_add_geodesic2d","title":"Create a geodesic2d navigator context — l_context_add_geodesic2d","text":"Geodesic2d maps every location graph orthogonal   projection data onto two-dimensional subspace. nodes   represent sub-space spanned pair variates edges either   3d- 4d-transition one scatterplot another, depending   many variates two nodes connected edge share (see Hurley   Oldford 2011). geodesic2d context inherits context2d context. Contexts detail explained webmanual accessible l_help. Please read section context running l_help(\"learn_R_display_graph.html#contexts\").","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_geodesic2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a geodesic2d navigator context — l_context_add_geodesic2d","text":"","code":"l_context_add_geodesic2d(navigator, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_geodesic2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a geodesic2d navigator context — l_context_add_geodesic2d","text":"navigator navigator handle object ... arguments passed modify context states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_geodesic2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a geodesic2d navigator context — l_context_add_geodesic2d","text":"context handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_slicing2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a slicind2d navigator context — l_context_add_slicing2d","title":"Create a slicind2d navigator context — l_context_add_slicing2d","text":"slicing2d context implements slicing using navigation graphs   scatterplot condition one two variables. Contexts detail explained webmanual accessible l_help. Please read section context running l_help(\"learn_R_display_graph.html#contexts\").","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_slicing2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a slicind2d navigator context — l_context_add_slicing2d","text":"","code":"l_context_add_slicing2d(navigator, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_slicing2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a slicind2d navigator context — l_context_add_slicing2d","text":"navigator navigator handle object ... arguments passed modify context states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_slicing2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a slicind2d navigator context — l_context_add_slicing2d","text":"context handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_add_slicing2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a slicind2d navigator context — l_context_add_slicing2d","text":"","code":"if(interactive()){  names(oliveAcids) <- c('p','p1','s','o','l','l1','a','e') nodes <- apply(combn(names(oliveAcids),2),2,               function(x)paste(x, collapse=':')) G <- completegraph(nodes) g <- l_graph(G) nav <- l_navigator_add(g) con <- l_context_add_slicing2d(nav, data=oliveAcids)  # symmetric range proportion around nav['proportion'] con['proportion'] <- 0.2  con['conditioning4d'] <- \"union\" con['conditioning4d'] <- \"intersection\" }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a context from a navigator — l_context_delete","title":"Delete a context from a navigator — l_context_delete","text":"Navigators can multiple contexts. function removes   context navigator.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a context from a navigator — l_context_delete","text":"","code":"l_context_delete(navigator, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a context from a navigator — l_context_delete","text":"navigator navigator hanlde id context id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a context from a navigator — l_context_delete","text":"information run: l_help(\"learn_R_display_graph.html#contexts\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_getLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the label of a context — l_context_getLabel","title":"Query the label of a context — l_context_getLabel","text":"Context labels eventually used context inspector.   function queries label context.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_getLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the label of a context — l_context_getLabel","text":"","code":"l_context_getLabel(navigator, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_getLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the label of a context — l_context_getLabel","text":"navigator navigator hanlde id context id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_getLabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the label of a context — l_context_getLabel","text":"information run: l_help(\"learn_R_display_graph.html#contexts\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List context ids of a navigator — l_context_ids","title":"List context ids of a navigator — l_context_ids","text":"Navigators can multiple contexts. function list   context ids navigator.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List context ids of a navigator — l_context_ids","text":"","code":"l_context_ids(navigator)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List context ids of a navigator — l_context_ids","text":"navigator navigator hanlde","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List context ids of a navigator — l_context_ids","text":"information run: l_help(\"learn_R_display_graph.html#contexts\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the label of a context — l_context_relabel","title":"Change the label of a context — l_context_relabel","text":"Context labels eventually used context inspector.   function relabels context.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the label of a context — l_context_relabel","text":"","code":"l_context_relabel(navigator, id, label)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the label of a context — l_context_relabel","text":"navigator navigator hanlde id context id label context label shown","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_context_relabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the label of a context — l_context_relabel","text":"information run: l_help(\"learn_R_display_graph.html#contexts\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_copyStates.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","title":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","text":"l_copyStates reads values states `source` assigns states name `target`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_copyStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","text":"","code":"l_copyStates(   source,   target,   states = NULL,   exclude = NULL,   excludeBasicStates = TRUE,   returnNames = FALSE )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_copyStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","text":"source `loon` object providing values states. target `loon` object whose states assigned values `sources` states name. states character vector states copied. `NULL` (default), states common (excluding identified exclusion parameters) copied `source` `target`. exclude character vector naming common states excluded copying.  Default NULL. excludeBasicStates logical indicating whether certain basic states excluded copy (`TRUE`, default). states include derived data variables (like \"x\", \"xTemp\", \"zoomX\", \"panX\", \"deltaX\", \"xlabel\", \"y\" counterparts) since values determine coordinates plot typically copied. Similarly \"swapAxes\" one basic states l_compound plots l_pairs() swapping axes can wreak havoc unintended. Finally, important pair basic states exclude \"linkingKey\" \"linkingGroup\" since changes  require proper synchronization. Setting `excludeBasicStates = TRUE` simple way avoid copying values basic states. Setting `excludeBasicStates = FALSE` allow copied well. returnNames logical indicate whether return names states successfully copied plots.  Default `FALSE`","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_copyStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","text":"character vector names states successfully copied (plot whose states affected), NULL none copied `returnNames == FALSE`.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_copyStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A generic function to transfer the values of the states of one `loon` structure to another. — l_copyStates","text":"","code":"if(interactive()){ # Source and target are `l_plots`    p <- with(iris,          l_plot(x = Sepal.Width, y = Petal.Width,                 color = Species, glyph = \"ccircle\",                 size = 10, showGuides = TRUE,                 title = \"Edgar Anderson's Iris data\"                )            )     p2 <- with(iris,           l_plot(x = Sepal.Length, y = Petal.Length,                  title = \"Fisher's Iris data\"                  )               ) # Copy the states of p to p2 # First just the size and title    l_copyStates(source = p, target = p2,                 states = c(\"size\", \"title\")                 ) # Copy all but those associated with the variables    l_copyStates(source = p, target = p2)  # Suppose p had a linkingGroup, say \"Edgar\"    l_configure(p, linkingGroup = \"Edgar\", sync = \"push\")  # To force this linkingGroup to be copied to a new plot    p3 <- with(iris,           l_plot(x = Sepal.Length, y = Petal.Length,                  title = \"Fisher's Iris data\"                  )               )    l_copyStates(source = p, target = p3,                 states = c(\"linkingGroup\"),                 # To allow this to happen:                 excludeBasicStates = FALSE                 )     h <- with(iris,              l_hist((Petal.Width * Petal.Length),                     showStackedColors = TRUE,                     yshows = \"density\")                     )    l_copyStates(source = p, target = h)     sa <- l_serialaxes(iris, axes = \"parallel\")    l_copyStates(p, sa)     pp <- l_pairs(iris, showHistograms = TRUE)    suppressWarnings(l_copyStates(p, pp))     pp2 <- l_pairs(iris,                   color = iris$Species,                   showGuides = TRUE,                   title =\"Iris data\",                   glyph = \"ctriangle\")    l_copyStates(pp2, pp)    l_copyStates(pp2, p) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_createCompoundGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"For the target compound loon plot, creates the final grob from the class of the `target` and the `arrangeGrob.args` — l_createCompoundGrob","title":"For the target compound loon plot, creates the final grob from the class of the `target` and the `arrangeGrob.args` — l_createCompoundGrob","text":"target compound loon plot, creates final grob class `target` `arrangeGrob.args`","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_createCompoundGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For the target compound loon plot, creates the final grob from the class of the `target` and the `arrangeGrob.args` — l_createCompoundGrob","text":"","code":"l_createCompoundGrob(target, arrangeGrob.args)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_createCompoundGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For the target compound loon plot, creates the final grob from the class of the `target` and the `arrangeGrob.args` — l_createCompoundGrob","text":"target (compound) loon  plot arrangeGrob.args arguments described `gridExtra::arrangeGrob()`","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_createCompoundGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For the target compound loon plot, creates the final grob from the class of the `target` and the `arrangeGrob.args` — l_createCompoundGrob","text":"grob (list grobs) can handed `gTree()` `children = gList(returnedValue)` final grob constructed compound loon plot.  Default `l_compound` simply execute `gridExtra::arrangeGrob(arrangeGrob.args)`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_create_handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a loon object handle — l_create_handle","title":"Create a loon object handle — l_create_handle","text":"function can used create loon object handles   vector widget path name object ids (order   parent-child relationships).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_create_handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a loon object handle — l_create_handle","text":"","code":"l_create_handle(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_create_handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a loon object handle — l_create_handle","text":"target loon object specification (e.g. \".l0.plot\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_create_handle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a loon object handle — l_create_handle","text":"loon's plot handles useful query modify plot states   via command line. information run: l_help(\"learn_R_intro.html#re-creating-object-handles\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_create_handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a loon object handle — l_create_handle","text":"","code":"if(interactive()){   # plot handle p <- l_plot(x=1:3, y=1:3) p_new <- l_create_handle(unclass(p)) p_new['showScales']  # glyph handle gl <- l_glyph_add_text(p, text=LETTERS[1:3]) gl_new <- l_create_handle(c(as.vector(p), as.vector(gl))) gl_new['text']  # layer handle l <- l_layer_rectangle(p, x=c(1,3), y=c(1,3), color='yellow', index='end') l_new <- l_create_handle(c(as.vector(p), as.vector(l))) l_new['color']  # navigator handle g <- l_graph(linegraph(completegraph(LETTERS[1:3]))) nav <- l_navigator_add(g) nav_new <- l_create_handle(c(as.vector(g), as.vector(nav))) nav_new['from']  # context handle con <- l_context_add_context2d(nav) con_new <- l_create_handle(c(as.vector(g), as.vector(nav), as.vector(con))) con_new['separator']  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Get layer-relative index of the item below the mouse cursor — l_currentindex","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"Checks visual item mouse cursor   , returns index visual item's position   corresponding variable dimension layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"","code":"l_currentindex(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"index visual item's position corresponding variable   dimension layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"details see l_help(\"learn_R_bind.html#item-bindings\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_currentindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get layer-relative index of the item below the mouse cursor — l_currentindex","text":"","code":"if(interactive()){  p <- l_plot(iris[,1:2], color=iris$Species)  printEntered <- function(W) {     cat(paste('Entered point ', l_currentindex(W), '\\n')) }  printLeave <- function(W) {     cat(paste('Left point ', l_currentindex(W), '\\n')) }  l_bind_item(p, tags='model&&point', event='<Enter>',             callback=function(W) {printEntered(W)})  l_bind_item(p, tags='model&&point', event='<Leave>',             callback=function(W) {printLeave(W)})  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tags of the item below the mouse cursor — l_currenttags","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"Retrieves tags visual item time   function evaluation mouse cursor.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"","code":"l_currenttags(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"vector item tags visual","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"details see l_help(\"learn_R_bind.html#item-bindings\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_currenttags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tags of the item below the mouse cursor — l_currenttags","text":"","code":"if(interactive()){  printTags <- function(W) {     print(l_currenttags(W)) }  p <- l_plot(x=1:3, y=1:3, title='Query Visual Item Tags')  l_bind_item(p, 'all', '<ButtonPress>', function(W)printTags(W)) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an R data.frame to a Tcl dictionary — l_data","title":"Convert an R data.frame to a Tcl dictionary — l_data","text":"helper function convert R data.frame object   Tcl data frame object. function useful changing data state   l_configure.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an R data.frame to a Tcl dictionary — l_data","text":"","code":"l_data(data)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an R data.frame to a Tcl dictionary — l_data","text":"data data.frame object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an R data.frame to a Tcl dictionary — l_data","text":"string represents data.frame Tcl dictionary data   structure.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a loon plot as an image — l_export","title":"Export a loon plot as an image — l_export","text":"supported image formats dependent system   environment. Plots can always exported PostScript format.   Exporting displays .pdfs possible command line tool   epstopdf installed. Finally, exporting either png, jpg,   bmp, tiff gif requires Img Tcl extension.   choosing one formats   depend Img extension, possible export Tk widget   image including inspectors.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a loon plot as an image — l_export","text":"","code":"l_export(widget, filename, width, height)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a loon plot as an image — l_export","text":"widget widget path string object handle filename path output file width image width pixels height image height pixels","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a loon plot as an image — l_export","text":"path exported file","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_export.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a loon plot as an image — l_export","text":"Note CTRL-P key combination opens dialog export   graphic. native export format ps Tk canvas   offers. l_export fails formats please   resort screen capture method moment.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_export_valid_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list of the available image formats when exporting a loon plot — l_export_valid_formats","title":"Return a list of the available image formats when exporting a loon plot — l_export_valid_formats","text":"supported image formats dependent system   environment. Plots can always exported Postscript format.   Exporting displays .pdfs possible command line tool   epstopdf installed. Finally, exporting either png, jpg, bmp, tiff   gif requires Img Tcl extension. choosing one formats   depend Img extension, possible export Tk widget   image including inspectors.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_export_valid_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list of the available image formats when exporting a loon plot — l_export_valid_formats","text":"","code":"l_export_valid_formats()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_export_valid_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list of the available image formats when exporting a loon plot — l_export_valid_formats","text":"vector image formats available exporting loon plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_facet.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout Facets across multiple panels — l_facet","title":"Layout Facets across multiple panels — l_facet","text":"takes loon widget forms matrix loon widget facets.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_facet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout Facets across multiple panels — l_facet","text":"","code":"l_facet(widget, by, on, layout = c(\"grid\", \"wrap\", \"separate\"), ...)  # S3 method for class 'loon' l_facet(   widget,   by,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   connectedScales = c(\"cross\", \"row\", \"column\", \"both\", \"x\", \"y\", \"none\"),   linkingGroup,   nrow = NULL,   ncol = NULL,   inheritLayers = TRUE,   labelLocation = c(\"top\", \"right\"),   labelBackground = \"gray80\",   labelForeground = \"black\",   labelBorderwidth = 2,   labelRelief = c(\"groove\", \"flat\", \"raised\", \"sunken\", \"ridge\", \"solid\"),   plotWidth = 200,   plotHeight = 200,   parent = NULL,   ... )  # S3 method for class 'l_serialaxes' l_facet(   widget,   by,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   linkingGroup,   nrow = NULL,   ncol = NULL,   labelLocation = c(\"top\", \"right\"),   labelBackground = \"gray80\",   labelForeground = \"black\",   labelBorderwidth = 2,   labelRelief = c(\"groove\", \"flat\", \"raised\", \"sunken\", \"ridge\", \"solid\"),   plotWidth = 200,   plotHeight = 200,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_facet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout Facets across multiple panels — l_facet","text":"widget loon widget loon plot can separated variables mutiple panels. argument can take vector, list lengths data.frame input. formula, optional data frame containing variables . variables found data, variables taken environment(formula), typically environment function called. layout layout facets 'grid', 'wrap' 'separate' ... named arguments modify `loon` widget states connectedScales Determines scales facets connected depending layout used.  value layout, scales connected follows: layout = \"wrap\":  Across facets, connectedScales \"x\",  \"x\"  scales connected \"y\", \"y\" scales connected \"\",  \"x\" \"y\" scales connected \"none\",  neither \"x\" \"y\" scales connected.    value, \"y\" scale connected. layout = \"grid\":  Across facets, connectedScales \"cross\", scales row column connected \"row\", \"x\" \"y\" scales facets row connected \"column\", \"x\" \"y\" scales facets column connected \"x\", \"x\"  scales connected (regardless column) \"y\", \"y\" scales connected (regardless row) \"\",  \"x\" \"y\" scales connected facets \"none\",  neither \"x\" \"y\" scales connected facets. linkingGroup linkingGroup widgets. missing, default paste \"layout\" current tk path number. nrow number layout rows ncol number layout columns inheritLayers Logical value. widget layers inherited layout panels? labelLocation Labels location. Length two vector layout grid. first one used determine position column labels ('top' 'bottom'). second one used determine position row labels ('right' 'left'). Length one vector layout wrap, 'top' 'bottom'. labelBackground Label background colour labelForeground Label foreground colour labelBorderwidth Label border width labelRelief Label relief plotWidth default plot width (pixels) plotHeight default plot height (pixels) parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_facet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout Facets across multiple panels — l_facet","text":"`l_facet` object (`l_compound` object), list named elements, representing separate interactive plot. names plots self explanatory list plots can accessed `l_facet` object via `l_getPlots()`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_facet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout Facets across multiple panels — l_facet","text":"","code":"if(interactive()) {   library(maps)   p <- with(quakes, l_plot(long, lat, linkingGroup = \"quakes\"))   p[\"color\"][quakes$mag < 5 & quakes$mag >= 4] <- \"lightgreen\"   p[\"color\"][quakes$mag < 6 & quakes$mag >= 5] <- \"lightblue\"   p[\"color\"][quakes$mag >= 6] <- \"firebrick\"   # A Fiji map   NZFijiMap <- map(\"world2\", regions = c(\"New Zealand\", \"Fiji\"), plot = FALSE)   l_layer(p, NZFijiMap,           label = \"New Zealand and Fiji\",           color = \"forestgreen\",           index = \"end\")   fp <- l_facet(p, by = \"color\", layout = \"grid\",                 linkingGroup = \"quakes\")    size <- c(rep(50, 2), rep(25, 2), rep(50, 2))   color <- c(rep(\"red\", 3), rep(\"green\", 3))   p <- l_plot(x = 1:6, y = 1:6,               size = size,               color = color)   g <- l_glyph_add_text(p, text = 1:6)   p['glyph'] <- g   on <- data.frame(Factor1 = c(rep(\"A\", 3), rep(\"B\", 3)),                    Factor2 = rep(c(\"C\", \"D\"), 3))   cbind(on, size = size, color = color)   fp <- l_facet(p, by = Factor1 ~ Factor2, on = on) }  if(interactive()) {  # serialaxes facets s <- l_serialaxes(iris[, -5], color = iris$Species) fs <- l_facet(s, layout = \"wrap\", by = iris$Species) # The linkingGroup can be printed or accessed by l_configure(s, linkingGroup = fs[[1]]['linkingGroup'], sync = \"pull\") }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information on current bins from a histogram — l_getBinData","title":"Get information on current bins from a histogram — l_getBinData","text":"Queries histogram returns information active cases contained histogram's bins.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information on current bins from a histogram — l_getBinData","text":"","code":"l_getBinData(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information on current bins from a histogram — l_getBinData","text":"widget loon histogram widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information on current bins from a histogram — l_getBinData","text":"nested list bins histogram contain active points. bin list counts, point indices, minimum (x0) maximum (x1) bin.  Loon histogram bins open  left closed right default, namely \"(x0, x1]\". counts points identify number ids points, selected, colour bin (identified hex12 colour tcl).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the ids of the active points in each bin of a histogram — l_getBinIds","title":"Gets the ids of the active points in each bin of a histogram — l_getBinIds","text":"Queries histogram returns ids active points bin contains active points.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the ids of the active points in each bin of a histogram — l_getBinIds","text":"","code":"l_getBinIds(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the ids of the active points in each bin of a histogram — l_getBinIds","text":"widget loon histogram widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getBinIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the ids of the active points in each bin of a histogram — l_getBinIds","text":"named list bins histogram ids active points.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getColorList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get loon's color mapping list — l_getColorList","title":"Get loon's color mapping list — l_getColorList","text":"color mapping list used loon convert nominal values   color values, see documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getColorList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get loon's color mapping list — l_getColorList","text":"","code":"l_getColorList()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getColorList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get loon's color mapping list — l_getColorList","text":"vector hex-encoded colors","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getDeprecatedLinkedVar.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to determine which, if any, linked variables in a plot are now deprecated. — l_getDeprecatedLinkedVar","title":"A helper function to determine which, if any, linked variables in a plot are now deprecated. — l_getDeprecatedLinkedVar","text":"Checks linkable states linked, whether input state default one, valid, equal plot current states.  intended general user.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getDeprecatedLinkedVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to determine which, if any, linked variables in a plot are now deprecated. — l_getDeprecatedLinkedVar","text":"","code":"l_getDeprecatedLinkedVar(   widget,   args,   modifiedLinkedStates = character(0L),   l_className = NULL )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getDeprecatedLinkedVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to determine which, if any, linked variables in a plot are now deprecated. — l_getDeprecatedLinkedVar","text":"widget loon widget list loon widgets args named list state values linkable state variables named list. modifiedLinkedStates vector variable names modified link states/ l_className class loon widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getDeprecatedLinkedVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to determine which, if any, linked variables in a plot are now deprecated. — l_getDeprecatedLinkedVar","text":"named vector, list vectors, logicals indicating whether linkable states need deprecated .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getFromPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Create loon objects from path name — l_getFromPath","title":"Create loon objects from path name — l_getFromPath","text":"function can used create loon objects   valid widget path name. main difference l_create_handle   l_getFromPath can take loon compound widget path   l_create_handle .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getFromPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create loon objects from path name — l_getFromPath","text":"","code":"l_getFromPath(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getFromPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create loon objects from path name — l_getFromPath","text":"target loon object specification (e.g. \".l0.plot\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getFromPath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create loon objects from path name — l_getFromPath","text":"information run: l_help(\"learn_R_intro.html#re-creating-object-handles\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getFromPath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create loon objects from path name — l_getFromPath","text":"","code":"if (FALSE) { # \\dontrun{  l_pairs(iris, showHistogram = TRUE)  # The path can be found at the top of tk title  # Suppose it is the first loon widget, this path should be \".l0.pairs\"  p <- l_create_handle(\".l0.pairs\") # error  p <- l_getFromPath(\".l0.pairs\") } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a loongraph or graph object from loon's graph display — l_getGraph","title":"Extract a loongraph or graph object from loon's graph display — l_getGraph","text":"graph display represents graph nodes,   , , isDirected plot states. function   creates loongraph graph object using states.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a loongraph or graph object from loon's graph display — l_getGraph","text":"","code":"l_getGraph(widget, asloongraph = TRUE)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a loongraph or graph object from loon's graph display — l_getGraph","text":"widget graph widget handle asloongraph boolean, TRUE function returns loongraph object, otherwise function returns graph object defined graph R package.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a loongraph or graph object from loon's graph display — l_getGraph","text":"loongraph graph object","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLinkedStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the States that are Linked with Loon's Standard Linking Model — l_getLinkedStates","title":"Query the States that are Linked with Loon's Standard Linking Model — l_getLinkedStates","text":"Loon's standard linking model based three levels,   linkingGroup linkingKey states used   linkable states. See details documentation   l_setLinkedStates.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLinkedStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the States that are Linked with Loon's Standard Linking Model — l_getLinkedStates","text":"","code":"l_getLinkedStates(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLinkedStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the States that are Linked with Loon's Standard Linking Model — l_getLinkedStates","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLinkedStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the States that are Linked with Loon's Standard Linking Model — l_getLinkedStates","text":"vector state names linked states","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLocations.html","id":null,"dir":"Reference","previous_headings":"","what":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","title":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","text":"target compound loon plot, determines location (excluding grobs) arguments pass `gridExtra::arrangeGrob()`","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","text":"","code":"l_getLocations(target)  # S3 method for class 'l_facet' l_getLocations(target)  # S3 method for class 'l_pairs' l_getLocations(target)  # S3 method for class 'l_ts' l_getLocations(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLocations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","text":"target (compound) loon  plot whose locations needed lay .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLocations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","text":"list appropriate subset named location arguments `c(\"ncol\", \"nrow\", \"layout_matrix\", \"heights\", \"widths\")`.  many heights  widths plots returned l_getPlots(); specify  relative height width plot display.  layout_matrix  nrow ncol matrix whose entries identify location  plot l_getPlots() index.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getLocations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For the target compound loon plot, determines location (only and excluding the grobs) arguments to pass to `gridExtra::arrangeGrob()` — l_getLocations","text":"","code":"if(interactive()) {  pp <- l_pairs(iris, showHistograms = TRUE) ll <- l_getLocations(pp) nplots <- length(l_getPlots(pp)) # the plots returned by l_getPlots(pp) are positioned # in order by the layout_matrix ll$layout_matrix }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOption.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of a loon display option — l_getOption","title":"Get the value of a loon display option — l_getOption","text":"loon's displays access set common options. function accesses returns current value named option.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of a loon display option — l_getOption","text":"","code":"l_getOption(option)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value of a loon display option — l_getOption","text":"option name option queried.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of a loon display option — l_getOption","text":"value named option.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of a loon display option — l_getOption","text":"","code":"l_getOption(\"background\") #> [1] \"white\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOptionNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of all loon display options — l_getOptionNames","title":"Get the names of all loon display options — l_getOptionNames","text":"loon's displays access set common options. function accesses returns names loon options.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOptionNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of all loon display options — l_getOptionNames","text":"","code":"l_getOptionNames()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOptionNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of all loon display options — l_getOptionNames","text":"vector loon display option names.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getOptionNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of all loon display options — l_getOptionNames","text":"","code":"l_getOptionNames() #>  [1] \"linewidth\"                      \"defaultMetaTempMove\"            #>  [3] \"metaMulSel\"                     \"default-font\"                   #>  [5] \"guidelines\"                     \"guidesBackground\"               #>  [7] \"colors-palette-hcl\"             \"brush_color\"                    #>  [9] \"export_ps_font\"                 \"facetLabelBackground\"           #> [11] \"size\"                           \"select-color\"                   #> [13] \"font-xlabel\"                    \"glyph\"                          #> [15] \"ticks_density\"                  \"defaultMetaMulSel\"              #> [17] \"font-title\"                     \"printConfigureDebug\"            #> [19] \"fixed_guide_distance\"           \"font\"                           #> [21] \"image_sizes\"                    \"background\"                     #> [23] \"printInConfigurationWarningMsg\" \"abbreviations\"                  #> [25] \"colors\"                         \"printInConfigurationWarning\"    #> [27] \"image_scale\"                    \"metaKeys\"                       #> [29] \"foreground\"                     \"noscrollInspector\"              #> [31] \"metaTempMove\"                   \"canvas_bg_guides\"               #> [33] \"tick_length\"                    \"font-text_glyph\"                #> [35] \"brush_color_handle\"             \"font-ylabel\"                    #> [37] \"colors-palette\"                 \"size_0_rect\"                    #> [39] \"font-scales\"                    \"color\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"For the target compound loon plot, determines all the loon plots in that compound plot. — l_getPlots","title":"For the target compound loon plot, determines all the loon plots in that compound plot. — l_getPlots","text":"target compound loon plot, determines loon plots compound plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For the target compound loon plot, determines all the loon plots in that compound plot. — l_getPlots","text":"","code":"l_getPlots(target)  # S3 method for class 'l_facet' l_getPlots(target)  # S3 method for class 'l_pairs' l_getPlots(target)  # S3 method for class 'l_ts' l_getPlots(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For the target compound loon plot, determines all the loon plots in that compound plot. — l_getPlots","text":"target (compound) loon  plot laid .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For the target compound loon plot, determines all the loon plots in that compound plot. — l_getPlots","text":"list named arguments values passed `gridExtra::arrangeGrob()`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getSavedStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve saved plot states from the named file. — l_getSavedStates","title":"Retrieve saved plot states from the named file. — l_getSavedStates","text":"l_getSavedStates reads file created l_saveStates() containing saved info states loon plot returning loon object class \"l_savedStates\". helpful, example, using RMarkdown notebooking facility recreate earlier saved loon plot present document. Note plot saved \"l_compound\" l_getSavedStates return list plots list item saved states corresponding plots.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getSavedStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve saved plot states from the named file. — l_getSavedStates","text":"","code":"l_getSavedStates(file = stop(\"missing name of file\"), ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getSavedStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve saved plot states from the named file. — l_getSavedStates","text":"file connection name file \"l_savedStates\" R object read (readRDS(). ... arguments passed readRDS().","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getSavedStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve saved plot states from the named file. — l_getSavedStates","text":"list class `l_savedStates` containing states values. Also attribute `l_plot_class` contains class vector plot `p`","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_getSavedStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve saved plot states from the named file. — l_getSavedStates","text":"","code":"if(interactive()){ # # Suppose you have some plot that you created like p <- l_plot(iris, showGuides = TRUE) # # and coloured groups by hand (using the mouse and inspector) # so that you ended up with these colours: p[\"color\"] <- rep(c( \"lightgreen\", \"firebrick\",\"skyblue\"),                   each = 50) # # Having determined the colours you could save them (and other states) # in a file of your choice, here some tempfile: myFileName <- tempfile(\"myPlot\", fileext = \".rds\") # # Save the named states of p l_saveStates(p,              states = c(\"color\", \"active\", \"selected\"),              file = myFileName) # # These can later be retrieved and used on a new plot # (say in RMarkdown) to set the new plot's values to those # previously determined interactively. p_new <- l_plot(iris, showGuides = TRUE) p_saved_info <- l_getSavedStates(myFileName) # # We can tell what kind of plot was saved attr(p_saved_info, \"l_plot_class\") # # The result is a list of class \"l_savedStates\" which # contains the names of the p_new[\"color\"] <- p_saved_info$color # # The result is that p_new looks like p did # (after your interactive exploration) # and can now be plotted as part of the document plot(p_new) # # For compound plots, the info_states are saved for each plot pp <- l_pairs(iris) myPairsFile <- tempfile(\"myPairsPlot\", fileext = \".rds\") # # Save the names states of pp l_saveStates(pp,              states = c(\"color\", \"active\", \"selected\"),              file = myPairsFile) pairs_info <-  l_getSavedStates(myPairsFile) # # For compound plots, the info states for all constitutent # plots are saved.  The result is a list of class \"l_savedStates\" # whose elements are the named plots as \"l_savedStates\" # themselves. # # The names of the plots which were saved names(pairs_info) # # And the names of the info states whose values were saved for # the first plot names(pairs_info$x2y1) # # While it is generally recommended to access (or assign) saved # state values using the $ sign accessor, paying attention to the # nested list structure of an \"l_savedStates\" object (especially for # l_compound plots), R's square bracket notation [] has also been # specialized to allow a syntactically simpler (but less precise) # access to the contents of an l_savedStates object. # # For example, p_saved_info[\"color\"] # # returns the saved \"color\" as a vector of colours. # # In contrast, pairs_info[\"x2y1\"] # returns the l_savedStates object of the states of the plot named \"x2y1\", # but pairs_info[\"color\"] # returns a LIST of colour vectors, by plot as they were named in pairs_info # # As a consequence, the following two are equivalent, pairs_info[\"x2y1\"][\"color\"] # finds the value of \"color\" from an \"l_savedStates\" object # whereas pairs_info[\"color\"][[\"x2y1\"]] # finds the value of \"x2y1\" from a \"list\" object # # Also, setting a state of an \"l_savedStates\" is possible # (though not generally recommended; better to save the states again) # p_saved_info[\"color\"] <- rep(\"red\", 150) # changes the saved state \"color\" on p_saved_info # whereas pairs_info[\"color\"] <- rep(\"red\", 150) # will set the red color for any plot within pairs_info having \"color\" saved. # In this way the assignment function via [] is trying to be clever # for l_savedStates for compound plots and so may have unintentional # consequences if the user is not careful.  # Generally, one does not want/need to change the value of saved states. # Instead, the states would be saved again from the interactive plot # if change is necessary. # Alternatively, more nuanced and careful control is maintained using # the $ selectors for lists. }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getScaledData.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Scaling — l_getScaledData","title":"Data Scaling — l_getScaledData","text":"Scaling data set","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getScaledData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Scaling — l_getScaledData","text":"","code":"l_getScaledData(   data,   sequence = NULL,   scaling = c(\"variable\", \"observation\", \"data\", \"none\"),   displayOrder = NULL,   reserve = FALSE,   as.data.frame = FALSE )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_getScaledData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Scaling — l_getScaledData","text":"data data frame sequence vector variable names scaled. NULL, set whole column names (data set scaled). scaling one 'variable', 'data', 'observation' 'none' specify data scaled. See details displayOrder order display reserve TRUE, return variables shown sequence well; else return variables defined sequence. .data.frame Return matrix data.frame","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_getScaledData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Scaling — l_getScaledData","text":"scaling state defines data scaled. axes display 0 one end 1 . following explanation assume data nxp dimensional matrix. scaling options ","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_get_arrangeGrobArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"For the target (compound) loon plot, determines all arguments (i.e. including the grobs) to be passed to `gridExtra::arrangeGrob()` so as to determine the layout in `grid` graphics. — l_get_arrangeGrobArgs","title":"For the target (compound) loon plot, determines all arguments (i.e. including the grobs) to be passed to `gridExtra::arrangeGrob()` so as to determine the layout in `grid` graphics. — l_get_arrangeGrobArgs","text":"target (compound) loon plot, determines arguments (.e. including grobs) passed `gridExtra::arrangeGrob()` determine layout `grid` graphics.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_get_arrangeGrobArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For the target (compound) loon plot, determines all arguments (i.e. including the grobs) to be passed to `gridExtra::arrangeGrob()` so as to determine the layout in `grid` graphics. — l_get_arrangeGrobArgs","text":"","code":"l_get_arrangeGrobArgs(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_get_arrangeGrobArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For the target (compound) loon plot, determines all arguments (i.e. including the grobs) to be passed to `gridExtra::arrangeGrob()` so as to determine the layout in `grid` graphics. — l_get_arrangeGrobArgs","text":"target (compound) loon  plot laid .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_get_arrangeGrobArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For the target (compound) loon plot, determines all arguments (i.e. including the grobs) to be passed to `gridExtra::arrangeGrob()` so as to determine the layout in `grid` graphics. — l_get_arrangeGrobArgs","text":"list named arguments values passed `gridExtra::arrangeGrob()`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for adding non-primitive glyphs — l_glyph_add.default","title":"Default method for adding non-primitive glyphs — l_glyph_add.default","text":"Generic function write new glyph types using loon's primitive   glyphs","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for adding non-primitive glyphs — l_glyph_add.default","text":"","code":"# Default S3 method l_glyph_add(widget, type, label = \"\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for adding non-primitive glyphs — l_glyph_add.default","text":"widget widget path string object handle type loon-native non-primitive glyph type, one 'text', 'serialaxes', 'image', '[polygon', 'pointrange' label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"Generic method adding user-defined glyphs. See details   information non-primitive primitive glyphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"","code":"l_glyph_add(widget, type, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"widget widget path string object handle type object used method dispatch ... arguments passed method","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"String glyph id. Every set non-primitive glyphs id   (character).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"scatterplot graph displays n-dimensional state   'glyph' assigns data point graph node glyph (.e. visual representation). Loon distinguishes primitive non-primitive glyphs: primitive glyphs always available use whereas non-primitive glyphs need first specified added plot can used. primitive glyphs :  non-primitive glyph types creator functions :  adding non-primitive glyphs display, number glyphs needs match dimension n plot. words, glyph needs defined observations. See examples. Currently loon support compound glyphs. However, possible cunstruct arbitrary glyph using system save png re-import image glyphs using l_glyph_add_image. information run: l_help(\"learn_R_display_plot.html#glyphs\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add non-primitive glyphs to a scatterplot or graph display — l_glyph_add","text":"","code":"if(interactive()){  # Simple Example with Text Glyphs p <- with(olive, l_plot(stearic, eicosenoic, color=Region)) g <- l_glyph_add_text(p, text=olive$Area, label=\"Area\") p['glyph'] <- g  if (FALSE) { # \\dontrun{ demo(\"l_glyphs\", package=\"loon\") } # }  # create a plot that demonstrates the primitive glyphs and the text glyphs p <- l_plot(x=1:15, y=rep(0,15), size=10, showLabels=FALSE) text_glyph <- l_glyph_add_text(p, text=letters [1:15]) p['glyph'] <- c(     'circle', 'ocircle', 'ccircle',     'square', 'osquare' , 'csquare',     'triangle', 'otriangle', 'ctriangle',     'diamond', 'odiamond', 'cdiamond',     rep(text_glyph, 3) ) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an image glyphs — l_glyph_add_image","title":"Add an image glyphs — l_glyph_add_image","text":"Image glyphs useful show pictures sophisticated   compound glyphs. Note images Tk canvas support transparancy.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an image glyphs — l_glyph_add_image","text":"","code":"l_glyph_add_image(widget, images, label = \"\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an image glyphs — l_glyph_add_image","text":"widget widget path string object handle images Tk image references, see l_image_import_array l_image_import_files helper functions. label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an image glyphs — l_glyph_add_image","text":"information run: l_help(\"learn_R_display_plot.html#images\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an image glyphs — l_glyph_add_image","text":"","code":"if(interactive()){  p <- with(olive, l_plot(palmitic ~ stearic, color = Region)) img_paths <- list.files(file.path(find.package(package = 'loon'), \"images\"), full.names = TRUE) imgs <- setNames(l_image_import_files(img_paths),                  tools::file_path_sans_ext(basename(img_paths))) i <- pmatch(gsub(\"^[[:alpha:]]+-\",\"\", olive$Area), names(imgs), duplicates.ok = TRUE)  g <- l_glyph_add_image(p, imgs[i], label=\"Flags\") p['glyph'] <- g }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_pointrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Pointrange Glyph — l_glyph_add_pointrange","title":"Add a Pointrange Glyph — l_glyph_add_pointrange","text":"Pointrange glyphs show filled circle x-y location   also y-range.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_pointrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Pointrange Glyph — l_glyph_add_pointrange","text":"","code":"l_glyph_add_pointrange(   widget,   ymin,   ymax,   linewidth = 1,   showArea = TRUE,   label = \"\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_pointrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Pointrange Glyph — l_glyph_add_pointrange","text":"widget widget path string object handle ymin vector lower y-yalue point range. ymax vector upper y-yalue point range. linewidth line pixel. showArea boolean, show filled point just outline point label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_pointrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Pointrange Glyph — l_glyph_add_pointrange","text":"","code":"if(interactive()){  p <- l_plot(x = 1:3, color = c('red', 'blue', 'green'), showScales=TRUE) g <- l_glyph_add_pointrange(p, ymin=(1:3)-(1:3)/5, ymax=(1:3)+(1:3)/5) p['glyph'] <- g }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Polygon Glyph — l_glyph_add_polygon","title":"Add a Polygon Glyph — l_glyph_add_polygon","text":"Add one polygon per scatterplot point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Polygon Glyph — l_glyph_add_polygon","text":"","code":"l_glyph_add_polygon(   widget,   x,   y,   linewidth = 1,   showArea = TRUE,   label = \"\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Polygon Glyph — l_glyph_add_polygon","text":"widget widget path string object handle x nested list x-coordinates polygons (relative ), one list element scatterplot point. y nested list y-coordinates polygons, one list element scatterplot point. linewidth linewidth outline. showArea boolean, show filled polygon just outline label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Polygon Glyph — l_glyph_add_polygon","text":"polygon can useful point glyph visualize arbitrary shapes   airplanes, animals shapes available   primitive glyph types (e.g. cross). l_glyphs demo example   polygon glyphs reuse .","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Polygon Glyph — l_glyph_add_polygon","text":"","code":"if(interactive()){  x_star <-     c(-0.000864304235090734, 0.292999135695765, 0.949870354364736,       0.474503025064823, 0.586862575626621, -0.000864304235090734,       -0.586430423509075, -0.474070872947277, -0.949438202247191,       -0.29256698357822) y_star <-     c(-1, -0.403630077787381, -0.308556611927398, 0.153846153846154,       0.808556611927398, 0.499567847882455, 0.808556611927398,       0.153846153846154, -0.308556611927398, -0.403630077787381) x_cross <-     c(-0.258931143762604, -0.258931143762604, -0.950374531835206,       -0.950374531835206, -0.258931143762604, -0.258931143762604,       0.259651397291847, 0.259651397291847, 0.948934024776722,       0.948934024776722, 0.259651397291847, 0.259651397291847) y_cross <-     c(-0.950374531835206, -0.258931143762604, -0.258931143762604,       0.259651397291847, 0.259651397291847, 0.948934024776722,       0.948934024776722, 0.259651397291847, 0.259651397291847,       -0.258931143762604, -0.258931143762604, -0.950374531835206) x_hexagon <-     c(0.773552290406223, 0, -0.773552290406223, -0.773552290406223,       0, 0.773552290406223) y_hexagon <-     c(0.446917314894843, 0.894194756554307, 0.446917314894843,       -0.447637568424085, -0.892754249495822, -0.447637568424085)  p <- l_plot(1:3, 1:3)  gl <- l_glyph_add_polygon(p, x = list(x_star, x_cross, x_hexagon),                           y = list(y_star, y_cross, y_hexagon))  p['glyph'] <- gl  gl['showArea'] <- FALSE }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_serialaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Serialaxes Glyph — l_glyph_add_serialaxes","title":"Add a Serialaxes Glyph — l_glyph_add_serialaxes","text":"Serialaxes glyph show either star glyph parallel   coordinate glyph point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_serialaxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Serialaxes Glyph — l_glyph_add_serialaxes","text":"","code":"l_glyph_add_serialaxes(   widget,   data,   sequence,   linewidth = 1,   scaling = \"variable\",   axesLayout = \"radial\",   showAxes = FALSE,   andrews = FALSE,   axesColor = \"gray70\",   showEnclosing = FALSE,   bboxColor = \"gray70\",   label = \"\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_serialaxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Serialaxes Glyph — l_glyph_add_serialaxes","text":"widget widget path string object handle data data frame numerical data sequence vector variable names defines axes sequence linewidth linewidth outline scaling one 'variable', 'data', 'observation' 'none' specify data scaled. See Details Examples information. axesLayout either \"radial\" \"parallel\" showAxes boolean indicate whether axes shown andrews Andrew's curve ('Fourier' transformation) axesColor color axes showEnclosing boolean, circle (axesLayout=radial) sqaure (axesLayout=parallel) show bounding box/circle glyph (showing unit circle rectangle height 1 scaling=none) bboxColor color bounding box/circle label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_serialaxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Serialaxes Glyph — l_glyph_add_serialaxes","text":"","code":"if(interactive()){  p <- with(olive, l_plot(oleic, stearic, color=Area)) gs <- l_glyph_add_serialaxes(p, data=olive[,-c(1,2)], showArea=FALSE) p['glyph'] <- gs }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Text Glyph — l_glyph_add_text","title":"Add a Text Glyph — l_glyph_add_text","text":"text glyph can multiline string.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Text Glyph — l_glyph_add_text","text":"","code":"l_glyph_add_text(widget, text, label = \"\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Text Glyph — l_glyph_add_text","text":"widget widget path string object handle text text strings observartion. object factor labels get extracted .character. label label glyph (currently shown glyph inspector) ... state arguments","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_add_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Text Glyph — l_glyph_add_text","text":"","code":"if(interactive()){  p <- l_plot(iris, color = iris$Species) g <- l_glyph_add_text(p, iris$Species, \"test_label\") p['glyph'] <- g }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Glyph — l_glyph_delete","title":"Delete a Glyph — l_glyph_delete","text":"Delete glyph plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Glyph — l_glyph_delete","text":"","code":"l_glyph_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Glyph — l_glyph_delete","text":"widget widget path string object handle id glyph id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Glyph Label — l_glyph_getLabel","title":"Get Glyph Label — l_glyph_getLabel","text":"Returns label glyph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Glyph Label — l_glyph_getLabel","text":"","code":"l_glyph_getLabel(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Glyph Label — l_glyph_getLabel","text":"widget widget path string object handle id glyph id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Glyph Type — l_glyph_getType","title":"Get Glyph Type — l_glyph_getType","text":"Query type glyph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Glyph Type — l_glyph_getType","text":"","code":"l_glyph_getType(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_getType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Glyph Type — l_glyph_getType","text":"widget widget path string object handle id glyph id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List glyphs ids — l_glyph_ids","title":"List glyphs ids — l_glyph_ids","text":"List non-primitive glyph ids attached display.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List glyphs ids — l_glyph_ids","text":"","code":"l_glyph_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List glyphs ids — l_glyph_ids","text":"widget widget path string object handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel Glyph — l_glyph_relabel","title":"Relabel Glyph — l_glyph_relabel","text":"Change label glyph. Note label   displayed glyph inspector.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel Glyph — l_glyph_relabel","text":"","code":"l_glyph_relabel(widget, id, label)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel Glyph — l_glyph_relabel","text":"widget widget path string object handle id glyph id label new label","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyph_relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel Glyph — l_glyph_relabel","text":"","code":"if(interactive()){  p <- l_plot(iris, color = iris$Species) g <- l_glyph_add_text(p, iris$Species, \"test_label\") p['glyph'] <- g l_glyph_relabel(p, g, \"Species\") }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Glyphs Inspector — l_glyphs_inspector","title":"Create a Glyphs Inspector — l_glyphs_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Glyphs Inspector — l_glyphs_inspector","text":"","code":"l_glyphs_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Glyphs Inspector — l_glyphs_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Glyphs Inspector — l_glyphs_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Glyphs Inspector — l_glyphs_inspector","text":"","code":"if(interactive()){  i <- l_glyphs_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Image Glyph Inspector — l_glyphs_inspector_image","title":"Create a Image Glyph Inspector — l_glyphs_inspector_image","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Image Glyph Inspector — l_glyphs_inspector_image","text":"","code":"l_glyphs_inspector_image(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Image Glyph Inspector — l_glyphs_inspector_image","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Image Glyph Inspector — l_glyphs_inspector_image","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Image Glyph Inspector — l_glyphs_inspector_image","text":"","code":"if(interactive()){  i <- l_glyphs_inspector_image() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_pointrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","title":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_pointrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","text":"","code":"l_glyphs_inspector_pointrange(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_pointrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_pointrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_pointrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Pointrange Glyph Inspector — l_glyphs_inspector_pointrange","text":"","code":"if(interactive()){  i <- l_glyphs_inspector_pointrange() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_serialaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","title":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_serialaxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","text":"","code":"l_glyphs_inspector_serialaxes(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_serialaxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_serialaxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_serialaxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Serialaxes Glyph Inspector — l_glyphs_inspector_serialaxes","text":"","code":"if(interactive()){  i <- l_glyphs_inspector_serialaxes() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Text Glyph Inspector — l_glyphs_inspector_text","title":"Create a Text Glyph Inspector — l_glyphs_inspector_text","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Text Glyph Inspector — l_glyphs_inspector_text","text":"","code":"l_glyphs_inspector_text(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Text Glyph Inspector — l_glyphs_inspector_text","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Text Glyph Inspector — l_glyphs_inspector_text","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_glyphs_inspector_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Text Glyph Inspector — l_glyphs_inspector_text","text":"","code":"if(interactive()){  i <- l_glyphs_inspector_text() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic funtction to create an interactive graph display — l_graph","title":"Generic funtction to create an interactive graph display — l_graph","text":"Interactive graphs loon currently often used   navigation graphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic funtction to create an interactive graph display — l_graph","text":"","code":"l_graph(nodes, ...)  # S3 method for class 'graph' l_graph(nodes, ...)  # S3 method for class 'loongraph' l_graph(nodes, ...)  # Default S3 method l_graph(nodes = \"\", from = \"\", to = \"\", isDirected = FALSE, parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic funtction to create an interactive graph display — l_graph","text":"nodes object method dispatch ... arguments passed methods vector node names -pairs edges vector node names -pairs edges isDirected boolean state specify whether edges directions parent parent widget graph display","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic funtction to create an interactive graph display — l_graph","text":"graph handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic funtction to create an interactive graph display — l_graph","text":"information run: l_help(\"learn_R_display_graph.html#graph\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic funtction to create an interactive graph display — l_graph","text":"","code":"if(interactive()) {  G <- completegraph(nodes=names(iris))  LG <- linegraph(G, sep=\":\")  g <- l_graph(LG) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Graph Inspector — l_graph_inspector","title":"Create a Graph Inspector — l_graph_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Graph Inspector — l_graph_inspector","text":"","code":"l_graph_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Graph Inspector — l_graph_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Graph Inspector — l_graph_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Graph Inspector — l_graph_inspector","text":"","code":"if(interactive()){  i <- l_graph_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","title":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","text":"","code":"l_graph_inspector_analysis(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Graph Analysis Inspector — l_graph_inspector_analysis","text":"","code":"if(interactive()){  i <- l_graph_inspector_analysis() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_navigators.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","title":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_navigators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","text":"","code":"l_graph_inspector_navigators(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_navigators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_navigators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graph_inspector_navigators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Graph Navigator Inspector — l_graph_inspector_navigators","text":"","code":"if(interactive()){  i <- l_graph_inspector_navigators() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a graphswitch widget — l_graphswitch","title":"Create a graphswitch widget — l_graphswitch","text":"graphswitch provides graphical user interface changing   graph graph display interactively.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a graphswitch widget — l_graphswitch","text":"","code":"l_graphswitch(activewidget = \"\", parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a graphswitch widget — l_graphswitch","text":"activewidget widget handle graph display parent parent widget path ... widget states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a graphswitch widget — l_graphswitch","text":"information run: l_help(\"learn_R_display_graph.html#graph-switch-widget\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a graph that is defined by node names and a from-to edges list — l_graphswitch_add.default","title":"Add a graph that is defined by node names and a from-to edges list — l_graphswitch_add.default","text":"default method uses loongraph display states   arguments add graph graphswitch widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a graph that is defined by node names and a from-to edges list — l_graphswitch_add.default","text":"","code":"# Default S3 method l_graphswitch_add(   widget,   graph,   from,   to,   isDirected,   label = \"\",   index = \"end\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a graph that is defined by node names and a from-to edges list — l_graphswitch_add.default","text":"widget graphswitch widget handle (widget path) graph vector node names, .e. argument gets passed nodes argument creat loongraph like object vector node names -pairs edges vector node names -pairs edges isDirected boolean indicate whether --list defines directed undirected edges label string label graph index position graph graph list ... additional arguments used methiod","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a graph that is defined by node names and a from-to edges list — l_graphswitch_add.default","text":"id graph graphswitch widget","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a graph to the graphswitch widget using a graph object — l_graphswitch_add.graph","title":"Add a graph to the graphswitch widget using a graph object — l_graphswitch_add.graph","text":"Graph objects defined graph R package.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a graph to the graphswitch widget using a graph object — l_graphswitch_add.graph","text":"","code":"# S3 method for class 'graph' l_graphswitch_add(widget, graph, label = \"\", index = \"end\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a graph to the graphswitch widget using a graph object — l_graphswitch_add.graph","text":"widget graphswitch widget handle (widget path) graph graph object created functions graph R package. label string label graph index position graph graph list ... additional arguments used methiod","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a graph to the graphswitch widget using a graph object — l_graphswitch_add.graph","text":"id graph graphswitch widget","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a graph to a graphswitch widget — l_graphswitch_add","title":"Add a graph to a graphswitch widget — l_graphswitch_add","text":"generic function add graph graphswitch   widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a graph to a graphswitch widget — l_graphswitch_add","text":"","code":"l_graphswitch_add(widget, graph, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a graph to a graphswitch widget — l_graphswitch_add","text":"widget widget path string object handle graph graph loongraph object ... arguments passed method","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a graph to a graphswitch widget — l_graphswitch_add","text":"id graph graphswitch widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a graph to a graphswitch widget — l_graphswitch_add","text":"information run: l_help(\"learn_R_display_graph.html#graph-switch-widget\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a graph to the graphswitch widget using a loongraph object — l_graphswitch_add.loongraph","title":"Add a graph to the graphswitch widget using a loongraph object — l_graphswitch_add.loongraph","text":"Loongraphs can created loongraph   function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a graph to the graphswitch widget using a loongraph object — l_graphswitch_add.loongraph","text":"","code":"# S3 method for class 'loongraph' l_graphswitch_add(widget, graph, label = \"\", index = \"end\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a graph to the graphswitch widget using a loongraph object — l_graphswitch_add.loongraph","text":"widget graphswitch widget handle (widget path) graph loongraph object label string label graph index position graph graph list ... additional arguments used methiod","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_add.loongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a graph to the graphswitch widget using a loongraph object — l_graphswitch_add.loongraph","text":"id graph graphswitch widget","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a graph from the graphswitch widget — l_graphswitch_delete","title":"Delete a graph from the graphswitch widget — l_graphswitch_delete","text":"Remove graph graphswitch widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a graph from the graphswitch widget — l_graphswitch_delete","text":"","code":"l_graphswitch_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a graph from the graphswitch widget — l_graphswitch_delete","text":"widget graphswitch widget handle (widget path) id graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a Graph as a loongraph Object — l_graphswitch_get","title":"Return a Graph as a loongraph Object — l_graphswitch_get","text":"Graphs can extracted graphswitch widget loongraph   objects.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a Graph as a loongraph Object — l_graphswitch_get","text":"","code":"l_graphswitch_get(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a Graph as a loongraph Object — l_graphswitch_get","text":"widget graphswitch widget handle (widget path) id graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_getLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Label of a Graph in the Graphswitch Widget — l_graphswitch_getLabel","title":"Query Label of a Graph in the Graphswitch Widget — l_graphswitch_getLabel","text":"graphs graphswitch widgets labels. Use   function query label graph.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_getLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Label of a Graph in the Graphswitch Widget — l_graphswitch_getLabel","text":"","code":"l_graphswitch_getLabel(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_getLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Label of a Graph in the Graphswitch Widget — l_graphswitch_getLabel","text":"widget graphswitch widget handle (widget path) id graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List the ids of the graphs in the graphswitch widget — l_graphswitch_ids","title":"List the ids of the graphs in the graphswitch widget — l_graphswitch_ids","text":"Every graph graphswitch widget id. function   returns ids preserving oder graphs listed   graphswitch.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the ids of the graphs in the graphswitch widget — l_graphswitch_ids","text":"","code":"l_graphswitch_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the ids of the graphs in the graphswitch widget — l_graphswitch_ids","text":"widget graphswitch widget handle (widget path)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move a Graph in the Graph List — l_graphswitch_move","title":"Move a Graph in the Graph List — l_graphswitch_move","text":"Change postion graph graphswitch widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move a Graph in the Graph List — l_graphswitch_move","text":"","code":"l_graphswitch_move(widget, id, index)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move a Graph in the Graph List — l_graphswitch_move","text":"widget graphswitch widget handle (widget path) id graph index position graph positive integer, \"start\" \"end\" also valid keywords.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel a Graph in the Graphswitch Widget — l_graphswitch_relabel","title":"Relabel a Graph in the Graphswitch Widget — l_graphswitch_relabel","text":"graphs graphswitch widgets labels. Use   function relabel graph.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel a Graph in the Graphswitch Widget — l_graphswitch_relabel","text":"","code":"l_graphswitch_relabel(widget, id, label)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel a Graph in the Graphswitch Widget — l_graphswitch_relabel","text":"widget graphswitch widget handle (widget path) id graph label string label graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the Positions of the Graphs in the Graph List — l_graphswitch_reorder","title":"Reorder the Positions of the Graphs in the Graph List — l_graphswitch_reorder","text":"Define new graph order graph list.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the Positions of the Graphs in the Graph List — l_graphswitch_reorder","text":"","code":"l_graphswitch_reorder(widget, ids)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the Positions of the Graphs in the Graph List — l_graphswitch_reorder","text":"widget graphswitch widget handle (widget path) ids vector graph ids graph widget. Use l_graphswitch_ids query ids.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the Graph shown in the Active Graph Widget — l_graphswitch_set","title":"Change the Graph shown in the Active Graph Widget — l_graphswitch_set","text":"activewidget state holds widget handle graph   display. function replaces graph activewidget   one graphs graphswitch widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the Graph shown in the Active Graph Widget — l_graphswitch_set","text":"","code":"l_graphswitch_set(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_graphswitch_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the Graph shown in the Active Graph Widget — l_graphswitch_set","text":"widget graphswitch widget handle (widget path) id graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a browser with loon's combined (TCL and R) documentation website — l_help","title":"Open a browser with loon's combined (TCL and R) documentation website — l_help","text":"l_help opens browser relevant page   official combined loon documentation website   https://great-northern-diver.github.io/loon/l_help/.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a browser with loon's combined (TCL and R) documentation website — l_help","text":"","code":"l_help(page = \"index\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a browser with loon's combined (TCL and R) documentation website — l_help","text":"page relative path page, .html part may omitted ... arguments forwarded browseURL, e.g. specify browser","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a browser with loon's combined (TCL and R) documentation website — l_help","text":"","code":"if (FALSE) { # \\dontrun{ l_help() l_help(\"learn_R_intro\") l_help(\"learn_R_display_hist\") l_help(\"learn_R_bind\") # jump to a section l_help(\"learn_R_bind.html#list-reorder-delete-bindings\") } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hexcolor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","title":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","text":"Color names loon mapped colors according Tk   color specifications normalized 12 digit hexadecimal color   representation.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hexcolor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","text":"","code":"l_hexcolor(color)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hexcolor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","text":"color vector color names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hexcolor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","text":"character vector 12 digit hexadecimal color strings.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_hexcolor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert color names to their 12 digit hexadecimal color representation — l_hexcolor","text":"","code":"if(interactive()){  p <- l_plot(1:2) p['color'] <- 'red' p['color']  l_hexcolor('red') }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive histogram — l_hist","title":"Create an interactive histogram — l_hist","text":"l_hist generic function creating interactive histogram displays can linked loon's displays.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive histogram — l_hist","text":"","code":"l_hist(x, ...)  # Default S3 method l_hist(   x,   yshows = c(\"frequency\", \"density\"),   by = NULL,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   connectedScales = c(\"cross\", \"row\", \"column\", \"both\", \"x\", \"y\", \"none\"),   origin = NULL,   binwidth = NULL,   showStackedColors = TRUE,   showBinHandle = FALSE,   color = l_getOption(\"color\"),   active = TRUE,   selected = FALSE,   xlabel = NULL,   showLabels = TRUE,   showScales = FALSE,   showGuides = TRUE,   parent = NULL,   ... )  # S3 method for class 'factor' l_hist(   x,   showFactors = length(unique(x)) < 25L,   factorLabelAngle,   factorLabelSize = 12,   factorLabelColor = l_getOption(\"foreground\"),   factorLabelY = 0,   ... )  # S3 method for class 'character' l_hist(   x,   showFactors = length(unique(x)) < 25L,   factorLabelAngle,   factorLabelSize = 12,   factorLabelColor = l_getOption(\"foreground\"),   factorLabelY = 0,   ... )  # S3 method for class 'data.frame' l_hist(x, ...)  # S3 method for class 'matrix' l_hist(x, ...)  # S3 method for class 'list' l_hist(x, ...)  # S3 method for class 'table' l_hist(x, ...)  # S3 method for class 'array' l_hist(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive histogram — l_hist","text":"x vector numerical data perform binning x, ... named arguments modify histogram plot states layouts, see details. yshows one \"frequency\" (default)  \"density\" loon plot can separated variables multiple panels. argument can take formula, n dimensional state names (see l_nDimStateNames) n-dimensional vector data.frame list lengths n input. x formula, optional data frame containing variables x . variables found data, taken environment, typically environment function called. layout layout facets 'grid', 'wrap' 'separate' connectedScales Determines scales facets connected depending layout used.  value layout, scales connected follows: layout = \"wrap\":  Across facets, connectedScales \"x\",  \"x\"  scales connected \"y\", \"y\" scales connected \"\",  \"x\" \"y\" scales connected \"none\",  neither \"x\" \"y\" scales connected.    value, \"y\" scale connected. layout = \"grid\":  Across facets, connectedScales \"cross\", scales row column connected \"row\", \"x\" \"y\" scales facets row connected \"column\", \"x\" \"y\" scales facets column connected \"x\", \"x\"  scales connected (regardless column) \"y\", \"y\" scales connected (regardless row) \"\",  \"x\" \"y\" scales connected facets \"none\",  neither \"x\" \"y\" scales connected facets. origin numeric scalar define binning origin binwidth numeric scalar specify binwidth NULL binwidth set using David Scott's rule x numeric (namely 3.49 * sd(x)/(n ^(1/3)) sd(x) > 0 1 sd(x) == 0) using minumum numerical difference factor levels x factor character vector (coerced factor). showStackedColors TRUE (default) bars coloured according colours points; FALSE, bars uniform colour except highlighted points. showBinHandle TRUE, interactive \"bin handle\" appears plot whose movement resets origin binwidth.  Default FALSE color colour fills bins; colours repeated matching number x. Default found using l_getOption(\"color\"). active logical determining whether points appear (default TRUE points). logical vector given length equal number points, identifies points appear (TRUE) (FALSE). selected logical determining whether points appear selected first (default FALSE points). logical vector given length equal number points, identifies points (TRUE) (FALSE). xlabel label used horizontal axis. NULL, attempt meaningful label inferred x made. showLabels logical determine whether axes label (title) presented. showScales logical determine whether numerical scales presented axes. showGuides logical determine whether present background guidelines help determine locations. parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . showFactors whether show factor labels (unique strings x) layer plot. FALSE, factor labels  hidden can turned \"layers\" tab inspector. factorLabelAngle angle rotation (degrees) factor labels. specified, angle 0 chosen fewer 10 labels; labels rotated 90 degrees 10 .  can also numeric vector length equal number factor labels. factorLabelSize font size factor labels (default 12). factorLabelColor colour used factor labels. (default l_getOption(\"foreground\")). Can also vector equal number factor labels. factorLabelY either single number, numeric vector length equal number factor labels, determining y coordinate(s) factor labels.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive histogram — l_hist","text":"argument set, loon widget returned; else l_facet object (list) returned element loon widget displaying subset interest.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an interactive histogram — l_hist","text":"information run: l_help(\"learn_R_display_hist\") Note changing yshows state   'frequency' 'density' might use   l_scaleto_world show complete histogram plotting   region. arguments modify layouts can passed ,   e.g. \"separate\", \"byrow\", etc.   Check l_facet see arguments work.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive histogram — l_hist","text":"","code":"if(interactive()){  h <- l_hist(iris$Sepal.Length)  names(h) h[\"xlabel\"] <- \"Sepal length\" h[\"showOutlines\"] <- FALSE  h[\"yshows\"] h[\"yshows\"] <- \"density\" l_scaleto_plot(h)  h[\"showStackedColors\"] <- TRUE h['color'] <- iris$Species h[\"showStackedColors\"] <- FALSE h[\"showOutlines\"] <- TRUE h[\"showGuides\"] <- FALSE  # link another plot with the previous plot h['linkingGroup'] <- \"iris_data\" h2 <- with(iris, l_hist(Petal.Width,                         linkingGroup=\"iris_data\",                         showStackedColors = TRUE))   # Get an R (grid) graphics plot of the current loon plot plot(h) # or with more control about grid parameters grid.loon(h) # or to save the grid data structure (grob) for later use hg <- loonGrob(h)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Histogram Inspector — l_hist_inspector","title":"Create a Histogram Inspector — l_hist_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Histogram Inspector — l_hist_inspector","text":"","code":"l_hist_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Histogram Inspector — l_hist_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Histogram Inspector — l_hist_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Histogram Inspector — l_hist_inspector","text":"","code":"if(interactive()){  i <- l_hist_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","title":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","text":"","code":"l_hist_inspector_analysis(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_hist_inspector_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Histogram Analysis Inspector — l_hist_inspector_analysis","text":"","code":"if(interactive()){  i <- l_hist_inspector_analysis() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"Import image grayscale data (0-255) image saved   row column array.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"","code":"l_image_import_array(   array,   width,   height,   img_in_row = TRUE,   invert = FALSE,   rotate = 0 )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"array 0-255 grayscale value data. width images pixels. height images pixels. img_in_row logical, TRUE every row array represents image invert logical, 'invert=FALSE' 0=withe, 'invert=TRUE' 0=black rotate image: one 0, 90, 180, 270 degrees.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"vector image object names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"Images tcl managed tcl interpreter made accessible   user via handle, .e. function name form image1, image2,   etc. information run: l_help(\"learn_R_display_plot.html#images\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Greyscale Images as Tcl images from an Array — l_image_import_array","text":"","code":"if (FALSE) { # \\dontrun{ # see demo(\"l_ng_images_frey_LLE\") } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Image Files as Tk Image Objects — l_image_import_files","title":"Import Image Files as Tk Image Objects — l_image_import_files","text":"Note supported image file formats depend whether   Img Tk extension installed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Image Files as Tk Image Objects — l_image_import_files","text":"","code":"l_image_import_files(paths)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Image Files as Tk Image Objects — l_image_import_files","text":"paths vector paths image files supported","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Image Files as Tk Image Objects — l_image_import_files","text":"vector image object names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_image_import_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Image Files as Tk Image Objects — l_image_import_files","text":"information run: l_help(\"learn_R_display_plot.html#load-images\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_imageviewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","title":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","text":"Loon provides simple image viewer browse specified tcl image objects. simple GUI supports either use mouse left right arrow keys switch images previous next image specified image vector. images resized fill viewer window.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_imageviewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","text":"","code":"l_imageviewer(tclimages)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_imageviewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","text":"tclimages Vector tcl image object names.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_imageviewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","text":"tclimages vector returned","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_imageviewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Tcl Images in a Simple Image Viewer — l_imageviewer","text":"","code":"if(interactive()){   img2 <- tkimage.create('photo', width=200, height=150) tcl(img2, 'put', 'yellow', '-to', 0, 0, 199, 149) tcl(img2, 'put', 'green', '-to', 40, 20, 130, 40) img3 <- tkimage.create('photo', width=500, height=100) tcl(img3, 'put', 'orange', '-to', 0, 0, 499, 99) tcl(img3, 'put', 'green', '-to', 40, 80, 350, 95)  l_imageviewer(c(tclvalue(img2), tclvalue(img3)))  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_info_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Information about the States of a Loon Widget — l_info_states","title":"Retrieve Information about the States of a Loon Widget — l_info_states","text":"Loon's built-object documentation. Can used every   loon object plot states including plots, layers, navigators,   contexts.  generic function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_info_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Information about the States of a Loon Widget — l_info_states","text":"","code":"l_info_states(target, states = \"all\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_info_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Information about the States of a Loon Widget — l_info_states","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. states vector names states. '' treated keyword results returning information plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_info_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Information about the States of a Loon Widget — l_info_states","text":"named nested list one element per state. list elements   also named lists type, dimension, defaultvalue,   description elements containing respective information.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_info_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Information about the States of a Loon Widget — l_info_states","text":"","code":"if(interactive()){  p <- l_plot(iris, linkingGroup=\"iris\") i <- l_info_states(p) names(p) names(i) i$selectBy  l <- l_layer_rectangle(p, x=range(iris[,1]), y=range(iris[,2]), color=\"\") l_info_states(l)   h <- l_hist(iris$Sepal.Length, linkingGroup=\"iris\") l_info_states(h)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_isLoonWidget.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a widget path is a valid loon widget — l_isLoonWidget","title":"Check if a widget path is a valid loon widget — l_isLoonWidget","text":"function can useful check whether loon widget   closed user.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_isLoonWidget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a widget path is a valid loon widget — l_isLoonWidget","text":"","code":"l_isLoonWidget(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_isLoonWidget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a widget path is a valid loon widget — l_isLoonWidget","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_isLoonWidget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a widget path is a valid loon widget — l_isLoonWidget","text":"boolean, TRUE argument valid loon widget path, FALSE   otherwise","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer line in Line object — l_layer.Line","title":"Layer line in Line object — l_layer.Line","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer line in Line object — l_layer.Line","text":"","code":"# S3 method for class 'Line' l_layer(widget, x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer line in Line object — l_layer.Line","text":"widget widget widget path string object handle x object defined sp class ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer line in Line object — l_layer.Line","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer line in Line object — l_layer.Line","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer line in Line object — l_layer.Line","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer line in Line object — l_layer.Line","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer lines in Lines object — l_layer.Lines","title":"Layer lines in Lines object — l_layer.Lines","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer lines in Lines object — l_layer.Lines","text":"","code":"# S3 method for class 'Lines' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer lines in Lines object — l_layer.Lines","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer lines in Lines object — l_layer.Lines","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer lines in Lines object — l_layer.Lines","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer lines in Lines object — l_layer.Lines","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer lines in Lines object — l_layer.Lines","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer polygon in Polygon object — l_layer.Polygon","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"","code":"# S3 method for class 'Polygon' l_layer(widget, x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"widget widget widget path string object handle x object defined sp class ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer polygon in Polygon object — l_layer.Polygon","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer polygons in Polygons object — l_layer.Polygons","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"","code":"# S3 method for class 'Polygons' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.Polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer polygons in Polygons object — l_layer.Polygons","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer lines in SpatialLines object — l_layer.SpatialLines","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"","code":"# S3 method for class 'SpatialLines' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer lines in SpatialLines object — l_layer.SpatialLines","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"","code":"# S3 method for class 'SpatialLinesDataFrame' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialLinesDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer lines in SpatialLinesDataFrame object — l_layer.SpatialLinesDataFrame","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer points in SpatialPoints object — l_layer.SpatialPoints","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"","code":"# S3 method for class 'SpatialPoints' l_layer(widget, x, asMainLayer = FALSE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"widget widget widget path string object handle x object defined sp class asMainLayer TRUE widget scatterplot widget, points can chosen added 'model' layer ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer points in SpatialPoints object — l_layer.SpatialPoints","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"","code":"# S3 method for class 'SpatialPointsDataFrame' l_layer(widget, x, asMainLayer = FALSE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"widget widget widget path string object handle x object defined sp class asMainLayer TRUE widget scatterplot widget, points can chosen added 'model' layer ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPointsDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer points in SpatialPointsDataFrame object — l_layer.SpatialPointsDataFrame","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"","code":"# S3 method for class 'SpatialPolygons' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer polygons in SpatialPolygons object — l_layer.SpatialPolygons","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"Methods plot map data defined sp   package","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"","code":"# S3 method for class 'SpatialPolygonsDataFrame' l_layer(widget, x, asSingleLayer = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"widget widget widget path string object handle x object defined sp class asSingleLayer TRUE prefer single layer groups nested 1-dimensinal layers ... arguments forwarded relative l_layer function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"Note currently loon neither support holes ring   directions.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"Applied Spatial Data Analysis R Bivand, Roger S.   Pebesma, Edzer Gomez-Rubio Virgilio","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.SpatialPolygonsDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer polygons in SpatialPolygonDataFrame — l_layer.SpatialPolygonsDataFrame","text":"","code":"if (interactive()) {  if (requireNamespace(\"rworldmap\", quietly = TRUE)) {     world <- rworldmap::getMap(resolution = \"coarse\")     p <- l_plot()     lmap <- l_layer(p, world, asSingleLayer=TRUE)     l_scaleto_world(p)     attr(lmap,'hole')     attr(lmap,'NAME') } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.density.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer Method for Kernel Density Estimation — l_layer.density","title":"Layer Method for Kernel Density Estimation — l_layer.density","text":"Layer line represents kernel density estimate.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Method for Kernel Density Estimation — l_layer.density","text":"","code":"# S3 method for class 'density' l_layer(widget, x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Method for Kernel Density Estimation — l_layer.density","text":"widget widget path string object handle x object density class \"density\" ... additional arguments, often state definition basic layering function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer Method for Kernel Density Estimation — l_layer.density","text":"layer object handle, layer id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer Method for Kernel Density Estimation — l_layer.density","text":"","code":"if(interactive()){   d <- density(faithful$eruptions, bw = \"sj\")   h <- l_hist(x = faithful$eruptions, yshows=\"density\")   l <- l_layer.density(h, d, color=\"steelblue\", linewidth=3)   # or l <- l_layer(h, d, color=\"steelblue\", linewidth=3) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Loon layers — l_layer","title":"Loon layers — l_layer","text":"Loon supports layering visuals groups visuals.   l_layer function generic method.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loon layers — l_layer","text":"","code":"l_layer(widget, x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loon layers — l_layer","text":"widget widget path string object handle x UseMethod: object whose class determine method dispatched. ... additional arguments, often state definition basic layering function","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loon layers — l_layer","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loon layers — l_layer","text":"loon's displays use main graphics model (.e. histogram,   scatterplot graph displays) support layering visual information.   following table lists layer types functions layering   display.  Every layer within display unique id. visuals data   display present default layer display layer id   'model'. example, 'model' layer scatterplot   display visualizes scatterplot glyphs. Functions useful query layers    Layers arranged tree structure tree root layer   id 'root'. rendering order layers according   depth-first traversal layer tree. tree also maintains label   visibility flag layer. layer tree, layer ids, layer   labels visibility layer visualized layers   inspector. layer set invisible rendered   display. group layer set invisible children   rendered; however, visibility flag children layers remain   unchanged. Relevant functions :  layers states can queried modified using   functions ones used displays (.e. l_cget,   l_configure, `[` `[<-`).   last group layer types table n-dimensional states,   actual value n can different every layer display. difference model layer layers   model layer selected state, responds selection gestures   supports linking. information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loon layers — l_layer","text":"","code":"if(interactive()){  # l_layer is a generic method newFoo <- function(x, y, ...) {   r <- list(x=x, y=y, ...)   class(r) <- 'foo'   return(r) }  l_layer.foo <- function(widget, x) {     x$widget <- widget     id <- do.call('l_layer_polygon', x)     return(id) }  p <- l_plot()  obj <- newFoo(x=c(1:6,6:2), y=c(3,1,0,0,1,3,3,5,6,6,5), color='yellow')  id <- l_layer(p, obj)  l_scaleto_world(p) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.map.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Map of class map as Drawings to Loon plot — l_layer.map","title":"Add a Map of class map as Drawings to Loon plot — l_layer.map","text":"maps library provides map data polygon can   added drawings (currently polygons) Loon plots. function   adds map objects class map maps library background   drawings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Map of class map as Drawings to Loon plot — l_layer.map","text":"","code":"# S3 method for class 'map' l_layer(   widget,   x,   color = \"\",   linecolor = \"black\",   linewidth = 1,   label,   parent = \"root\",   index = 0,   asSingleLayer = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Map of class map as Drawings to Loon plot — l_layer.map","text":"widget widget path string object handle x map object class map defined maps R package color fill color, empty string \"\", fill transparant linecolor outline color linewidth linewidth outline label label used layers inspector parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . index position among siblings. valid values 0, 1, 2, ..., 'end' asSingleLayer TRUE polygons get placed n-dimension layer type polygons. Otherwise, FALSE, polygon gets layer. ... additional arguments used methiod","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Map of class map as Drawings to Loon plot — l_layer.map","text":"asSingleLayer=TRUE returns layer id polygons layer,   otherwise group layer contains polygon children layers.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer.map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Map of class map as Drawings to Loon plot — l_layer.map","text":"","code":"if(interactive()){  if (requireNamespace(\"maps\", quietly = TRUE)) {   canada <- maps::map(\"world\",  \"Canada\",                       fill=TRUE, plot=FALSE)   p <- l_plot()   l_map <- l_layer(p, canada,                    asSingleLayer=TRUE, color = \"cornsilk\")   l_map['color'] <- ifelse(grepl(\"lake\", canada$names, TRUE),                            \"lightblue\", \"cornsilk\")   l_scaleto_layer(p, l_map)   l_map['active'] <- FALSE   l_map['active'] <- TRUE   l_map['tag'] }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a layer. — l_layer_bbox","title":"Get the bounding box of a layer. — l_layer_bbox","text":"bounding box layer returns coordinates   smallest rectangle encloses elements layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a layer. — l_layer_bbox","text":"","code":"l_layer_bbox(widget, layer = \"root\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a layer. — l_layer_bbox","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a layer. — l_layer_bbox","text":"Numeric vector length 4 (xmin, ymin, xmax, ymax)   bounding box","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a layer. — l_layer_bbox","text":"","code":"if(interactive()){  p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species)) l_layer_bbox(p, layer='model')  l <- l_layer_rectangle(p, x=0:1, y=30:31) l_layer_bbox(p, l)  l_layer_bbox(p, 'root')  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer Contour Lines — l_layer_contourLines","title":"Layer Contour Lines — l_layer_contourLines","text":"function wrapper around   contourLines adds countourlines loon   plot based cartesian coordinate system.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Contour Lines — l_layer_contourLines","text":"","code":"l_layer_contourLines(   widget,   x = seq(0, 1, length.out = nrow(z)),   y = seq(0, 1, length.out = ncol(z)),   z,   nlevels = 10,   levels = pretty(range(z, na.rm = TRUE), nlevels),   asSingleLayer = TRUE,   parent = \"root\",   index = \"end\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Contour Lines — l_layer_contourLines","text":"widget widget path string object handle x, y described grDevices::contourLines: locations grid lines values z measured. must ascending order. default, equally spaced values 0 1 used. x list, components x$x x$y used x y, respectively. list component z used z. z described grDevices::contourLines: matrix containing values plotted (NAs allowed). Note x can used instead z convenience. nlevels described grDevices::contourLines: number contour levels desired iff levels supplied. levels described grDevices::contourLines: numeric vector levels draw contour lines. asSingleLayer TRUE lines layer used line, otherwise FALSE group nested line layers line created parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . index position among siblings. valid values 0, 1, 2, ..., 'end' ... arguments forwarded l_layer_line","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer Contour Lines — l_layer_contourLines","text":"layer id group lines layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer Contour Lines — l_layer_contourLines","text":"information run: l_help(\"learn_R_layer.html#countourlines-heatimage-rasterimage\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_contourLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer Contour Lines — l_layer_contourLines","text":"","code":"if(interactive()){  p <- l_plot() x <- 10*1:nrow(volcano) y <- 10*1:ncol(volcano) lcl <- l_layer_contourLines(p, x, y, volcano) l_scaleto_world(p)  if (requireNamespace(\"MASS\", quietly = TRUE)) {    p1 <- with(iris, l_plot(Sepal.Length~Sepal.Width, color=Species))   lcl <- with(iris, l_layer_contourLines(p1, MASS::kde2d(Sepal.Width,Sepal.Length)))    p2 <- with(iris, l_plot(Sepal.Length~Sepal.Width, color=Species))   layers <- sapply(split(cbind(iris, color=p2['color']), iris$Species), function(dat) {        kest <- with(dat, MASS::kde2d(Sepal.Width,Sepal.Length))        l_layer_contourLines(p2, kest, color=as.character(dat$color[1]), linewidth=2,             label=paste0(as.character(dat$Species[1]), \" contours\"))   }) }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a layer — l_layer_delete","title":"Delete a layer — l_layer_delete","text":"'model' 'root' layer can   dynamically deleted. group layer gets deleted   l_layer_delete children layers get moved   grandparent group layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a layer — l_layer_delete","text":"","code":"l_layer_delete(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a layer — l_layer_delete","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a layer — l_layer_delete","text":"0 success otherwise function throws error","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a layer — l_layer_delete","text":"","code":"if(interactive()){  p <- l_plot() l1 <- l_layer_rectangle(p, x = 0:1, y = 0:1, color='red') l_layer_delete(l1)  l2 <- l_layer_rectangle(p, x = 0:1, y = 0:1, color='yellow') l_layer_delete(p,l2)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_demote.html","id":null,"dir":"Reference","previous_headings":"","what":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","title":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","text":"Moves layer layer tree (away root layer)   sibling group layer right layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_demote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","text":"","code":"l_layer_demote(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_demote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_demote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","text":"0 success otherwise function throws error","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_demote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moves the layer to be a child of its right group layer sibling — l_layer_demote","text":"","code":"if(interactive()){  p <- l_plot()  g1 <- l_layer_group(p) g2 <- l_layer_group(p, parent=g1) l1 <- l_layer_oval(p, x=0:1, y=0:1)  l_layer_printTree(p) l_layer_demote(p, l1) l_layer_printTree(p) l_layer_demote(p, l1) l_layer_printTree(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_expunge.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a layer and all its descendants — l_layer_expunge","title":"Delete a layer and all its descendants — l_layer_expunge","text":"Delete group layer descendants. Note   'model' layer deleted.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_expunge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a layer and all its descendants — l_layer_expunge","text":"","code":"l_layer_expunge(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_expunge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a layer and all its descendants — l_layer_expunge","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_expunge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a layer and all its descendants — l_layer_expunge","text":"0 success otherwise function throws error","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_expunge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a layer and all its descendants — l_layer_expunge","text":"","code":"if(interactive()){  p <- l_plot() g <- l_layer_group(p) l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g, color=\"\", linecolor=\"orange\", linewidth=2) l2 <- l_layer_line(p, x=c(0,.5,1), y=c(0,1,0), parent=g, color=\"blue\")  l_layer_expunge(p, g)  # or l_layer_expunge(g)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getChildren.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children of a group layer — l_layer_getChildren","title":"Get children of a group layer — l_layer_getChildren","text":"Returns ids group layer's children.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getChildren.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children of a group layer — l_layer_getChildren","text":"","code":"l_layer_getChildren(widget, layer = \"root\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getChildren.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children of a group layer — l_layer_getChildren","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getChildren.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children of a group layer — l_layer_getChildren","text":"Character vector ids childrens. create layer handles   (.e. objects class 'l_layer') use   l_create_handle function.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getChildren.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children of a group layer — l_layer_getChildren","text":"","code":"if(interactive()){  p <- l_plot()  g <- l_layer_group(p) l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g) l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle', parent=g)  l_layer_getChildren(p, g)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get layer label. — l_layer_getLabel","title":"Get layer label. — l_layer_getLabel","text":"Layer labels useful identify layer layer   inspector. layer label can initially set layer creation   label argument.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get layer label. — l_layer_getLabel","text":"","code":"l_layer_getLabel(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get layer label. — l_layer_getLabel","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get layer label. — l_layer_getLabel","text":"Named vector length 1 layer label value layer id   name.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get layer label. — l_layer_getLabel","text":"Note layer label state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getLabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get layer label. — l_layer_getLabel","text":"","code":"if(interactive()){  p <- l_plot() l1 <- l_layer_rectangle(p, x=0:1, y=0:1, label=\"a rectangle\") l_layer_getLabel(p, 'model') l_layer_getLabel(p, l1)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getParent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent layer id of a layer — l_layer_getParent","title":"Get parent layer id of a layer — l_layer_getParent","text":"toplevel parent 'root' layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getParent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent layer id of a layer — l_layer_getParent","text":"","code":"l_layer_getParent(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getParent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent layer id of a layer — l_layer_getParent","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getParent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parent layer id of a layer — l_layer_getParent","text":"","code":"if(interactive()){  p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))  l_layer_getParent(p, 'model')  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get layer type — l_layer_getType","title":"Get layer type — l_layer_getType","text":"see manual page l_layer   primitive layer types.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get layer type — l_layer_getType","text":"","code":"l_layer_getType(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get layer type — l_layer_getType","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get layer type — l_layer_getType","text":"One : 'group', 'polygon', 'text',   'line', 'rectangle', 'oval', 'points',   'texts', 'polygons', 'rectangles', 'lines'   'scatterplot', 'histogram', 'serialaxes'   'graph'.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get layer type — l_layer_getType","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_getType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get layer type — l_layer_getType","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_rectangle(p, x=0:1, y=0:1) l_layer_getType(p, l) l_layer_getType(p, 'model')  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":null,"dir":"Reference","previous_headings":"","what":"layer a group node — l_layer_group","title":"layer a group node — l_layer_group","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles. group layer can contain layers. group layer   invisible, children.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"layer a group node — l_layer_group","text":"","code":"l_layer_group(widget, label = \"group\", parent = \"root\", index = 0)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"layer a group node — l_layer_group","text":"widget widget path name string label label used layers inspector parent group layer index newly added layer parent group","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"layer a group node — l_layer_group","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"layer a group node — l_layer_group","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"layer a group node — l_layer_group","text":"","code":"if (interactive()){ p <- l_plot(x=c(1,10,1.5,7,4.3,9,5,2,8),              y=c(1,10,7,3,4,3.3,8,3,4),              title=\"Demo Layers\")  id.g <- l_layer_group(p, \"A Layer Group\") id.pts <- l_layer_points(p, x=c(3,6), y=c(4,7), color=\"red\", parent=id.g) l_scaleto_layer(p, id.pts) l_configure(id.pts, x=c(-5,5,12), y=c(-2,-5,18), color=\"lightgray\")  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Queries visibility status of decendants — l_layer_groupVisibility","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"Query whether , part none group layers descendants   visible.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"","code":"l_layer_groupVisibility(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"'', 'part' 'none' depending   visibility status descendants.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"Visibile layers rendered, invisible ones .   ancestor layer set invisible layer rendered   either. layer visibility flag can checked   l_layer_isVisible actual visibility (.e.   ancesters visibile ) can checked   l_layer_layerVisibility. Note layer visibility state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_groupVisibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Queries visibility status of decendants — l_layer_groupVisibility","text":"","code":"if(interactive()){  p <- l_plot()  g <- l_layer_group(p) l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g) l2 <- l_layer_oval(p, x=0:1, y=0:1, parent=g)  l_layer_groupVisibility(p, g) l_layer_hide(p, l2) l_layer_groupVisibility(p, g) l_layer_hide(p, l1) l_layer_groupVisibility(p, g) l_layer_hide(p, g) l_layer_groupVisibility(p, g)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a Heat Image — l_layer_heatImage","title":"Display a Heat Image — l_layer_heatImage","text":"function similar   image function. works every loon plot   based cartesian coordinate system.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a Heat Image — l_layer_heatImage","text":"","code":"l_layer_heatImage(   widget,   x = seq(0, 1, length.out = nrow(z)),   y = seq(0, 1, length.out = ncol(z)),   z,   zlim = range(z[is.finite(z)]),   xlim = range(x),   ylim = range(y),   col = grDevices::heat.colors(12),   breaks,   oldstyle = FALSE,   useRaster,   index = \"end\",   parent = \"root\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a Heat Image — l_layer_heatImage","text":"widget widget path string object handle x locations grid lines values z measured. must finite, non-missing (strictly) ascending order. default, equally spaced values 0 1 used. x list, components x$x x$y used x y, respectively. list component z used z. y see description x argument z numeric logical matrix containing values plotted     (NAs allowed).  Note x can used instead     z convenience. zlim minimum maximum z values colors     plotted, defaulting range finite values     z. given colors used color     equispaced interval range. midpoints     intervals cover range, values just outside range     plotted. xlim range plotted x values, defaulting range x ylim range plotted y values, defaulting range y col list colors generated     hcl.colors, gray.colors similar     functions. breaks set finite numeric breakpoints colours:     must one breakpoint colour increasing     order.  Unsorted vectors sorted, warning. oldstyle logical. true midpoints colour intervals     equally spaced, zlim[1] zlim[2] taken     midpoints.  default colour intervals equal     lengths limits. useRaster logical; TRUE bitmap raster used     plot image instead polygons. grid must regular     case, otherwise error raised.   behaviour     specified, see ‘Details’. index position among siblings. valid values 0, 1, 2, ..., 'end' parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . ... argumnets forwarded l_layer_line","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a Heat Image — l_layer_heatImage","text":"layer id group rectangles layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display a Heat Image — l_layer_heatImage","text":"information run: l_help(\"learn_R_layer.html#countourlines-heatimage-rasterimage\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_heatImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a Heat Image — l_layer_heatImage","text":"","code":"if(interactive()){  if (requireNamespace(\"MASS\", quietly = TRUE)) {   kest <- with(iris, MASS::kde2d(Sepal.Width,Sepal.Length))   image(kest)   contour(kest, add=TRUE)    p <- l_plot()   lcl <- l_layer_contourLines(p, kest, label='contour lines')   limg <- l_layer_heatImage(p, kest, label='heatmap')   l_scaleto_world(p) }  # from examples(image) x <- y <- seq(-4*pi, 4*pi, len = 27) r <- sqrt(outer(x^2, y^2, \"+\")) p1 <- l_plot() l_layer_heatImage(p1, z = z <- cos(r^2)*exp(-r/6), col  = gray((0:32)/32)) l_scaleto_world(p1)  image(z = z <- cos(r^2)*exp(-r/6), col  = gray((0:32)/32))  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide a Layer — l_layer_hide","title":"Hide a Layer — l_layer_hide","text":"hidden layer rendered. group layer set   hidden descendants rendered either.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide a Layer — l_layer_hide","text":"","code":"l_layer_hide(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hide a Layer — l_layer_hide","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hide a Layer — l_layer_hide","text":"0 success otherwise function throws error","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hide a Layer — l_layer_hide","text":"Visibile layers rendered, invisible ones .   ancestor layer set invisible layer rendered   either. layer visibility flag can checked   l_layer_isVisible actual visibility (.e.   ancesters visibile ) can checked   l_layer_layerVisibility. Note layer visibility state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_hide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hide a Layer — l_layer_hide","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_rectangle(p, x=0:1, y=0:1, color=\"steelblue\") l_layer_hide(p, l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List ids of layers in Plot — l_layer_ids","title":"List ids of layers in Plot — l_layer_ids","text":"Every layer within display unique id. function   returns list layer ids widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List ids of layers in Plot — l_layer_ids","text":"","code":"l_layer_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List ids of layers in Plot — l_layer_ids","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List ids of layers in Plot — l_layer_ids","text":"vector layer ids rendering order. create layer handle   object use l_create_handle.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List ids of layers in Plot — l_layer_ids","text":"information run: l_help(\"learn_R_layer.html#add-move-delete-layers\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List ids of layers in Plot — l_layer_ids","text":"","code":"if (interactive()){ set.seed(500) x <- rnorm(30) y <- 4 + 3*x + rnorm(30) fit <- lm(y~x) xseq <- seq(min(x)-1, max(x)+1, length.out = 50) fit_line <- predict(fit, data.frame(x=range(xseq))) ci <- predict(fit, data.frame(x=xseq),               interval=\"confidence\", level=0.95) pi <- predict(fit, data.frame(x=xseq),               interval=\"prediction\", level=0.95)   p <- l_plot(y~x, color='black', showScales=TRUE, showGuides=TRUE) gLayer <- l_layer_group(     p, label=\"simple linear regression\",     parent=\"root\", index=\"end\" ) fitLayer <- l_layer_line(     p, x=range(xseq), y=fit_line, color=\"#04327F\",     linewidth=4, label=\"fit\", parent=gLayer ) ciLayer <- l_layer_polygon(     p,     x = c(xseq, rev(xseq)),     y = c(ci[,'lwr'], rev(ci[,'upr'])),     color = \"#96BDFF\", linecolor=\"\",     label = \"95 % confidence interval\",     parent = gLayer, index='end' ) piLayer <- l_layer_polygon(     p,     x = c(xseq, rev(xseq)),     y = c(pi[,'lwr'], rev(pi[,'upr'])),     color = \"#E2EDFF\", linecolor=\"\",     label = \"95 % prediction interval\",     parent = gLayer, index='end' )  l_info_states(piLayer)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the order index of a layer among its siblings — l_layer_index","title":"Get the order index of a layer among its siblings — l_layer_index","text":"index determines rendering order children layers   parent. layer index=0 rendered first.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the order index of a layer among its siblings — l_layer_index","text":"","code":"l_layer_index(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the order index of a layer among its siblings — l_layer_index","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the order index of a layer among its siblings — l_layer_index","text":"numeric value","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the order index of a layer among its siblings — l_layer_index","text":"Note index layers 0 based.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":null,"dir":"Reference","previous_headings":"","what":"Return visibility flag of layer — l_layer_isVisible","title":"Return visibility flag of layer — l_layer_isVisible","text":"Hidden invisible layers rendered. function   queries whether layer visible/rendered .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return visibility flag of layer — l_layer_isVisible","text":"","code":"l_layer_isVisible(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return visibility flag of layer — l_layer_isVisible","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return visibility flag of layer — l_layer_isVisible","text":"TRUE FALSE depending whether layer visible   .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return visibility flag of layer — l_layer_isVisible","text":"Visibile layers rendered, invisible ones .   ancestor layer set invisible layer rendered   either. layer visibility flag can checked   l_layer_isVisible actual visibility (.e.   ancesters visibile ) can checked   l_layer_layerVisibility. Note layer visibility state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_isVisible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return visibility flag of layer — l_layer_isVisible","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_rectangle(p, x=0:1, y=0:1) l_layer_isVisible(p, l) l_layer_hide(p, l) l_layer_isVisible(p, l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_layerVisibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","title":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","text":"Although visibility flag layer might set   TRUE rendered ancestor group layer set   invisible. l_layer_visibility returns TRUE   layer ancestor layers visibility flag set true   layer actually rendered.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_layerVisibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","text":"","code":"l_layer_layerVisibility(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_layerVisibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_layerVisibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","text":"TRUE layer ancestor layers   visibility flag set true layer actually rendered, otherwise   FALSE.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_layerVisibility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns logical value for whether layer is actually seen — l_layer_layerVisibility","text":"Visibile layers rendered, invisible ones .   ancestor layer set invisible layer rendered   either. layer visibility flag can checked   l_layer_isVisible actual visibility (.e.   ancesters visibile ) can checked   l_layer_layerVisibility. Note layer visibility state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a line — l_layer_line","title":"Layer a line — l_layer_line","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a line — l_layer_line","text":"","code":"l_layer_line(   widget,   x,   y = NULL,   color = \"black\",   linewidth = 1,   dash = \"\",   label = \"line\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a line — l_layer_line","text":"widget widget path name string x coordinates line. Alternatively, single plotting structure, function R object plot method can provided x y passed xy.coords y y coordinates line, optional x appropriate structure. color color line linewidth linewidth outline dash dash pattern line, see https://www.tcl-lang.org/man/tcl8.6/TkCmd/canvas.htm#M26 label label used layers inspector parent group layer index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a line — l_layer_line","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a line — l_layer_line","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a line — l_layer_line","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_line(p, x=c(1,2,3,4), y=c(1,3,2,4), color='red', linewidth=2) l_scaleto_world(p)  # object p <- l_plot() l <- l_layer_line(p, x=nhtemp) l_scaleto_layer(l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer lines — l_layer_lines","title":"Layer lines — l_layer_lines","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer lines — l_layer_lines","text":"","code":"l_layer_lines(   widget,   x,   y,   color = \"black\",   linewidth = 1,   label = \"lines\",   parent = \"root\",   index = 0,   group = NULL,   active = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer lines — l_layer_lines","text":"widget widget path name string x list vectors x coordinates y list vectors y coordinates color color lines linewidth vector line widths label label used layers inspector parent group layer index newly added layer parent group group separate x vector y vector list group. active logical determining whether objects appear (default TRUE ). ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer lines — l_layer_lines","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer lines — l_layer_lines","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer lines — l_layer_lines","text":"","code":"if(interactive()){  s <- Filter(function(df)nrow(df) > 1, split(UsAndThem, UsAndThem$Country)) sUaT <- Map(function(country){country[order(country$Year),]} , s) xcoords <- Map(function(x)x$Year, sUaT) ycoords <- Map(function(x)x$LifeExpectancy, sUaT) region <- sapply(sUaT, function(x)as.character(x$Geographic.Region[1]))  p <- l_plot(showItemLabels=TRUE) l <- l_layer_lines(p, xcoords, ycoords, itemLabel=names(sUaT), color=region) l_scaleto_layer(l)  # Set groups p <- l_plot(showItemLabels=TRUE) l <- l_layer_lines(p,                    x = c((0:4)/10, rep(.5, 5), (10:6)/10, rep(.5, 5)),                    y = c(rep(.5, 5), (10:6/10), rep(.5, 5), (0:4)/10),                    group = rep(1:5, 4),                    linewidth = 4,                    col = l_getColorList()[1:5]) l_scaleto_layer(l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch the layer place with its sibling to the right — l_layer_lower","title":"Switch the layer place with its sibling to the right — l_layer_lower","text":"Change layers position within parent layer group   increasing index layer one possible. means   raised layer rendered () sibling   layer right.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch the layer place with its sibling to the right — l_layer_lower","text":"","code":"l_layer_lower(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch the layer place with its sibling to the right — l_layer_lower","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch the layer place with its sibling to the right — l_layer_lower","text":"0 success otherwise function throws error","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch the layer place with its sibling to the right — l_layer_lower","text":"","code":"if(interactive()){  p <- l_plot()  l1 <- l_layer_rectangle(p, x=0:1, y=0:1) l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle')  l_aspect(p) <- 1  l_layer_lower(p, l2)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move a layer — l_layer_move","title":"Move a layer — l_layer_move","text":"postition layer layer tree determines   rendering order. , non-group layers rendered order   Depth-first traversal layer tree. toplevel group layer called   'root'.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move a layer — l_layer_move","text":"","code":"l_layer_move(widget, layer, parent, index = \"0\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move a layer — l_layer_move","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used parent parent layer specified set current parent layer layer index position among siblings. valid values 0, 1, 2, ..., 'end'","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move a layer — l_layer_move","text":"0 success otherwise function throws error","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_move.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move a layer — l_layer_move","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_rectangle(p, x=0:1, y=0:1, color=\"steelblue\") g <- l_layer_group(p) l_layer_printTree(p)  l_layer_move(l, parent=g) l_layer_printTree(p)  l_layer_move(p, 'model', parent=g) l_layer_printTree(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a oval — l_layer_oval","title":"Layer a oval — l_layer_oval","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a oval — l_layer_oval","text":"","code":"l_layer_oval(   widget,   x,   y,   color = \"gray80\",   linecolor = \"black\",   linewidth = 1,   label = \"oval\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a oval — l_layer_oval","text":"widget widget path name string x x coordinates y y coordinates color fill color, empty string \"\", fill transparant linecolor outline color linewidth linewidth outline label label used layers inspector parent group layer index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a oval — l_layer_oval","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a oval — l_layer_oval","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_oval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a oval — l_layer_oval","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_oval(p, c(1,5), c(2,12), color='steelblue') l_configure(p, panX=0, panY=0, deltaX=20, deltaY=20)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer points — l_layer_points","title":"Layer points — l_layer_points","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles. Scatter points layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer points — l_layer_points","text":"","code":"l_layer_points(   widget,   x,   y = NULL,   color = \"gray60\",   size = 6,   label = \"points\",   parent = \"root\",   index = 0,   active = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer points — l_layer_points","text":"widget widget path name string x coordinates line. Alternatively, single plotting structure, function R object plot method can provided x y passed xy.coords y y coordinates line, optional x appropriate structure. color color points size size point, scatterplot model layer label label used layers inspector parent group layer index newly added layer parent group active logical determining whether objects appear (default TRUE ). ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer points — l_layer_points","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer points — l_layer_points","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a polygon — l_layer_polygon","title":"Layer a polygon — l_layer_polygon","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a polygon — l_layer_polygon","text":"","code":"l_layer_polygon(   widget,   x,   y,   color = \"gray80\",   linecolor = \"black\",   linewidth = 1,   label = \"polygon\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a polygon — l_layer_polygon","text":"widget widget path name string x x coordinates y y coordinates color fill color, empty string \"\", fill transparant linecolor outline color linewidth linewidth outline label label used layers inspector parent group layer index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a polygon — l_layer_polygon","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a polygon — l_layer_polygon","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a polygon — l_layer_polygon","text":"","code":"if (interactive()){ set.seed(500) x <- rnorm(30) y <- 4 + 3*x + rnorm(30) fit <- lm(y~x) xseq <- seq(min(x)-1, max(x)+1, length.out = 50) fit_line <- predict(fit, data.frame(x=range(xseq))) ci <- predict(fit, data.frame(x=xseq),               interval=\"confidence\", level=0.95) pi <- predict(fit, data.frame(x=xseq),               interval=\"prediction\", level=0.95)   p <- l_plot(y~x, color='black', showScales=TRUE, showGuides=TRUE) gLayer <- l_layer_group(     p, label=\"simple linear regression\",     parent=\"root\", index=\"end\" ) fitLayer <- l_layer_line(     p, x=range(xseq), y=fit_line, color=\"#04327F\",     linewidth=4, label=\"fit\", parent=gLayer ) ciLayer <- l_layer_polygon(     p,     x = c(xseq, rev(xseq)),     y = c(ci[,'lwr'], rev(ci[,'upr'])),     color = \"#96BDFF\", linecolor=\"\",     label = \"95 % confidence interval\",     parent = gLayer, index='end' ) piLayer <- l_layer_polygon(     p,     x = c(xseq, rev(xseq)),     y = c(pi[,'lwr'], rev(pi[,'upr'])),     color = \"#E2EDFF\", linecolor=\"\",     label = \"95 % prediction interval\",     parent = gLayer, index='end' )  l_info_states(piLayer)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer polygons — l_layer_polygons","title":"Layer polygons — l_layer_polygons","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer polygons — l_layer_polygons","text":"","code":"l_layer_polygons(   widget,   x,   y,   color = \"gray80\",   linecolor = \"black\",   linewidth = 1,   label = \"polygons\",   parent = \"root\",   index = 0,   group = NULL,   active = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer polygons — l_layer_polygons","text":"widget widget path name string x list vectors x coordinates y list vectors y coordinates color vector fill colors, empty string \"\", fill transparant linecolor vector outline colors linewidth vector line widths label label used layers inspector parent group layer index newly added layer parent group group separate x vector y vector list group. active logical determining whether objects appear (default TRUE ). ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer polygons — l_layer_polygons","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer polygons — l_layer_polygons","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer polygons — l_layer_polygons","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_polygons(      p,      x = list(c(1,2,1.5), c(3,4,6,5,2), c(1,3,5,3)),      y = list(c(1,1,2), c(1,1.5,1,4,2), c(3,5,6,4)),      color = c('red', 'green', 'blue'),      linecolor = \"\" ) l_scaleto_world(p)  l_info_states(l, \"color\")   # Set groups p <- l_plot() l_layer_polygons(p,                  x = c(1, 2, 1.5, 3, 4, 6, 5, 2, 1, 3, 5, 3),                  y = c(1, 1, 2, 1, 1.5, 1, 4, 2, 3, 5, 6, 4),                  group = c(rep(1,3), rep(2,5), rep(3, 4))) l_scaleto_world(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_printTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the layer tree — l_layer_printTree","title":"Print the layer tree — l_layer_printTree","text":"Prints layer tree (.e. layer ids) prompt. Group   layers prefixed '+'. 'root' layer   listed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_printTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the layer tree — l_layer_printTree","text":"","code":"l_layer_printTree(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_printTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the layer tree — l_layer_printTree","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_printTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the layer tree — l_layer_printTree","text":"empty string","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_printTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the layer tree — l_layer_printTree","text":"","code":"if(interactive()){  p <- l_plot() l_layer_rectangle(p, x=0:1, y=0:1) g <- l_layer_group(p) l_layer_oval(p, x=0:1, y=0:1, parent=g) l_layer_line(p, x=0:1, y=0:1, parent=g) l_layer_printTree(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_promote.html","id":null,"dir":"Reference","previous_headings":"","what":"Moves the layer up to be a left sibling of its parent — l_layer_promote","title":"Moves the layer up to be a left sibling of its parent — l_layer_promote","text":"Moves layer layer tree (towards root layer)   parent layer root layer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_promote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moves the layer up to be a left sibling of its parent — l_layer_promote","text":"","code":"l_layer_promote(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_promote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moves the layer up to be a left sibling of its parent — l_layer_promote","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_promote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moves the layer up to be a left sibling of its parent — l_layer_promote","text":"0 success otherwise function throws error","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_promote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moves the layer up to be a left sibling of its parent — l_layer_promote","text":"","code":"if(interactive()){  p <- l_plot()  g1 <- l_layer_group(p) g2 <- l_layer_group(p, parent=g1) l1 <- l_layer_oval(p, x=0:1, y=0:1, parent=g2)  l_layer_printTree(p) l_layer_promote(p, l1) l_layer_printTree(p) l_layer_promote(p, l1) l_layer_printTree(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_raise.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch the layer place with its sibling to the left — l_layer_raise","title":"Switch the layer place with its sibling to the left — l_layer_raise","text":"Change layers position within parent layer group   decreasing index layer one possible. means   raised layer rendered (top) sibling   layer left.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_raise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch the layer place with its sibling to the left — l_layer_raise","text":"","code":"l_layer_raise(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_raise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch the layer place with its sibling to the left — l_layer_raise","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_raise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch the layer place with its sibling to the left — l_layer_raise","text":"0 success otherwise function throws error","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_raise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch the layer place with its sibling to the left — l_layer_raise","text":"","code":"if(interactive()){  p <- l_plot()  l1 <- l_layer_rectangle(p, x=0:1, y=0:1) l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle')  l_aspect(p) <- 1  l_layer_raise(p, l1)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a Raster Image — l_layer_rasterImage","title":"Layer a Raster Image — l_layer_rasterImage","text":"function similar   rasterImage function. works every loon plot   based cartesian coordinate system.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a Raster Image — l_layer_rasterImage","text":"","code":"l_layer_rasterImage(   widget,   image,   xleft,   ybottom,   xright,   ytop,   angle = 0,   interpolate = FALSE,   parent = \"root\",   index = \"end\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a Raster Image — l_layer_rasterImage","text":"widget widget path string object handle image raster object, object can     coerced one .raster. xleft vector (scalar) left x positions. ybottom vector (scalar) bottom y positions. xright vector (scalar) right x positions. ytop vector (scalar) top y positions. angle angle rotation (degrees, anti-clockwise     positive x-axis, bottom-left corner). interpolate logical vector (scalar) indicating     whether apply linear interpolation image drawing. parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . index position among siblings. valid values 0, 1, 2, ..., 'end' ... argumnets forwarded l_layer_line","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a Raster Image — l_layer_rasterImage","text":"layer id group rectangles layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a Raster Image — l_layer_rasterImage","text":"information run: l_help(\"learn_R_layer.html#countourlines-heatimage-rasterimage\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rasterImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a Raster Image — l_layer_rasterImage","text":"","code":"if(interactive()){  plot(1,1, xlim = c(0,1), ylim=c(0,1)) mat <- matrix(c(0,0,0,0, 1,1), ncol=2) rasterImage(mat, 0,0,1,1, interpolate = FALSE)  p <- l_plot() l_layer_rasterImage(p, mat, 0,0,1,1) l_scaleto_world(p)  image <- as.raster(matrix(0:1, ncol = 5, nrow = 3)) p <- l_plot(showScales=TRUE, background=\"thistle\", useLoonInspector=FALSE) l_layer_rasterImage(p, image, 100, 300, 150, 350, interpolate = FALSE) l_layer_rasterImage(p, image, 100, 400, 150, 450) l_layer_rasterImage(p, image, 200, 300, 200 + 10, 300 + 10,    interpolate = FALSE) l_scaleto_world(p)  # from examples(rasterImage)  # set up the plot region: op <- par(bg = \"thistle\") plot(c(100, 250), c(300, 450), type = \"n\", xlab = \"\", ylab = \"\") rasterImage(image, 100, 300, 150, 350, interpolate = FALSE) rasterImage(image, 100, 400, 150, 450) rasterImage(image, 200, 300, 200 + 10, 300 + 10,            interpolate = FALSE)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a rectangle — l_layer_rectangle","title":"Layer a rectangle — l_layer_rectangle","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a rectangle — l_layer_rectangle","text":"","code":"l_layer_rectangle(   widget,   x,   y,   color = \"gray80\",   linecolor = \"black\",   linewidth = 1,   label = \"rectangle\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a rectangle — l_layer_rectangle","text":"widget widget path name string x x coordinates y y coordinates color fill color, empty string \"\", fill transparant linecolor outline color linewidth linewidth outline label label used layers inspector parent group layer index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a rectangle — l_layer_rectangle","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a rectangle — l_layer_rectangle","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a rectangle — l_layer_rectangle","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_rectangle(p, x=c(2,3), y=c(1,10), color='steelblue') l_scaleto_layer(l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer rectangles — l_layer_rectangles","title":"Layer rectangles — l_layer_rectangles","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer rectangles — l_layer_rectangles","text":"","code":"l_layer_rectangles(   widget,   x,   y,   color = \"gray80\",   linecolor = \"black\",   linewidth = 1,   label = \"rectangles\",   parent = \"root\",   index = 0,   group = NULL,   active = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer rectangles — l_layer_rectangles","text":"widget widget path name string x list vectors x coordinates y list vectors y coordinates color vector fill colors, empty string \"\", fill transparant linecolor vector outline colors linewidth vector line widths label label used layers inspector parent group layer index newly added layer parent group group separate x vector y vector list group. active logical determining whether objects appear (default TRUE ). ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer rectangles — l_layer_rectangles","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer rectangles — l_layer_rectangles","text":"information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_rectangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer rectangles — l_layer_rectangles","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_rectangles(      p,      x = list(c(0,1), c(1,2), c(2,3), c(5,6)),      y = list(c(0,1), c(1,2), c(0,1), c(3,4)),      color = c('red', 'blue', 'green', 'orange'),      linecolor = \"black\" ) l_scaleto_world(p)  l_info_states(l)  # Set groups pp <- l_plot(x = c(0,1,1,2,2,3,5,6),              y = c(0,1,1,2,0,1,3,4)) # x and y are inherited from pp ll <- l_layer_rectangles(      pp,      group = rep(1:4, each = 2),      color = c('red', 'blue', 'green', 'orange'),      linecolor = \"black\" ) l_scaleto_world(pp)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change layer label — l_layer_relabel","title":"Change layer label — l_layer_relabel","text":"Layer labels useful identify layer layer   inspector. layer label can initially set layer creation   label argument.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change layer label — l_layer_relabel","text":"","code":"l_layer_relabel(widget, layer, label)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change layer label — l_layer_relabel","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used label new label layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change layer label — l_layer_relabel","text":"0 success otherwise function throws error","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change layer label — l_layer_relabel","text":"Note layer label state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change layer label — l_layer_relabel","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_rectangle(p, x=0:1, y=0:1, label=\"A rectangle\") l_layer_getLabel(p, l)  l_layer_relabel(p, l, label=\"A relabelled rectangle\") l_layer_getLabel(p, l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show or unhide a Layer — l_layer_show","title":"Show or unhide a Layer — l_layer_show","text":"Hidden invisible layers rendered. function   unhides invisible layer rendered .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show or unhide a Layer — l_layer_show","text":"","code":"l_layer_show(widget, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show or unhide a Layer — l_layer_show","text":"widget widget path layer object class 'l_layer' layer layer id. widget argument class 'l_layer' layer argument used","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show or unhide a Layer — l_layer_show","text":"0 success otherwise function throws error","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show or unhide a Layer — l_layer_show","text":"Visibile layers rendered, invisible ones .   ancestor layer set invisible layer rendered   either. layer visibility flag can checked   l_layer_isVisible actual visibility (.e.   ancesters visibile ) can checked   l_layer_layerVisibility. Note layer visibility state layer ,   instead information part layer collection (.e.   parent widget).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show or unhide a Layer — l_layer_show","text":"","code":"if(interactive()){  p <- l_plot()  l <- l_layer_rectangle(p, x=0:1, y=0:1, color=\"steelblue\") l_layer_hide(p, l)  l_layer_show(p, l)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a smooth line for loon — l_layer_smooth","title":"Layer a smooth line for loon — l_layer_smooth","text":"Display smooth line layer","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a smooth line for loon — l_layer_smooth","text":"","code":"l_layer_smooth(   widget,   x = NULL,   y = NULL,   method = \"loess\",   group = \"\",   formula = y ~ x,   interval = c(\"none\", \"confidence\", \"prediction\"),   n = 80,   span = 0.75,   level = 0.95,   methodArgs = list(),   linecolor = \"steelblue\",   linewidth = 2,   linedash = \"\",   confidenceIntervalArgs = list(linecolor = \"gray80\", linewidth = 4, linedash = \"\"),   predictionIntervalArgs = list(linecolor = \"gray50\", linewidth = 3, linedash = 1),   label = \"smooth\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a smooth line for loon — l_layer_smooth","text":"widget widget path name string x x coordinates line. provided, x inherited widget y y coordinates line. provided, y inherited widget method Smoothing method (function) use, accepts either character vector, e.g. \"lm\", \"glm\", \"loess\" function, e.g. MASS::rlm mgcv::gam, stats::lm, stats::loess. group Data can grouped n dimensional aesthetics attributes, e.g. \"color\", \"size\". addition, length n vector data.frame accommodated. formula Formula use smoothing function, eg. y ~ x, y ~ poly(x, 2), y ~ log(x) interval type interval, \"none\", \"confidence\" \"prediction\" (glm) n Number points evaluate smoother. span Controls amount smoothing default loess smoother. Smaller numbers produce wigglier lines, larger numbers produce smoother lines. level Level confidence interval use (0.95 default). methodArgs List additional arguments passed modelling function defined method. linecolor fitted line color. linewidth fitted line width linedash fitted line dash confidenceIntervalArgs line color, width dash confidence interval predictionIntervalArgs line color, width dash prediction interval label label used layers inspector parent group layer index index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a smooth line for loon — l_layer_smooth","text":"","code":"if(interactive()) { # loess fit p <- l_plot(iris, color = iris$Species) l1 <- l_layer_smooth(p, interval = \"confidence\") l_layer_hide(l1)  # the fits are grouped by points color l2 <- l_layer_smooth(p, group = \"color\",                      method = \"lm\")  # so far, all intervals are hidden ls <- l_layer_getChildren(l2) intervals <- l_layer_getChildren(l_create_handle(c(p,ls[3]))) ci <- l_create_handle(c(p,intervals[3])) l_layer_show(ci) # show prediction interval pi <- l_create_handle(c(p,intervals[2])) l_layer_show(pi) # hide all l_layer_hide(l2)  # Draw a fitted line based on a new data set shortSepalLength <- (iris$Sepal.Length < 5) l3 <- l_layer_smooth(p,                      x = iris$Sepal.Length[shortSepalLength],                      y = iris$Sepal.Width[shortSepalLength],                      method = \"lm\",                      linecolor = \"firebrick\",                      interval = \"prediction\") l_layer_hide(l3)  if(require(mgcv)) {   # a full tensor product smooth   ## linecolor is the same with the points color   l4 <- l_layer_smooth(p,                        method = \"gam\",                        formula = y~te(x))   l_layer_hide(l4) }  # facets fp <- l_facet(p, by = iris$Species, inheritLayers = FALSE) l5 <- l_layer_smooth(fp, method = \"lm\")  # generalized linear model if(require(\"loon.data\")) {   data(\"SAheart\")   # logit regression   chd <- as.numeric(SAheart$chd) - 1   age <- SAheart$age   p1 <- l_plot(age, chd,                title = \"logit regression\")   gl1 <- l_layer_smooth(p1,                         method = \"glm\",                         methodArgs = list(family = binomial()),                         interval = \"conf\")    # log linear regression   counts <- c(18,17,15,20,10,20,25,13,12)   age <- c(40,35,53,46,20,33,48,25,23)   p2 <- l_plot(age, counts,                title = \"log-linear regression\")   gl2 <- l_layer_smooth(p2,                         method = \"glm\",                         methodArgs = list(family = poisson()),                         interval = \"conf\") } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer a text — l_layer_text","title":"Layer a text — l_layer_text","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles. layer single character string","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer a text — l_layer_text","text":"","code":"l_layer_text(   widget,   x,   y,   text,   color = \"gray60\",   size = 6,   angle = 0,   label = \"text\",   parent = \"root\",   index = 0,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer a text — l_layer_text","text":"widget widget path name string x coordinate y coordinate text character string color color text size size font angle rotation text label label used layers inspector parent group layer index newly added layer parent group ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer a text — l_layer_text","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer a text — l_layer_text","text":"side effect Tcl's text-based design, best   use l_layer_text one like layer single character   string (l_layer_texts n=1). information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer a text — l_layer_text","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_text(p, 0, 0, \"Hello World\")  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer texts — l_layer_texts","title":"Layer texts — l_layer_texts","text":"Loon's displays based Cartesian coordinates (.e.   scatterplot, histogram graph display) allow layering visual   information including polygons, text rectangles. Layer vector character strings.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer texts — l_layer_texts","text":"","code":"l_layer_texts(   widget,   x,   y,   text,   color = \"gray60\",   size = 6,   angle = 0,   anchor = \"center\",   justify = \"center\",   label = \"texts\",   parent = \"root\",   index = 0,   active = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer texts — l_layer_texts","text":"widget widget path name string x vector x coordinates y vector y coordinates text vector text strings color color text size font size angle text rotation anchor specifies information text displayed widget. Must one values c(\"n\", \"ne\", \"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\", \"center\"). example, \"nw\" means display information top-left corner top-left corner widget. justify multiple lines text displayed widget, option determines lines line . Must one c(\"left\", \"center\", \"right\"). \"Left\" means lines' left edges line , \"center\" means lines' centers aligned, \"right\" means lines' right edges line . label label used layers inspector parent group layer index newly added layer parent group active logical determining whether objects appear (default TRUE ). ... additional state initialization arguments, see l_info_states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer texts — l_layer_texts","text":"layer object handle, layer id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer texts — l_layer_texts","text":"side effect Tcl's text-based design, best   use l_layer_text one like layer single character   string (l_layer_texts n=1). information run: l_help(\"learn_R_layer\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layer_texts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer texts — l_layer_texts","text":"","code":"if(interactive()){  p <- l_plot() l <- l_layer_texts(p, x=1:3, y=3:1, text=c(\"This is\", \"a\", \"test\"), size=20) l_scaleto_world(p) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layers_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Layers Inspector — l_layers_inspector","title":"Create a Layers Inspector — l_layers_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layers_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers Inspector — l_layers_inspector","text":"","code":"l_layers_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_layers_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers Inspector — l_layers_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_layers_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Layers Inspector — l_layers_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_layers_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Layers Inspector — l_layers_inspector","text":"","code":"if(interactive()){  i <- l_layers_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_loonWidgets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all active top level loon plots. — l_loonWidgets","title":"Get all active top level loon plots. — l_loonWidgets","text":"Loon's plots constructed TCL identified path string appearing window containing plot. plots saved variable, function look loon plots displayed return values list whose elements may assigned R variables.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loonWidgets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all active top level loon plots. — l_loonWidgets","text":"","code":"l_loonWidgets(pathTypes, inspector = FALSE)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_loonWidgets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all active top level loon plots. — l_loonWidgets","text":"pathTypes optional argument identifying collection path types returned (displayed). inspector whether return loon inspector widget must subset union l_basePaths() l_compoundPaths(). missing, l_basePaths() l_compoundPaths() returned.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loonWidgets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all active top level loon plots. — l_loonWidgets","text":"list whose elements named , contain values , loon plot widgets.  list can nested loon plots (like l_pairs) compound consist one base loon plot.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_loonWidgets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all active top level loon plots. — l_loonWidgets","text":"","code":"if(interactive()){ l_plot(iris) l_hist(iris) l_hist(mtcars) l_pairs(iris) # The following will not be loonWidgets (neither is the inspector) tt <- tktoplevel() tkpack(l1 <- tklabel(tt, text = \"Heave\"), l2<- tklabel(tt, text = \"Ho\")) # # This will return loon widgets corresponding to plots loonPlots <- l_loonWidgets() names(loonPlots) firstPlot <- loonPlots[[1]] firstPlot[\"color\"] <- \"red\" histograms <- l_loonWidgets(\"hist\") lapply(histograms,        FUN  = function(hist) {                 hist[\"binwidth\"] <- hist[\"binwidth\"]/2                 l_scaleto_world(hist)              }              ) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a loon inspector — l_loon_inspector","title":"Create a loon inspector — l_loon_inspector","text":"loon inspector singleton widget provids   overview view modify active plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a loon inspector — l_loon_inspector","text":"","code":"l_loon_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a loon inspector — l_loon_inspector","text":"parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . ... state arguments, see l_info_states.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a loon inspector — l_loon_inspector","text":"loon widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a loon inspector — l_loon_inspector","text":"information run: l_help(\"learn_R_display_inspectors\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_loon_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a loon inspector — l_loon_inspector","text":"","code":"if(interactive()){ i <- l_loon_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_make_glyphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","title":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","text":"Loon's primitive glyph types limited terms compound   shapes. function can create point glyph png   re-import tk img object used point glyphs loon. See   examples.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_make_glyphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","text":"","code":"l_make_glyphs(data, draw_fun, width = 50, height = 50, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_make_glyphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","text":"data list element contains data object used draw_fun draw_fun function draws glyph using R base graphics grid (including ggplot2 lattice) engine width width glyph pixel height height glyph pixel ... additional arguments passed png function Note: type allowed list.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_make_glyphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","text":"vector tk img object references","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_make_glyphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make arbitrary glyphs with R graphic devices — l_make_glyphs","text":"","code":"if(interactive()){  if (FALSE) { # \\dontrun{ if (requireNamespace(\"maps\", quietly = TRUE)) {   data(minority)   p <- l_plot(minority$long, minority$lat)    canada <- maps::map(\"world\",  \"Canada\", fill=TRUE, plot=FALSE)   l_map <- l_layer(p, canada, asSingleLayer=TRUE)   l_scaleto_world(p)    img <- l_make_glyphs(lapply(1:nrow(minority), function(i)minority[i,]), function(m) {       par(mar=c(1,1,1,1)*.5)       mat <- as.matrix(m[1,1:10]/max(m[1:10]))       barplot(height = mat,               beside = FALSE,               ylim = c(0,1),               axes= FALSE,               axisnames=FALSE)   }, width=120, height=120)    l_imageviewer(img)    g <- l_glyph_add_image(p, img, \"barplot\")   p['glyph'] <- g  }  ## with grid if (requireNamespace(\"grid\", quietly = TRUE)) {    li <- l_make_glyphs(runif(6), function(x) {       if(any(x>1 | x<0))           stop(\"out of range\")       grid::pushViewport(grid::plotViewport(grid::unit(c(1,1,1,1)*0, \"points\")))       grid::grid.rect(gp=grid::gpar(fill=NA))       grid::grid.rect(0, 0, height = grid::unit(x, \"npc\"), just = c(\"left\", \"bottom\"),                 gp=grid::gpar(col=NA, fill=\"steelblue\"))   })    l_imageviewer(li)    p <- l_plot(1:6)   g <- l_glyph_add_image(p, li, \"bars\")   p['glyph'] <- g }  } # }  ##  A more familiar example? ##  The periodic table  data(\"elements\", package = \"loon.data\")  # A draw function for each element draw_element_box <- function(symbol,                              name, number,                              mass_number,                              mass, col) {    if (missing(col)) col <- \"white\"    oldPar <-  par(bg = col, mar = rep(1, 4))     plot(NA, xlim = c(0,1), ylim = c(0, 1), axes=FALSE, ann = FALSE)    text(0.5, 0.6, labels = symbol, cex = 18)    text(0.15, 1, labels = number, cex = 6, adj= c(0.5,1))    text(0.5, 0.25, labels = name, cex = 6)    text(0.5, 0.11, labels = mass_number, cex = 3)    text(0.5, 0.01, labels = mass, cex = 3)    box()     par(oldPar)    }  # Get the categories colIDs <- paste(elements$Category, elements$Subcategory) # Get a loon palette function colFn <- color_loon() # Get colors identified with categories tableCols <- colFn(colIDs) # # A function to an element box image for each element.  make_element_boxes <- function(elements, cols, width = 500, height = 500) {    if (missing(cols)) cols <- rep(\"white\", nrow(elements))    listOfElements <- lapply(1:nrow(elements),                             FUN = function(i) {                                 list(vals = elements[i,],                                      col = cols[i])                             })    # glyphs created here    l_make_glyphs(listOfElements,                  draw_fun = function(element){                      x <- element$vals                      col <- element$col                      draw_element_box(symbol = x$Symbol,                                       name = x$Name,                                       number = x$Number,                                       mass_number = x$Mass_number,                                       mass = x$Mass,                                       col = col)                  },                  width = width,                  height = height)    }  # Construct the glyphs boxGlyphs <- make_element_boxes(elements, cols = tableCols)  # Get a couple of plots periodicTable <- l_plot(x = elements$x, y = elements$y,                         xlabel = \"\", ylabel = \"\",                         title = \"Periodic Table of the Elements\",                         linkingGroup = \"elements\",                         color = tableCols)  # Add the images as possible glyphs  bg <- l_glyph_add_image(periodicTable,                         images = boxGlyphs,                         label = \"Symbol boxes\")  # Set this to be the glyph periodicTable['glyph'] <- bg # # Get a second plot that shows the periodicity # # First some itemlabels elementLabels <- with(elements,                       paste(\"   \", Number, Symbol, \"\\n\",                             \"   \", Name, \"\\n\",                             \"   \", Mass                             )                       )  periodicPlot  <- l_plot(x = elements$Mass, y = elements$Density,                         xlabel = \"Mass\", ylabel = \"Density\",                         itemLabel = elementLabels,                         showItemLabels = TRUE,                         linkingGroup = \"elements\",                         color = tableCols)  # Add the images as possible glyphs to this plot as well  bg2 <- l_glyph_add_image(periodicPlot,                          images = boxGlyphs,                          label = \"Symbol boxes\")  # Could set this to be the glyph periodicPlot['glyph'] <- bg2   }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange Points or Nodes on a Grid — l_move_grid","title":"Arrange Points or Nodes on a Grid — l_move_grid","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange Points or Nodes on a Grid — l_move_grid","text":"","code":"l_move_grid(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange Points or Nodes on a Grid — l_move_grid","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arrange Points or Nodes on a Grid — l_move_grid","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_halign.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizontally Align Points or Nodes — l_move_halign","title":"Horizontally Align Points or Nodes — l_move_halign","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_halign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizontally Align Points or Nodes — l_move_halign","text":"","code":"l_move_halign(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_halign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizontally Align Points or Nodes — l_move_halign","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_halign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horizontally Align Points or Nodes — l_move_halign","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_hdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizontally Distribute Points or Nodes — l_move_hdist","title":"Horizontally Distribute Points or Nodes — l_move_hdist","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_hdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizontally Distribute Points or Nodes — l_move_hdist","text":"","code":"l_move_hdist(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_hdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizontally Distribute Points or Nodes — l_move_hdist","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_hdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horizontally Distribute Points or Nodes — l_move_hdist","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter Points Or Nodes — l_move_jitter","title":"Jitter Points Or Nodes — l_move_jitter","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_jitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter Points Or Nodes — l_move_jitter","text":"","code":"l_move_jitter(widget, which = \"selected\", factor = 1, amount = \"\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_jitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter Points Or Nodes — l_move_jitter","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point. factor numeric. amount numeric; positive, used amount (see ),     otherwise, = 0 default factor * z/50. Default (NULL): factor * d/5 d     smallest difference x values.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_jitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jitter Points Or Nodes — l_move_jitter","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Temporary Point or Node Locations to the x and y states — l_move_reset","title":"Reset Temporary Point or Node Locations to the x and y states — l_move_reset","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Temporary Point or Node Locations to the x and y states — l_move_reset","text":"","code":"l_move_reset(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset Temporary Point or Node Locations to the x and y states — l_move_reset","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset Temporary Point or Node Locations to the x and y states — l_move_reset","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_valign.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertically Align Points or Nodes — l_move_valign","title":"Vertically Align Points or Nodes — l_move_valign","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_valign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertically Align Points or Nodes — l_move_valign","text":"","code":"l_move_valign(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_valign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertically Align Points or Nodes — l_move_valign","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_valign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertically Align Points or Nodes — l_move_valign","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_vdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertically Distribute Points or Nodes — l_move_vdist","title":"Vertically Distribute Points or Nodes — l_move_vdist","text":"Scatterplot graph displays support interactive temporary   relocation single points (nodes graphs).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_vdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertically Distribute Points or Nodes — l_move_vdist","text":"","code":"l_move_vdist(widget, which = \"selected\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_vdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertically Distribute Points or Nodes — l_move_vdist","text":"widget plot graph widget handle widget path name either one 'selected', 'active', '', boolean vector value point.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_move_vdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertically Distribute Points or Nodes — l_move_vdist","text":"Moving points temporarily saves new point coordinates   states xTemp yTemp. dimension xTemp   yTemp either 0 n. xTemp   yTemp length 0 required   length n, scatterplot display coordinates instead   coordinates x y. Note points can also temporally relocated using mouse   keyboard gestures. , move single point node press   CTRL key wile dragging point. move selected points   press CTRL Shift keys dragging one   selected points. distributing points horizontally vertically, order remains   . distributing points horizontally vertically, order   remains . example, distribute point   horizontally vertically, resulting scatterplot plot   y ranks versus x ranks. correlation   plot Spearman's rho. arranging points grid,   spatial ordering preserved first determining grid size (.e.   x b b close numbers)   taking smallest values y direction   arrange x order first row, repeat   remaining points. Also note loon inspector also buttons temporary   points/nodes movements.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_nDimStateNames.html","id":null,"dir":"Reference","previous_headings":"","what":"N dimensional state names access — l_nDimStateNames","title":"N dimensional state names access — l_nDimStateNames","text":"Get n dimensional state names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_nDimStateNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"N dimensional state names access — l_nDimStateNames","text":"","code":"l_nDimStateNames(loon_plot)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_nDimStateNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"N dimensional state names access — l_nDimStateNames","text":"loon_plot loon widget class name loon plot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_nDimStateNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"N dimensional state names access — l_nDimStateNames","text":"","code":"if(interactive()){  p <- l_plot() l_nDimStateNames(p) l_nDimStateNames(\"l_plot\")  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"Creates navigation graph, graphswitch, navigator   geodesic2d context added, scatterplot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"","code":"l_navgraph(data, separator = \":\", graph = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"data data.frame numeric variables separator string separates variable names 2d graph nodes graph optional, graph loongraph object navigation graph. graph argument used 3d 4d transition graph complete transition graph added. ... arguments passed modify scatterplot plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"named list graph handle, plot handle,   graphswitch handle, navigator handle, context   handle.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"information run: l_help(\"learn_R_display_graph.html#l_navgraph\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore a dataset with the canonical 2d navigation graph setting — l_navgraph","text":"","code":"if(interactive()){  ng <- l_navgraph(oliveAcids, color=olive$Area) ng2 <- l_navgraph(oliveAcids, separator='-', color=olive$Area)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Navigator to a Graph — l_navigator_add","title":"Add a Navigator to a Graph — l_navigator_add","text":"turn graph navigation graph need add one   navigators. Navigator set states can queried   modified.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Navigator to a Graph — l_navigator_add","text":"","code":"l_navigator_add(   widget,   from = \"\",   to = \"\",   proportion = 0,   color = \"orange\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Navigator to a Graph — l_navigator_add","text":"widget graph widget position navigator graph defined states , proportion. states hold vectors node names graph. proportion state number including 0 1 defines far navigator last element first element . state can also empty string '' node go . Hence, concatenation define path graph. see descriptoin proportion see descriptoin color navigator ... named arguments passed modify navigator states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Navigator to a Graph — l_navigator_add","text":"navigator handle navigator id","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Navigator to a Graph — l_navigator_add","text":"information run: l_help(\"learn_R_display_graph.html#navigators\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Navigator — l_navigator_delete","title":"Delete a Navigator — l_navigator_delete","text":"Removes navigator graph widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Navigator — l_navigator_delete","text":"","code":"l_navigator_delete(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Navigator — l_navigator_delete","text":"widget graph widget id navigator handle navigator id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the Label of a Navigator — l_navigator_getLabel","title":"Query the Label of a Navigator — l_navigator_getLabel","text":"Returns label navigator","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the Label of a Navigator — l_navigator_getLabel","text":"","code":"l_navigator_getLabel(widget, id)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the Label of a Navigator — l_navigator_getLabel","text":"widget graph widget handle id navigator id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sequence of nodes of a navigator's current path — l_navigator_getPath","title":"Get the sequence of nodes of a navigator's current path — l_navigator_getPath","text":"Determines returns current path navigator.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sequence of nodes of a navigator's current path — l_navigator_getPath","text":"","code":"l_navigator_getPath(navigator)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sequence of nodes of a navigator's current path — l_navigator_getPath","text":"navigator navigator handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_getPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sequence of nodes of a navigator's current path — l_navigator_getPath","text":"vector node names current path navigator","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"List Navigators — l_navigator_ids","title":"List Navigators — l_navigator_ids","text":"Lists navigators belong graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Navigators — l_navigator_ids","text":"","code":"l_navigator_ids(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Navigators — l_navigator_ids","text":"widget graph widget","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the Label of a Navigator — l_navigator_relabel","title":"Modify the Label of a Navigator — l_navigator_relabel","text":"Change navigator label","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the Label of a Navigator — l_navigator_relabel","text":"","code":"l_navigator_relabel(widget, id, label)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the Label of a Navigator — l_navigator_relabel","text":"widget graph widget handle id navigator id label new label navigator","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_backward.html","id":null,"dir":"Reference","previous_headings":"","what":"Have the Navigator Walk Backward on the Current Path — l_navigator_walk_backward","title":"Have the Navigator Walk Backward on the Current Path — l_navigator_walk_backward","text":"Animate navigator walk path graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_backward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Have the Navigator Walk Backward on the Current Path — l_navigator_walk_backward","text":"","code":"l_navigator_walk_backward(navigator, to = \"\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_backward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Have the Navigator Walk Backward on the Current Path — l_navigator_walk_backward","text":"navigator navigator handle node name part active path backward navigator stop.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_backward.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Have the Navigator Walk Backward on the Current Path — l_navigator_walk_backward","text":"Note navigators states animationPause   animationProportionIncrement control animation speed.   , can stop animation clicking somewhere graph   display using mouse scroll wheel.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Have the Navigator Walk Forward on the Current Path — l_navigator_walk_forward","title":"Have the Navigator Walk Forward on the Current Path — l_navigator_walk_forward","text":"Animate navigator walk path graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Have the Navigator Walk Forward on the Current Path — l_navigator_walk_forward","text":"","code":"l_navigator_walk_forward(navigator, to = \"\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Have the Navigator Walk Forward on the Current Path — l_navigator_walk_forward","text":"navigator navigator handle node name part active path forward navigator stop.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_forward.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Have the Navigator Walk Forward on the Current Path — l_navigator_walk_forward","text":"Note navigators states animationPause   animationProportionIncrement control animation speed.   , can stop animation clicking somewhere graph   display using mouse scroll wheel.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Have the Navigator Walk a Path on the Graph — l_navigator_walk_path","title":"Have the Navigator Walk a Path on the Graph — l_navigator_walk_path","text":"Animate navigator walk path graph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Have the Navigator Walk a Path on the Graph — l_navigator_walk_path","text":"","code":"l_navigator_walk_path(navigator, path)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_navigator_walk_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Have the Navigator Walk a Path on the Graph — l_navigator_walk_path","text":"navigator navigator handle path vector node names host graph form valid path graph","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_nestedTclList2Rlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","title":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","text":"Helper function work R Tcl","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_nestedTclList2Rlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","text":"","code":"l_nestedTclList2Rlist(   tclobj,   transform = function(x) {      as.numeric(x)  } )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_nestedTclList2Rlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","text":"tclobj tcl object returned tcl .Tcl. transform function transfrom string output another data type","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_nestedTclList2Rlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","text":"nested R list","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_nestedTclList2Rlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Nested Tcl List to an R List — l_nestedTclList2Rlist","text":"","code":"tclobj <- .Tcl('set a {{1 2 3} {2 3 4 4} {3 5 3 3}}') l_nestedTclList2Rlist(tclobj) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 2 3 4 4 #>  #> [[3]] #> [1] 3 5 3 3 #>"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"Measures object matrix data.frame measures   (columns) variable pairs (rows) rownames two variates   separated separator","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"","code":"# Default S3 method l_ng_plots(measures, data, separator = \":\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"measures matrix data.frame measures (columns) variable pairs (rows) rownames two variates separated separator data data frame scatterplot separator string separates variable pair string individual variables ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"information run: l_help(\"learn_R_display_graph.html#l_ng_plots\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select 2d spaces with variable associated measures displayed in scatterplot matrix — l_ng_plots.default","text":"","code":"if(interactive()){  if (FALSE) { # \\dontrun{ n <- 100 dat <- data.frame(    A = rnorm(n), B = rnorm(n), C = rnorm(n),    D = rnorm(n), E = rnorm(n) ) m2d <- data.frame(     cov = with(dat, c(cov(A,B), cov(A,C), cov(B,D), cov(D,E), cov(A,E))),     measure_1 = c(1, 3, 2, 1, 4),     row.names = c('A:B', 'A:C', 'B:D', 'D:E', 'A:E') )  # or m2d <- as.matrix(m2d)  nav <- l_ng_plots(measures=m2d, data=dat)  # only one measure m <- m2d[,1] names(m) <- row.names(m2d) nav <- l_ng_plots(measures=m, data=dat)  m2d[c(1,2),1]  # one d measures m1d <- data.frame(      mean = sapply(dat, mean),      median =  sapply(dat, median),      sd =  sapply(dat, sd),      q1 = sapply(dat, function(x)quantile(x, probs=0.25)),      q3 = sapply(dat, function(x)quantile(x, probs=0.75)),      row.names = names(dat) )  nav <- l_ng_plots(m1d, dat)  ## more involved q1 <- function(x)as.vector(quantile(x, probs=0.25))  # be careful that the vector names are correct nav <- l_ng_plots(sapply(oliveAcids, q1), oliveAcids) } # }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"2d navigation graph setup with with dynamic node fitering using a scatterplot matrix — l_ng_plots","title":"2d navigation graph setup with with dynamic node fitering using a scatterplot matrix — l_ng_plots","text":"Generic function create navigation graph environment   user can filter graph nodes selecting 2d spaces based 2d measures   displayed scatterplot matrix.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d navigation graph setup with with dynamic node fitering using a scatterplot matrix — l_ng_plots","text":"","code":"l_ng_plots(measures, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d navigation graph setup with with dynamic node fitering using a scatterplot matrix — l_ng_plots","text":"measures object measures stored ... argument passed methods","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2d navigation graph setup with with dynamic node fitering using a scatterplot matrix — l_ng_plots","text":"information run: l_help(\"learn_R_display_graph.html#l_ng_plots\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":null,"dir":"Reference","previous_headings":"","what":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"Measures object class measures. using measure objects   measures can dynamically re-calculated subset   data.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"","code":"# S3 method for class 'measures' l_ng_plots(measures, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"measures object class measures, see measures1d, measures2d. ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"Note provide scagnostics2d function   create measures object scagnostics measures. information run: l_help(\"learn_R_display_graph.html#l_ng_plots\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2d Navigation Graph Setup with dynamic node fitering using a scatterplot matrix — l_ng_plots.measures","text":"","code":"if(interactive()){  if (FALSE) { # \\dontrun{ # 2d measures scags <- scagnostics2d(oliveAcids, separator='**') scags() ng <- l_ng_plots(scags, color=olive$Area)  # 1d measures scale01 <- function(x){(x-min(x))/diff(range(x))} m1d <- measures1d(sapply(iris[,-5], scale01),      mean=mean, median=median, sd=sd,      q1=function(x)as.vector(quantile(x, probs=0.25)),      q3=function(x)as.vector(quantile(x, probs=0.75)))  m1d()  nav <- l_ng_plots(m1d, color=iris$Species)  # with only one measure nav <- l_ng_plots(measures1d(oliveAcids, sd))  # with two measures nav <- l_ng_plots(measures1d(oliveAcids, sd=sd, mean=mean)) } # }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.scagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","text":"method useful working objects   scagnostics function scagnostics R   package. order dynamically re-calcultate scagnostic measures   subset data use scagnostics2d measures creature   function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.scagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","text":"","code":"# S3 method for class 'scagnostics' l_ng_plots(measures, data, separator = \":\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.scagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","text":"measures objects scagnostics function scagnostics R package data data frame scatterplot separator string separates variable pair string individual variables ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.scagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_plots.scagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and by using a scatterplot matrix — l_ng_plots.scagnostics","text":"","code":"if(interactive()){  if (FALSE) { # \\dontrun{ library(scagnostics)   scags <- scagnostics::scagnostics(oliveAcids)   l_ng_plots(scags, oliveAcids, color=olive$Area) } # }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"Measures object matrix data.frame measures   (columns) variable pairs (rows) rownames two variates   separated separator","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"","code":"# Default S3 method l_ng_ranges(measures, data, separator = \":\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"measures matrix data.frame measures (columns) variable pairs (rows) rownames two variates separated separator data data frame scatterplot separator string separates variable pair string individual variables ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"information run: l_help(\"learn_R_display_graph.html#l_ng_ranges\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select 2d spaces with variable associated measures using a slider — l_ng_ranges.default","text":"","code":"if (interactive()){  # Simple example with generated data n <- 100 dat <- data.frame(    A = rnorm(n), B = rnorm(n), C = rnorm(n),    D = rnorm(n), E = rnorm(n) ) m2d <- data.frame(     cor = with(dat, c(cor(A,B), cor(A,C), cor(B,D), cor(D,E), cor(A,E))),     my_measure = c(1, 3, 2, 1, 4),     row.names = c('A:B', 'A:C', 'B:D', 'D:E', 'A:E') )  # or m2d <- as.matrix(m2d)  nav <- l_ng_ranges(measures=m2d, data=dat)  # With 1d measures m1d <- data.frame(      mean = sapply(dat, mean),      median =  sapply(dat, median),      sd =  sapply(dat, sd),      q1 = sapply(dat, function(x)quantile(x, probs=0.25)),      q3 = sapply(dat, function(x)quantile(x, probs=0.75)),      row.names = names(dat) )  nav <- l_ng_ranges(m1d, dat)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"2d navigation graph setup with with dynamic node fitering using a slider — l_ng_ranges","title":"2d navigation graph setup with with dynamic node fitering using a slider — l_ng_ranges","text":"Generic function create navigation graph environment   user can filter graph nodes using slider select 2d spaces based 2d   measures.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d navigation graph setup with with dynamic node fitering using a slider — l_ng_ranges","text":"","code":"l_ng_ranges(measures, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d navigation graph setup with with dynamic node fitering using a slider — l_ng_ranges","text":"measures object measures stored ... argument passed methods","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2d navigation graph setup with with dynamic node fitering using a slider — l_ng_ranges","text":"information run: l_help(\"learn_R_display_graph.html#l_ng_ranges\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":null,"dir":"Reference","previous_headings":"","what":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"Measures object class measures. using measure objects   measures can dynamically re-calculated subset   data.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"","code":"# S3 method for class 'measures' l_ng_ranges(measures, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"measures object class measures, see measures1d, measures2d. ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"Note provide scagnostics2d function   create measures object scagnostics measures. information run: l_help(\"learn_R_display_graph.html#l_ng_ranges\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2d Navigation Graph Setup with dynamic node fitering using a slider — l_ng_ranges.measures","text":"","code":"if (interactive()){  # 2d measures # s <- scagnostics2d(oliveAcids) # nav <- l_ng_ranges(s, color=olive$Area)  # 1d measures scale01 <- function(x){(x-min(x))/diff(range(x))} m1d <- measures1d(sapply(iris[,-5], scale01),      mean=mean, median=median, sd=sd,      q1=function(x)as.vector(quantile(x, probs=0.25)),      q3=function(x)as.vector(quantile(x, probs=0.75)))  m1d()  nav <- l_ng_ranges(m1d, color=iris$Species)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"method useful working objects   scagnostics function scagnostics R   package. order dynamically re-calcultate scagnostic measures   subset data use scagnostics2d measures creature   function.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"","code":"# S3 method for class 'scagnostics' l_ng_ranges(measures, data, separator = \":\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"measures objects scagnostics function scagnostics R package data data frame scatterplot separator string separates variable pair string individual variables ... arguments passed configure scatterplot","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"named list plots-, graph-, plot-, navigator-, context   handle. list also contains environment function call   env.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"information run: l_help(\"learn_R_display_graph.html#l_ng_ranges\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_ng_ranges.scagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2d Navigation Graph Setup with dynamic node fitering based on scagnostic measures and using a slider — l_ng_ranges.scagnostics","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"scagnostics\", quietly = TRUE)) {   s <- scagnostics::scagnostics(oliveAcids)   ng <- l_ng_ranges(s, oliveAcids, color=olive$Area) } } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"An interactive scatterplot matrix — l_pairs","title":"An interactive scatterplot matrix — l_pairs","text":"Function creates scatterplot matrix using loon's scatterplot   widgets","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An interactive scatterplot matrix — l_pairs","text":"","code":"l_pairs(   data,   connectedScales = c(\"cross\", \"none\"),   linkingGroup,   linkingKey,   showItemLabels = TRUE,   itemLabel,   showHistograms = FALSE,   histLocation = c(\"edge\", \"diag\"),   histHeightProp = 1,   histArgs = list(),   showSerialAxes = FALSE,   serialAxesArgs = list(),   parent = NULL,   plotWidth = 100,   plotHeight = 100,   span = 10L,   showProgressBar = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An interactive scatterplot matrix — l_pairs","text":"data data.frame numerical data create scatterplot matrix connectedScales Determines scales panels connected. \"cross\": scales row column connected; \"none\": neither \"x\" \"y\" scales connected panels. linkingGroup string giving linkingGroup plots. missing, default linkingGroup determined deparsing data. linkingKey vector strings provide linking identity row data data.frame.  missing, default linkingKey 0:(nrows(data)-1). showItemLabels TRUE, logical indicating whether itemLabel pops point mouse hovers . itemLabel vector strings used pop information mouse hovers point.  missing, default itemLabel row.names(data). showHistograms logical (default FALSE) show histograms variable histLocation one \"edge\" \"diag\", showHistograms = TRUE histHeightProp positive number giving height histograms proportion height scatterplots histArgs additional arguments modify `l_hist` states showSerialAxes logical (default FALSE) indication whether show serial axes plot bottom left pairs plot () serialAxesArgs additional arguments modify `l_serialaxes` states parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . plotWidth default plot width (pixel) plotHeight default plot height (pixel) span many column/row occupies widget showProgressBar Logical; show progress bar ... named arguments modify `l_plot` states scatterplots","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An interactive scatterplot matrix — l_pairs","text":"`l_pairs` object (`l_compound` object), list named elements, representing separate interactive plot. names plots self explanatory list plots can accessed `l_pairs` object via `l_getPlots()`. plots linked default (name taken data set provided). Panning zooming constrained work together within scatterplot matrix (histograms).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An interactive scatterplot matrix — l_pairs","text":"","code":"if(interactive()){  p <- l_pairs(iris[,-5], color=iris$Species, linkingGroup = \"iris\")  p <- l_pairs(iris[,-5], color=iris$Species, linkingGroup = \"iris\",              showHistograms = TRUE, showSerialAxes = TRUE) # plot names names(p)  # Each plot must be accessed to make changes not managed through # linking. # E.g. to change the glyph on all scatterplots to open circles for (plot in l_getPlots(p)) {       if (is(plot, \"l_plot\")) {           plot[\"glyph\"] <- \"ocircle\"} }  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive loon plot widget — l_plot","title":"Create an interactive loon plot widget — l_plot","text":"l_plot generic function creating interactive   visualization environments R objects.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive loon plot widget — l_plot","text":"","code":"l_plot(x, y, ...)  # Default S3 method l_plot(   x,   y = NULL,   by = NULL,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   connectedScales = c(\"cross\", \"row\", \"column\", \"both\", \"x\", \"y\", \"none\"),   color = l_getOption(\"color\"),   glyph = l_getOption(\"glyph\"),   size = l_getOption(\"size\"),   active = TRUE,   selected = FALSE,   xlabel,   ylabel,   title,   showLabels = TRUE,   showScales = FALSE,   showGuides = TRUE,   guidelines = l_getOption(\"guidelines\"),   guidesBackground = l_getOption(\"guidesBackground\"),   foreground = l_getOption(\"foreground\"),   background = l_getOption(\"background\"),   parent = NULL,   ... )  # S3 method for class 'decomposed.ts' l_plot(   x,   y = NULL,   xlabel = NULL,   ylabel = NULL,   title = NULL,   tk_title = NULL,   color = l_getOption(\"color\"),   size = l_getOption(\"size\"),   linecolor = l_getOption(\"color\"),   linewidth = l_getOption(\"linewidth\"),   linkingGroup,   showScales = TRUE,   showGuides = TRUE,   showLabels = TRUE,   ... )  # S3 method for class 'density' l_plot(   x,   y = NULL,   xlabel = NULL,   ylabel = NULL,   title = NULL,   linewidth = l_getOption(\"linewidth\"),   linecolor = l_getOption(\"color\"),   ... )  # S3 method for class 'map' l_plot(x, y = NULL, ...)  # S3 method for class 'stl' l_plot(   x,   y = NULL,   xlabel = NULL,   ylabel = NULL,   title = NULL,   tk_title = NULL,   color = l_getOption(\"color\"),   size = l_getOption(\"size\"),   linecolor = l_getOption(\"color\"),   linewidth = l_getOption(\"linewidth\"),   linkingGroup,   showScales = TRUE,   showGuides = TRUE,   showLabels = TRUE,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive loon plot widget — l_plot","text":"x coordinates points l_plot. Alternatively, single plotting structure (see function xy.coords details), formula, R object (e.g. density,stl, etc) accommodated. y y coordinates points l_plot, optional x appropriate structure. ... named arguments modify plot states. See l_info_states instantiated l_plot examples names values. loon plot can separated variables multiple panels. argument can take formula, n dimensional state names (see l_nDimStateNames) n-dimensional vector data.frame list lengths n input. x formula, optional data frame containing variables x . variables found data, taken environment, typically environment function called. layout layout facets 'grid', 'wrap' 'separate' connectedScales Determines scales facets connected depending layout used.  value layout, scales connected follows: layout = \"wrap\":  Across facets, connectedScales \"x\",  \"x\"  scales connected \"y\", \"y\" scales connected \"\",  \"x\" \"y\" scales connected \"none\",  neither \"x\" \"y\" scales connected.    value, \"y\" scale connected. layout = \"grid\":  Across facets, connectedScales \"cross\", scales row column connected \"row\", \"x\" \"y\" scales facets row connected \"column\", \"x\" \"y\" scales facets column connected \"x\", \"x\"  scales connected (regardless column) \"y\", \"y\" scales connected (regardless row) \"\",  \"x\" \"y\" scales connected facets \"none\",  neither \"x\" \"y\" scales connected facets. color colours points; colours repeated matching number points. Default found using l_getOption(\"color\"). glyph visual representation point. Argument values can string names primitive glyphs: circles: \"circle\", \"ccircle\", \"ocircle\"; squares boxes: \"square\", \"csquare\", \"osquare\"; triangles: \"triangle\", \"ctriangle\", \"otriangle\"; diamonds: \"diamond\", \"cdiamond\", \"odiamond\". string names constructed glyphs: text glyphs: see l_glyph_add_text() point ranges: see l_glyph_add_pointrange() polygons: see l_glyph_add_polygon() parallel coordinates: see l_glyph_add_serialaxes() star radial axes: see l_glyph_add_serialaxes() plot created using R: see l_make_glyphs() size size symbol (roughly terms area). Default found using l_getOption(\"size\"). active logical determining whether points appear (default TRUE points). logical vector given length equal number points, identifies points appear (TRUE) (FALSE). selected logical determining whether points appear selected first (default FALSE points). logical vector given length equal number points, identifies points (TRUE) (FALSE). xlabel Label horizontal (x) axis. missing, one inferred x possible. ylabel Label vertical (y) axis. missing, one inferred y (x) possible. title Title plot, default empty string. showLabels logical determine whether axes label (title) presented. showScales logical determine whether numerical scales presented axes. showGuides logical determine whether present background guidelines help determine locations. guidelines colour guidelines shown showGuides = TRUE. Default found using l_getOption(\"guidelines\"). guidesBackground colour background guidelines shown showGuides = TRUE. Default found using l_getOption(\"guidesBackground\"). foreground foreground colour used drawing. Default found using l_getOption(\"foreground\"). background background colour used plot. Default found using l_getOption(\"background\"). parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples . tk_title provides alternative window name Tk's wm title. NULL, stl used. linecolor line colour time series. Default given l_getOption(\"color\"). linewidth line width time series (incl. original decomposed components. Default given l_getOption(\"linewidth\"). linkingGroup string giving linkingGroup plots. missing, default linkingGroup determined deparsing input x.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive loon plot widget — l_plot","text":"input stl decomposed.ts object, structure class \"l_ts\" containing four loon plots representing part decomposition name: \"original\", \"trend\", \"seasonal\", \"remainder\" input vector, formula, data.frame, ... = NULL: loon widget returned NULL: l_facet object (list) returned element loon widget displaying subset interest.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an interactive loon plot widget — l_plot","text":"Like plot R, l_plot generic plotting function objects loon. default method l_plot.default produces interactive scatterplot loon. workhorse `loon` often key part many displays (e.g. l_pairs l_navgraph). example,  methods include l_plot.default (basic interactive scatterplot), l_plot.density (layers output density empty scatterplot),  l_plot.map (layers map empty scatterplot), l_plot.stl (compound display output stl). complete list methods(l_plot).  general direct manipulation interaction gestures   outlined following figures. Zooming Panning  Selecting Points/Objects  Moving Points Scatterplot Display  scatterplot displays number direct interactions mouse keyboard, include: zooming towards mouse cursor using mouse wheel, panning right-click dragging various selection methods using left mouse button sweeping, brushing individual point selection. See documentation l_plot details interaction gestures. arguments modify layouts can passed , e.g. \"separate\", \"ncol\", \"nrow\", etc. Check l_facet see arguments work.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive loon plot widget — l_plot","text":"","code":"if(interactive()) { ########################## l_plot.default ########################## # default use as scatterplot  p1 <- with(iris, l_plot(Sepal.Length, Sepal.Width, color=Species,                         title = \"First plot\"))  # The names of the info states that can be # accessed or set.  They can also be given values as # arguments to l_plot.default() names(p1) p1[\"size\"] <- 10  p2 <- with(iris, l_plot(Petal.Length ~ Petal.Width,                         linkingGroup=\"iris_data\",                         title = \"Second plot\",                         showGuides = FALSE)) p2[\"showScales\"] <- TRUE  # link first plot with the second plot requires # l_configure to coordinate the synchroniztion l_configure(p1, linkingGroup = \"iris_data\", sync = \"push\")  p1['selected'] <- iris$Species == \"versicolor\" p2[\"glyph\"][p1['selected']] <- \"cdiamond\"  gridExtra::grid.arrange(loonGrob(p1), loonGrob(p2), nrow = 1)  # Layout facets ### facet wrap p3 <- with(mtcars, l_plot(wt, mpg, by = cyl, layout = \"wrap\")) # it is equivalent to # p3 <- l_plot(mpg~wt, by = ~cyl, layout = \"wrap\", on = mtcars)  ### facet grid p4 <- l_plot(x = 1:6, y = 1:6,              by = size ~ color,              size = c(rep(50, 2), rep(25, 2), rep(50, 2)),              color = c(rep(\"red\", 3), rep(\"green\", 3)))  # Use with other tk widgets tt <- tktoplevel() tktitle(tt) <- \"Loon plots with custom layout\"  p1 <- l_plot(parent=tt, x=c(1,2,3), y=c(3,2,1)) p2 <- l_plot(parent=tt, x=c(4,3,1), y=c(6,8,4))  tkgrid(p1, row=0, column=0, sticky=\"nesw\") tkgrid(p2, row=0, column=1, sticky=\"nesw\")  tkgrid.columnconfigure(tt, 0, weight=1) tkgrid.columnconfigure(tt, 1, weight=1)  tkgrid.rowconfigure(tt, 0, weight=1) ########################## l_plot.decomposed.ts ########################## decompose <- decompose(co2) p <- l_plot(decompose, title = \"Atmospheric carbon dioxide over Mauna Loa\") # names of plots in the display names(p) # names of states associated with the seasonality plot names(p$seasonal) # which can be set p$seasonal['color'] <- \"steelblue\"  ########################## l_plot.stl ########################## co2_stl <- stl(co2, \"per\") p <- l_plot(co2_stl, title = \"Atmospheric carbon dioxide over Mauna Loa\") # names of plots in the display names(p) # names of states associated with the seasonality plot names(p$seasonal) # which can be set p$seasonal['color'] <- \"steelblue\" ########################## l_plot.density ########################## # plot a density estimate set.seed(314159) ds <- density(rnorm(1000)) p <- l_plot(ds,  title = \"density estimate\",             xlabel = \"x\", ylabel = \"density\",             showScales = TRUE)  ########################## l_plot.map ########################## if (requireNamespace(\"maps\", quietly = TRUE)) {    p <- l_plot(maps::map('world', fill=TRUE, plot=FALSE)) } }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive loon 3d plot widget — l_plot3D","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"l_plot3D generic function creating interactive   visualization environments R objects.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"","code":"l_plot3D(x, y, z, ...)  # Default S3 method l_plot3D(   x,   y = NULL,   z = NULL,   axisScaleFactor = 1,   by = NULL,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   connectedScales = c(\"cross\", \"row\", \"column\", \"both\", \"x\", \"y\", \"none\"),   color = l_getOption(\"color\"),   glyph = l_getOption(\"glyph\"),   size = l_getOption(\"size\"),   active = TRUE,   selected = FALSE,   xlabel,   ylabel,   zlabel,   title,   showLabels = TRUE,   showScales = FALSE,   showGuides = TRUE,   guidelines = l_getOption(\"guidelines\"),   guidesBackground = l_getOption(\"guidesBackground\"),   foreground = l_getOption(\"foreground\"),   background = l_getOption(\"background\"),   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"x x, y z arguments provide x, y z coordinates plot.          reasonable way defining coordinates acceptable.          See function xyz.coords details. supplied separately, must length. y y coordinates points plot, optional x appropriate structure. z z coordinates points plot, optional x appropriate structure. ... named arguments modify plot states. axisScaleFactor amount scale axes centre rotation. Default 1.     numerical values acceptable (0 removes axes, < 0 inverts direction     axes.) loon plot can separated variables multiple panels. argument can take formula, n dimensional state names (see l_nDimStateNames) n-dimensional vector data.frame list lengths n input. x formula, optional data frame containing variables x . variables found data, taken environment, typically environment function called. layout layout facets 'grid', 'wrap' 'separate' connectedScales Determines scales facets connected depending layout used.  value layout, scales connected follows: layout = \"wrap\":  Across facets, connectedScales \"x\",  \"x\"  scales connected \"y\", \"y\" scales connected \"\",  \"x\" \"y\" scales connected \"none\",  neither \"x\" \"y\" scales connected.    value, \"y\" scale connected. layout = \"grid\":  Across facets, connectedScales \"cross\", scales row column connected \"row\", \"x\" \"y\" scales facets row connected \"column\", \"x\" \"y\" scales facets column connected \"x\", \"x\"  scales connected (regardless column) \"y\", \"y\" scales connected (regardless row) \"\",  \"x\" \"y\" scales connected facets \"none\",  neither \"x\" \"y\" scales connected facets. color colours points; colours repeated matching number points. Default found using l_getOption(\"color\"). glyph visual representation point. Argument values can string names primitive glyphs: circles: \"circle\", \"ccircle\", \"ocircle\"; squares boxes: \"square\", \"csquare\", \"osquare\"; triangles: \"triangle\", \"ctriangle\", \"otriangle\"; diamonds: \"diamond\", \"cdiamond\", \"odiamond\". string names constructed glyphs: text glyphs: see l_glyph_add_text() point ranges: see l_glyph_add_pointrange() polygons: see l_glyph_add_polygon() parallel coordinates: see l_glyph_add_serialaxes() star radial axes: see l_glyph_add_serialaxes() plot created using R: see l_make_glyphs() size size symbol (roughly terms area). Default found using l_getOption(\"size\"). active logical determining whether points appear (default TRUE points). logical vector given length equal number points, identifies points appear (TRUE) (FALSE). selected logical determining whether points appear selected first (default FALSE points). logical vector given length equal number points, identifies points (TRUE) (FALSE). xlabel Label horizontal (x) axis. missing, one inferred x possible. ylabel Label vertical (y) axis. missing, one inferred y (x) possible. zlabel Label third (perpendicular screen) (z) axis. missing, one inferred z (x) possible. title Title plot, default empty string. showLabels logical determine whether axes label (title) presented. showScales logical determine whether numerical scales presented axes. showGuides logical determine whether present background guidelines help determine locations. guidelines colour guidelines shown showGuides = TRUE. Default found using l_getOption(\"guidelines\"). guidesBackground colour background guidelines shown showGuides = TRUE. Default found using l_getOption(\"guidesBackground\"). foreground foreground colour used drawing. Default found using l_getOption(\"foreground\"). background background colour used plot. Default found using l_getOption(\"background\"). parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"argument set, loon widget returned; else l_facet object (list) returned element loon widget displaying subset interest.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"general direct manipulation interaction gestures   outlined following figures. Rotating Press 'R' toggle rotation mode.   rotation mode active, either use mouse gestures arrow keys rotate plot.  centre rotation can changed panning plot.   reset rotation, use tripod icon plot inspector. Zooming Panning  Selecting Points/Objects  Moving Points Scatterplot Display  NOTE: Although possible programmatically add layers l_plot3D,   appear part 3D plot's display. provision present incorporate   rotation 3D geometric objects point glyphs. scatterplot displays number direct interactions   mouse keyboard, include: rotating, zooming towards mouse cursor using   mouse wheel, panning right-click dragging various selection   methods using left mouse button sweeping, brushing   individual point selection. See documentation l_plot3D   details interaction gestures.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive loon 3d plot widget — l_plot3D","text":"","code":"if(interactive()){  with(quakes,      l_plot3D(long, lat, depth, linkingGroup = \"quakes\") )   with(l_scale3D(quakes),      l_plot3D(long, lat, depth, linkingGroup = \"quakes\") )  scaled_quakes <- l_scale3D(quakes) with(scaled_quakes,      l_plot3D(long, lat, depth, linkingGroup = \"quakes\") )  with(scaled_quakes,      l_plot3D(mag, stations, depth, linkingGroup = \"quakes\") )  # Or together: with(scaled_quakes,{      l_plot3D(long, lat, depth, linkingGroup = \"quakes\")      l_plot3D(mag, stations, depth, linkingGroup = \"quakes\")      } )  } if(interactive()){  # default use as scatterplot  p1 <- with(quakes,            l_plot3D(long, lat, depth)            )  p2 <- with(quakes,            l_plot3D(mag, stations, depth)            )  # link the two plots p1 and p2 l_configure(p1, linkingGroup = \"quakes\", sync = \"push\") l_configure(p2, linkingGroup = \"quakes\", sync = \"push\")  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Arguments common to l_plot functions — l_plot_arguments","title":"Arguments common to l_plot functions — l_plot_arguments","text":"Like plot R, l_plot generic plotting function objects loon. workhorse loon often key part many displays (e.g. l_pairs l_navgraph) plots loon interactive, functions create many arguments common.  value arguments become `infostates` plot instantiated.  can accessed set using usual R square bracket operators `[]`  `[]<-` using statename string.  state names can found instantiated loon plot either via l_info_states() , keeping R programming style, via names() (uses method names.loon() loon objects). state names can passed arguments values l_plot() call. arguments many common ones desribed .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_arguments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arguments common to l_plot functions — l_plot_arguments","text":"interactive displays permit number direct interactions using     mouse keyboard, include: zooming towards mouse cursor using     mouse wheel, panning right-click dragging various selection     methods using left mouse button sweeping, brushing     individual point selection. See documentation l_plot     details interaction gestures.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arguments common to l_plot functions — l_plot_arguments","text":"x x y arguments provide x y coordinates plot.  reasonable way defining coordinates acceptable.  See function xy.coords details.  supplied separately, must length. y argument description x argument . loon plots can separated variables multiple panels. argument can take formula, n dimensional state names (see l_nDimStateNames) n-dimensional vector data.frame list lengths n input. x y formula, optional data frame containing variables x . variables found data, taken environment, typically environment function called. layout layout facets 'grid', 'wrap' 'separate' connectedScales Determines scales facets connected depending layout used. linkingGroup string naming group plots linked.     plots linkingGroup values     linked states (see l_getLinkedStates()     l_setLinkedStates()). linkingKey n-dimensional character vector unique entries.     entries identify points match points plots.     Default c(\"0\", \"1\", ..., \"n-1\") (numerical n). itemLabel n-dimensional character vector whose values     displayed pop-box point whenever mouse hovers     point (provided showItemLabels = TRUE). action commonly known providing \"tool tip\".     Note objects drawn layer plot (e.g. maps) itemLabel. showItemLabels logical (default FALSE) indicates     whether \"tool tip\" itemLabel displayed whenever     mouse hovers . color colours points (default \"grey60\"); colours repeated matching number points, glyph string names primitive glyphs: squares boxes \"square\", \"csquare\", \"osquare\", triangles \"triangle\", \"ctriangle\", \"otriangle\", diamonds \"diamond\", \"cdiamond\", \"odiamond\".  string names constructed glyphs text glyphs see l_glyph_add_text() point ranges see l_glyph_add_pointrange() polygons see l_glyph_add_polygon() parallel coordinates see l_glyph_add_serialaxes() star radial axes see l_glyph_add_serialaxes() plot created using R see l_make_glyphs()   size size symbol (roughly terms area) active logical determining whether points appear         (default TRUE points). logical vector given length         equal number points, identifies points appear (TRUE)         (FALSE). selected logical determining whether points appear selected first         (default FALSE points). logical vector given length         equal number points, identifies points (TRUE)         (FALSE). xlabel Label horizontal (x) axis. missing,         one inferred x possible. ylabel Label vertical (y) axis. missing,         one inferred y (x) possible. title Title plot, default empty string. minimumMargins minimal size (pixels) margins around plot (bottom, left, top, right) showLabels logical determine whether axes label (title)         presented. showScales logical determine whether numerical scales         presented axes. showGuides logical determine whether present background guidelines         help determine locations. guidelines colour guidelines shown showGuides = TRUE (default \"white\"). guidesBackground colour background guidelines shown         showGuides = TRUE (default \"grey92\"). foreground foreground colour used drawing (default \"black\"). background background colour used plot (default \"white\") parent valid Tk parent widget path. parent widget         specified (.e. NULL) plot widget needs placed using         geometry manager like tkpack tkplace         order displayed. See examples . ... named arguments modify plot states.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_arguments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arguments common to l_plot functions — l_plot_arguments","text":"","code":"if (FALSE) { # \\dontrun{     # default use as scatterplot      p1 <- with(iris, l_plot(x = Sepal.Length,                             y = Sepal.Width,                             color=Species,                             title = \"Sepal sizes\"))      # The names of the info states that can be     # accessed or set.  They can also be given values as     # arguments to l_plot.default()     names(p1)     versicolor <- (iris$Species == \"versicolor\")     p1[\"size\"] <- 10     p1[\"glyph\"][versicolor]<- \"csquare\"     p1[\"minimumMargins\"][1] <- 100   } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Scatterplot Inspector — l_plot_inspector","title":"Create a Scatterplot Inspector — l_plot_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Scatterplot Inspector — l_plot_inspector","text":"","code":"l_plot_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Scatterplot Inspector — l_plot_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Scatterplot Inspector — l_plot_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Scatterplot Inspector — l_plot_inspector","text":"","code":"if(interactive()){  i <- l_plot_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","title":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","text":"","code":"l_plot_inspector_analysis(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_inspector_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Scatterplot Analysis Inspector — l_plot_inspector_analysis","text":"","code":"if(interactive()){  i <- l_plot_inspector_analysis() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a decomposed time series loon plot — l_plot_ts","title":"Draw a decomposed time series loon plot — l_plot_ts","text":"l_plot_ts generic function creating decomposed time series plot. mainly used l_plot.decomposed.ts l_plot.stl","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a decomposed time series loon plot — l_plot_ts","text":"","code":"l_plot_ts(   x,   color = l_getOption(\"color\"),   size = l_getOption(\"size\"),   linecolor = l_getOption(\"color\"),   linewidth = l_getOption(\"linewidth\"),   xlabel = NULL,   ylabel = NULL,   title = NULL,   tk_title = NULL,   linkingGroup,   showScales = TRUE,   showGuides = TRUE,   showLabels = TRUE,   call = match.call(),   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a decomposed time series loon plot — l_plot_ts","text":"x Either stl object decomposed.ts object. color points colour time series. Default given l_getOption(\"color\"). size points size time series. Default given l_getOption(\"size\"). linecolor line colour time series. Default given l_getOption(\"color\"). linewidth line width time series (incl. original decomposed components. Default given l_getOption(\"linewidth\"). xlabel labels x axes.  length four character vector one : original time series, trend component, seasonality component, remainder. length 1, label repeated; NULL, xlabel \"time\". ylabel labels vertical axes.  length four character vector one : original time series, trend component, seasonality component, remainder. NULL, default, ylabel c(\"data\", \"trend\", \"seasonality\", \"remainder\"); character vector length 1, label repeated four times. title overall title entire display. NULL (default), title \"Seasonal Trend Analysis\". tk_title provides alternative window name Tk's wm title.  NULL, stl used. linkingGroup name linking group. missing, one created data name class associated stlOrDecomposedTS. showScales logical whether display scales axes, default TRUE. showGuides logical whether display background guide lines plots, default TRUE. showLabels logical whether display axes labels plots, default TRUE. call call specified arguments specified full names ... keyword value pairs passed l_plot() constructs loon scatterplot component.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_plot_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a decomposed time series loon plot — l_plot_ts","text":"structure class \"l_ts\" containing four loon plots representing part decomposition name: \"original\", \"trend\", \"seasonal\", \"remainder\".","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Prediction — l_predict","title":"Model Prediction — l_predict","text":"entirely purpose plotting fits intervals scatterplot (histogram). generic function predict models loon smooth layer (wrap function predict). However, output unified.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Prediction — l_predict","text":"","code":"l_predict(model, ...)  # Default S3 method l_predict(model, ...)  # S3 method for class 'lm' l_predict(   model,   newdata = NULL,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   ... )  # S3 method for class 'nls' l_predict(   model,   newdata = NULL,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   ... )  # S3 method for class 'glm' l_predict(   model,   newdata = NULL,   interval = c(\"none\", \"confidence\"),   level = 0.95,   ... )  # S3 method for class 'loess' l_predict(   model,   newdata = NULL,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Prediction — l_predict","text":"model model object prediction desired ... arguments passed predict newdata optionally, data frame look variables predict. omitted, fitted linear predictors used. interval type interval, \"none\", \"confidence\" \"prediction\" (glm) level confidence level","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Prediction — l_predict","text":"data frame returned x (newdata given) y. interval none, two columns, lower (lower interval) upper (upper interval) returned.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Prediction — l_predict","text":"","code":"y <- rnorm(10) x <- rnorm(10) model1 <- lm(y ~ x) # formal output pre <- l_predict(model1, newdata = data.frame(x = sort(x)),                  interval = \"conf\") head(pre) #>             x            y      lower     upper #> 1 -1.47615111 -0.193835067 -1.7666154 1.3789453 #> 2 -1.26047622 -0.159577084 -1.5549521 1.2357979 #> 3 -0.82054972 -0.089698785 -1.1650372 0.9856396 #> 4 -0.22545194  0.004827053 -0.8269545 0.8366086 #> 5 -0.11465603  0.022425969 -0.8035391 0.8483910 #> 6 -0.08441358  0.027229706 -0.7996783 0.8541377  if(interactive()) { p <- with(cars, l_plot(speed, dist))  # Example taken from # https://stackoverflow.com/questions/23852505/how-to-get-confidence-interval-for-smooth-spline # l_predict.smooth.spline <- function(model, interval = c(\"confidence\", \"none\"),                                     level = 0.95, ...) { # confidence interval of `smooth.spline`   interval <- match.arg(interval)    res <- (model$yin - model$y)/(1 - model$lev)     # jackknife residuals   sigma <- sqrt(var(res))                          # estimate sd   std <- stats::qnorm(level / 2 + 0.5)   upper <- model$y + std * sigma * sqrt(model$lev) # upper 95% conf. band   lower <- model$y - std * sigma * sqrt(model$lev) # lower 95% conf. band    data.frame(y = model$yin, lower = lower, upper = upper) } l <- l_layer_smooth(p, method = \"smooth.spline\", interval = \"confidence\") }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_primitiveGlyphs.html","id":null,"dir":"Reference","previous_headings":"","what":"The primitive glyphs available to a scatterplot or graph display — l_primitiveGlyphs","title":"The primitive glyphs available to a scatterplot or graph display — l_primitiveGlyphs","text":"Returns vector available primitive glyphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_primitiveGlyphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The primitive glyphs available to a scatterplot or graph display — l_primitiveGlyphs","text":"","code":"l_primitiveGlyphs()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_primitiveGlyphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The primitive glyphs available to a scatterplot or graph display — l_primitiveGlyphs","text":"character vector names primitive glyphs loon.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_primitiveGlyphs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The primitive glyphs available to a scatterplot or graph display — l_primitiveGlyphs","text":"scatterplot graph displays n-dimensional state   'glyph' assigns data point graph node glyph (.e. visual representation). Loon distinguishes primitive non-primitive glyphs: primitive glyphs always available use whereas non-primitive glyphs need first specified added plot can used. primitive glyphs :  information run: l_help(\"learn_R_display_plot.html#glyphs\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_redraw.html","id":null,"dir":"Reference","previous_headings":"","what":"Force a Content Redraw of a Plot — l_redraw","title":"Force a Content Redraw of a Plot — l_redraw","text":"Force redraw plot make sure visual elements   placed correctly.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_redraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force a Content Redraw of a Plot — l_redraw","text":"","code":"l_redraw(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_redraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force a Content Redraw of a Plot — l_redraw","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_redraw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Force a Content Redraw of a Plot — l_redraw","text":"Note function intended debugging. find   display display data according plot states   please contact loon's package maintainer.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_redraw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force a Content Redraw of a Plot — l_redraw","text":"","code":"if(interactive()){  p <- l_plot(iris) l_redraw(p)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_resize.html","id":null,"dir":"Reference","previous_headings":"","what":"Resize Plot Widget — l_resize","title":"Resize Plot Widget — l_resize","text":"Resizes toplevel widget specific size.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_resize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resize Plot Widget — l_resize","text":"","code":"l_resize(widget, width, height)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_resize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resize Plot Widget — l_resize","text":"widget widget path string object handle width width pixels height pixels","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_resize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resize Plot Widget — l_resize","text":"","code":"if(interactive()){  p <- l_plot(iris)  l_resize(p, 300, 300) l_size(p) <- c(500, 500)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_saveStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the info states of a loon plot widget in a file — l_saveStates","title":"Save the info states of a loon plot widget in a file — l_saveStates","text":"l_saveStates uses saveRDS() save info states loon plot R object named file. helpful, example, using RMarkdown notebooking facility recreate earlier saved loon plot present document.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_saveStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the info states of a loon plot widget in a file — l_saveStates","text":"","code":"l_saveStates(   p,   states = c(\"color\", \"active\", \"selected\", \"linkingKey\", \"linkingGroup\"),   file = stop(\"missing name of file\"),   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_saveStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the info states of a loon plot widget in a file — l_saveStates","text":"p `l_plot` object whose info states saved. states either logical `TRUE` character vector info states saved. Default value `c(\"color\", \"active\", \"selected\", \"linkingKey\", \"linkingGroup\")` consists `n` dimensional states common many `l_plot`s important reconstruct plot's display summary. `states` logical `TRUE`, `names(p)` saved. file string giving file name saved information' written (custom suggests file name end suffix `.rds`. ... arguments passed saveRDS().","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_saveStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the info states of a loon plot widget in a file — l_saveStates","text":"list class `l_savedStates` containing states values. Also attribute `l_plot_class` contains class vector plot `p`","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_saveStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the info states of a loon plot widget in a file — l_saveStates","text":"","code":"if(interactive()){ # # Suppose you have some plot that you created like p <- l_plot(iris, showGuides = TRUE) # # and coloured groups by hand (using the mouse and inspector) # so that you ended up with these colours: p[\"color\"] <- rep(c( \"lightgreen\", \"firebrick\",\"skyblue\"),                   each = 50) # # Having determined the colours you could save them (and other states) # in a file of your choice, here some tempfile: myFileName <- tempfile(\"myPlot\", fileext = \".rds\") # # Save the named states of p l_saveStates(p,              states = c(\"color\", \"active\", \"selected\"),              file = myFileName) # # These can later be retrieved and used on a new plot # (say in RMarkdown) to set the new plot's values to those # previously determined interactively. p_new <- l_plot(iris, showGuides = TRUE) p_saved_info <- l_getSavedStates(myFileName) # # We can tell what kind of plot was saved attr(p_saved_info, \"l_plot_class\") # # The result is a list of class \"l_savedStates\" which # contains the names of the p_new[\"color\"] <- p_saved_info$color # # The result is that p_new looks like p did # (after your interactive exploration) # and can now be plotted as part of the document plot(p_new) # # For compound plots, the info_states are saved for each plot pp <- l_pairs(iris) myPairsFile <- tempfile(\"myPairsPlot\", fileext = \".rds\") # # Save the names states of pp l_saveStates(pp,              states = c(\"color\", \"active\", \"selected\"),              file = myPairsFile) pairs_info <-  l_getSavedStates(myPairsFile) # # For compound plots, the info states for all constitutent # plots are saved.  The result is a list of class \"l_savedStates\" # whose elements are the named plots as \"l_savedStates\" # themselves. # # The names of the plots which were saved names(pairs_info) # # And the names of the info states whose values were saved for # the first plot names(pairs_info$x2y1) # # While it is generally recommended to access (or assign) saved # state values using the $ sign accessor, paying attention to the # nested list structure of an \"l_savedStates\" object (especially for # l_compound plots), R's square bracket notation [] has also been # specialized to allow a syntactically simpler (but less precise) # access to the contents of an l_savedStates object. # # For example, p_saved_info[\"color\"] # # returns the saved \"color\" as a vector of colours. # # In contrast, pairs_info[\"x2y1\"] # returns the l_savedStates object of the states of the plot named \"x2y1\", # but pairs_info[\"color\"] # returns a LIST of colour vectors, by plot as they were named in pairs_info # # As a consequence, the following two are equivalent, pairs_info[\"x2y1\"][\"color\"] # finds the value of \"color\" from an \"l_savedStates\" object # whereas pairs_info[\"color\"][[\"x2y1\"]] # finds the value of \"x2y1\" from a \"list\" object # # Also, setting a state of an \"l_savedStates\" is possible # (though not generally recommended; better to save the states again) # p_saved_info[\"color\"] <- rep(\"red\", 150) # changes the saved state \"color\" on p_saved_info # whereas pairs_info[\"color\"] <- rep(\"red\", 150) # will set the red color for any plot within pairs_info having \"color\" saved. # In this way the assignment function via [] is trying to be clever # for l_savedStates for compound plots and so may have unintentional # consequences if the user is not careful.  # Generally, one does not want/need to change the value of saved states. # Instead, the states would be saved again from the interactive plot # if change is necessary. # Alternatively, more nuanced and careful control is maintained using # the $ selectors for lists. }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scale3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale for 3d plotting — l_scale3D","title":"Scale for 3d plotting — l_scale3D","text":"l_scale3D scales argument variety ways used 3D visualization.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scale3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale for 3d plotting — l_scale3D","text":"","code":"l_scale3D(x, center = TRUE, method = c(\"box\", \"sphere\"))"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scale3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale for 3d plotting — l_scale3D","text":"x matrix data.frame whose columns scaled. NA entries preserved ignored calculations. x must exactly 3 columns method = \"sphere\". center either logical value numeric-alike vector length equal number columns x, ‘numeric-alike’ means .numeric(.) applied successfully .numeric(.) true. method scaling method use. method = \"box\" (default) columns scaled equal ranges , center = TRUE, centred average min max; method = \"sphere\" x must three dimensional. sphering, original 3 dimensions x first centred (mean centred center = TRUE) scaled equal standard deviation . V matrix singular value decomposition (svd) applied right resulting uncorrelated variables. Coordinates divided (non-zero tested !.equal(0, .)) singular values. x contains NAs, resulting coordinates simply U matrix svd.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scale3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale for 3d plotting — l_scale3D","text":"data.frame whose columns centred scaled according given arguments. method = \"sphere\"), three variable names x1,  x2,  x3.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_scale3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale for 3d plotting — l_scale3D","text":"","code":"##### Iris data # # All variables (including Species as a factor) result_box <- l_scale3D(iris) head(result_box, n = 3) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1   -0.2777778  0.12500000   -0.4322034  -0.4583333    -0.5 #> 2   -0.3333333 -0.08333333   -0.4322034  -0.4583333    -0.5 #> 3   -0.3888889  0.00000000   -0.4491525  -0.4583333    -0.5 apply(result_box, 2, FUN = range) #>      Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> [1,]         -0.5        -0.5         -0.5        -0.5    -0.5 #> [2,]          0.5         0.5          0.5         0.5     0.5 # Note mean is not zero. apply(result_box, 2, FUN = mean) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species  #>  -0.07129630  -0.05944444  -0.03254237  -0.04194444   0.00000000    # Sphering only on 3D data. result_sphere <- l_scale3D(iris[, 1:3], method = \"sphere\") head(result_sphere, n = 3) #>            x1          x2           x3 #> 1 -0.10665359 -0.03635358 -0.039744517 #> 2 -0.09153699  0.06124692 -0.080344512 #> 3 -0.11208702  0.03517574 -0.009633385 apply(result_sphere, 2, FUN = range) #>              x1         x2         x3 #> [1,] -0.1423020 -0.2338372 -0.1627308 #> [2,]  0.1737036  0.2262592  0.2203348 # Note mean is numerically zero. apply(result_sphere, 2, FUN = mean) #>            x1            x2            x3  #> -1.854727e-17  3.437837e-18  1.035964e-16    #  With NAs x <- iris x[c(1, 3), 1] <- NA x[2, 3] <- NA  result_box <- l_scale3D(x) head(result_box, n = 5) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           NA  0.12500000   -0.4322034  -0.4583333    -0.5 #> 2   -0.3333333 -0.08333333           NA  -0.4583333    -0.5 #> 3           NA  0.00000000   -0.4491525  -0.4583333    -0.5 #> 4   -0.4166667 -0.04166667   -0.4152542  -0.4583333    -0.5 #> 5   -0.3055556  0.16666667   -0.4322034  -0.4583333    -0.5 apply(result_box, 2, FUN = function(x) {range(x, na.rm = TRUE)}) #>      Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> [1,]         -0.5        -0.5         -0.5        -0.5    -0.5 #> [2,]          0.5         0.5          0.5         0.5     0.5  # Sphering only on 3D data. result_sphere <- l_scale3D(x[, 1:3], method = \"sphere\") # Rows having had any NA are all NA after sphering. head(result_sphere, n = 5) #>           x1          x2          x3 #> 1         NA          NA          NA #> 2         NA          NA          NA #> 3         NA          NA          NA #> 4 -0.1097604 -0.05847447 0.021141688 #> 5 -0.1188225  0.04803699 0.001622979 # Note with NAs mean is no longer numerically zero. # because centring was based on all non-NAs in each column apply(result_sphere, 2, FUN = function(x) {mean(x, na.rm = TRUE)}) #>            x1            x2            x3  #>  0.0012171739 -0.0002142758  0.0019700846"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Plot Region to Display All Active Data — l_scaleto_active","title":"Change Plot Region to Display All Active Data — l_scaleto_active","text":"function modifies zoomX, zoomY,   panX, panY active data points displayed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Plot Region to Display All Active Data — l_scaleto_active","text":"","code":"l_scaleto_active(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_active.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Plot Region to Display All Active Data — l_scaleto_active","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Plot Region to Display All Elements of a Particular Layer — l_scaleto_layer","title":"Change Plot Region to Display All Elements of a Particular Layer — l_scaleto_layer","text":"function modifies zoomX, zoomY,   panX, panY elements particular layer   displayed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Plot Region to Display All Elements of a Particular Layer — l_scaleto_layer","text":"","code":"l_scaleto_layer(target, layer)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Plot Region to Display All Elements of a Particular Layer — l_scaleto_layer","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. layer layer id","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Plot Region to Display the All Data of the Model Layer — l_scaleto_plot","title":"Change Plot Region to Display the All Data of the Model Layer — l_scaleto_plot","text":"function modifies zoomX, zoomY,   panX, panY elements model layer   plot displayed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Plot Region to Display the All Data of the Model Layer — l_scaleto_plot","text":"","code":"l_scaleto_plot(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Plot Region to Display the All Data of the Model Layer — l_scaleto_plot","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Plot Region to Display All Selected Data — l_scaleto_selected","title":"Change Plot Region to Display All Selected Data — l_scaleto_selected","text":"function modifies zoomX, zoomY,   panX, panY selected data points   displayed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Plot Region to Display All Selected Data — l_scaleto_selected","text":"","code":"l_scaleto_selected(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Plot Region to Display All Selected Data — l_scaleto_selected","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_world.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Plot Region to Display All Plot Data — l_scaleto_world","title":"Change Plot Region to Display All Plot Data — l_scaleto_world","text":"function modifies zoomX, zoomY,   panX, panY elements plot   displayed.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Plot Region to Display All Plot Data — l_scaleto_world","text":"","code":"l_scaleto_world(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_scaleto_world.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Plot Region to Display All Plot Data — l_scaleto_world","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"l_serialaxes generic function displaying multivariate data either stacked star glyph plot, parallel coordinate plot.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"","code":"l_serialaxes(data, ...)  # Default S3 method l_serialaxes(   data,   sequence,   scaling = \"variable\",   axesLayout = \"radial\",   by = NULL,   on,   layout = c(\"grid\", \"wrap\", \"separate\"),   andrews = FALSE,   showAxes = TRUE,   color = l_getOption(\"color\"),   active = TRUE,   selected = FALSE,   linewidth = l_getOption(\"linewidth\"),   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"data data frame numerical data ... named arguments modify serialaxes states layouts, see details. sequence vector variable names defines axes sequence scaling one 'variable', 'data', 'observation' 'none' specify data scaled. See Details Examples information. axesLayout either \"radial\" \"parallel\" loon plot can separated variables multiple panels. argument can take formula, n dimensional state names (see l_nDimStateNames) n-dimensional vector data.frame list lengths n input. x formula, optional data frame containing variables x . variables found data, taken environment, typically environment function called. layout layout facets 'grid', 'wrap' 'separate' andrews Andrew's plot ('Fourier' transformation) showAxes boolean indicate whether axes shown color vector line colors. Default given l_getOption(\"color\"). active logical determining whether points appear (default TRUE points). logical vector given length equal number points, identifies points appear (TRUE) (FALSE). selected logical determining whether points appear selected first (default FALSE points). logical vector given length equal number points, identifies points (TRUE) (FALSE). linewidth vector line widths. Default given l_getOption(\"linewidth\"). parent valid Tk parent widget path. parent widget specified (.e. NULL) plot widget needs placed using geometry manager like tkpack tkplace order displayed. See examples .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"argument set, loon widget returned; else l_facet object (list) returned element loon widget displaying subset interest.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"information run: l_help(\"learn_R_display_hist\") scaling state defines data scaled. axes   display 0 one end 1 . following explanation   assume data nxp dimensional matrix. scaling options   arguments modify layouts can passed ,   e.g. \"separate\", \"byrow\", etc.   Check l_facet see arguments work.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive serialaxes (parallel axes or radial axes) plot — l_serialaxes","text":"","code":"if(interactive()){  ####### # # Effect of the choice of the argument \"scaling\" # # To illustrate we will look at the four measurements of # 150 iris flowers from the iris data of Edgar Anderson made # famous by R.A. Fisher. # # First separate the measurements irisFlowers <- iris[, 1:4] # from their species species <- iris[,5] # and get some identifiers for the individual flowers flowerIDs <- paste(species, 1:50) # # Now create parallel axes plots of the measurements # using different scaling values.  # # scaling = \"variable\" # # This is the standard scaling of most serial axes plots, # scaling each axis from the minimum to the maximum of that variable. # Hence it is the default scaling. # # More precisely, it maps the minimum value in each column (variable) to # zero and the maximum to one.  The result is every parallel # axis will have a point at 0 and a point at 1. # # This scaling highlights the relationships (e.g. correlations) # between the variables (removes the effect of the location and scale of # each variable). # # For the iris data, ignoring species we see for example that # Sepal.Length and Sepal.Width are negatively correlated (lots of # crossings) across species but more positively correlated (mostly # parallel lines) within each species (colour). # sa_var <- l_serialaxes(irisFlowers,                        scaling = \"variable\",    # scale within column                        axesLayout = \"parallel\",                        color = species,                        linewidth = 2,                        itemLabel = flowerIDs,                        showItemLabels = TRUE,                        title = \"scaling = variable (initially)\",                        linkingGroup = \"irisFlowers data\")  # # scaling = \"observation\" # # This maps the minimum value in each row (observation) to # zero and the maximum value in each row to one. # # The result is that every observation (curve in the parallel # coordinate plot) will touch 0 on at least one axis and touch # 1 on another. # # This scaling highlights the differences between observations (rows) # in terms of the relative measurements across the variables for each # observation. # # For example, for the iris data we can see that for every flower (row) # the Sepal.Length is the largest measurement and the Petal.Width # is the smallest.  Each curve gives some sense of the *shape* of each # flower without regard to its size.  Two species (versicolor and # virginica) have similar shaped flowers (relatively long but narrow # sepals and petals), whereas the third (setosa) has relatively large # sepals compared to small petals. # sa_obs <- l_serialaxes(irisFlowers,                        scaling = \"observation\", # scale within row                        axesLayout = \"parallel\",                        color = species,                        linewidth = 2,                        itemLabel = flowerIDs,                        showItemLabels = TRUE,                        title = \"scaling = observation (initially)\",                        linkingGroup = \"irisFlowers data\")  # # scaling = \"data\" # # This maps the minimum value in the whole dataset (over all elements) # to zero and the maximum value in the whole dataset to one. # # The result is that every measurement is on the same numeric (if not # measurement) scale.  Highlighting the relative magnitudes of all # numerical values in the data set, each curve shows the relative magnitudes # without rescaling by variable. # # This is most sensible data such as the iris flower where all four measurements # appear to have been taken on the same measuring scale. # # For example, for the iris data full data scaling preserves the size # and shape of each flower.  Again virginica is of roughly the same # shape as versicolor but has distinctly larger petals. # Setosa in contrast is quite differently shaped in both sepals and petals # but with sepals more similar in size to the two other flowers and # with significantly smaller petals. sa_dat <- l_serialaxes(irisFlowers,                        scaling = \"data\",        # scale using all data                        axesLayout = \"parallel\",                        color = species,                        linewidth = 2,                        itemLabel = flowerIDs,                        showItemLabels = TRUE,                        title = \"scaling = data (initially)\",                        linkingGroup = \"irisFlowers data\")  # #  scaling = \"none\" # #  Sometimes we might wish to choose a min and max to use #  for the whole data set; or perhaps a separate min and max #  for each variable.  #  This would be done outside of the construction of the plot #  and displayed by having scaling = \"none\" in the plot. # #  For example, for the iris data, we might choose scales so that #  the minimum and the maximum values within the data set do not #  appear at the end points 0 and 1 of the axes but instead inside. # #  Suppose we choose the following limits for all variables lower_lim <- -3 ; upper_lim <- max(irisFlowers) + 1  #  These are the limits we want to use to define the end points of #  the axes for all variables. #  We need only scale the data as irisFlowers_0_1 <- (irisFlowers - lower_lim)/(upper_lim - lower_lim) #  Or alternatively using the built-in scale function #  (which allows different scaling for each variable) irisFlowers_0_1 <- scale(irisFlowers,                          center = rep(lower_lim, 4),                          scale = rep((upper_lim - lower_lim), 4))  # Different scales for different # And instruct the plot to not scale the data but plot it on the 0-1 scale # for all axes.  (Note any rescaled date outside of [0,1] will not appear.) # sa_none <- l_serialaxes(irisFlowers_0_1,                         scaling = \"none\",        # do not scale                         axesLayout = \"parallel\",                         color = species,                         linewidth = 2,                         itemLabel = flowerIDs,                         showItemLabels = TRUE,                         title = \"scaling = none (initially)\",                         linkingGroup = \"irisFlowers data\")  # This is particularly useful for \"radial\" axes to keep the polygons away from # the centre of the display. # For example sa_none[\"axesLayout\"] <- \"radial\" # now displays each flower as a polygon where shapes and sizes are easily # compared. # #  NOTE: rescaling the data so that all values are within [0,1] is perhaps #        the best way to proceed (especially if there are natural lower and #        upper limits for each variable). #        Then scaling can always be changed via the inspector.  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes_inspector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Serialaxes Inspector — l_serialaxes_inspector","title":"Create a Serialaxes Inspector — l_serialaxes_inspector","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes_inspector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Serialaxes Inspector — l_serialaxes_inspector","text":"","code":"l_serialaxes_inspector(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes_inspector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Serialaxes Inspector — l_serialaxes_inspector","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes_inspector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Serialaxes Inspector — l_serialaxes_inspector","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_serialaxes_inspector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Serialaxes Inspector — l_serialaxes_inspector","text":"","code":"if(interactive()){  i <- l_serialaxes_inspector() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setAspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the aspect ratio of a plot — l_setAspect","title":"Set the aspect ratio of a plot — l_setAspect","text":"aspect ratio defined ratio number pixels   one data unit y axis number pixels one data unit   x axes.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setAspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the aspect ratio of a plot — l_setAspect","text":"","code":"l_setAspect(widget, aspect, x, y)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setAspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the aspect ratio of a plot — l_setAspect","text":"widget widget path string object handle aspect aspect ratio, optional, omitted x y arguments specified. x optional, aspect argument missing x y can specified aspect ratio calculted usding y/x. y see description x argument ","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setAspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the aspect ratio of a plot — l_setAspect","text":"","code":"if (FALSE) { # \\dontrun{ p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))  l_aspect(p) l_setAspect(p, x = 1, y = 2) } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList.html","id":null,"dir":"Reference","previous_headings":"","what":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","title":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","text":"Modify loon's color mapping list set custom colors.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","text":"","code":"l_setColorList(colors)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","text":"colors vector valid color names hex-encoded colors","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","text":"two commonly used mapping schemes data values   colors: one scheme maps numeric values colors color gradient   maps nominal data colors can well differentiated   visually (e.g. highlight different groups). Presently, loon always   uses latter approach color mappings. can use specialized   color pallettes map continuous values color gradients shown   examples . assigning values display state type color loon maps   values using following rules  values already represent valid Tk colors (see   tkcolors) colors taken. number distinct values less number values   loon's color mapping list get mapped according color list,   see l_setColorList l_getColorList. distinct values colors loon's color   mapping list loon's color mapping algorithm used. See   loon_palette details algorithm   documentation. Loon's default color list composed first 11 colors   hcl color wheel (displayed html version   documentation). letters hcl stand hue, chroma luminance,   hcl wheel useful finding \"balanced colors\" chroma   (radius) luminance different hues (angles), see Ross Ihaka   (2003) \"Colour presentation graphics\", Proceedings DSC, p. 2   (https://www.stat.auckland.ac.nz/~ihaka/courses/787/color.pdf). colors loon's internal color list also default ones listed   \"modify color actions\" analysis inspectors. query   modify loon's color list use l_getColorList   l_setColorList. case unique data values colors loon's   color list colors mapping taken different   locations distributed hcl color wheel (see ). One advantages using hcl color wheel one can obtain   number \"balanced colors\" distinct hues. useful   encoding data colors large number groups; however,   noted groups closer colors sampled   wheel become , therefore, similar appearance. common way sample distinct \"balanced colors\" hcl wheel   choose evenly spaced hues distributed wheel (.e. angles   wheel). However, approach leads color sets colors change   sample size (.e. number sampled colors wheel)   increases one. loon, desirable first m   colors color sample size m+1 colors   color sample size m, positive natural numbers m.   Hence, prefer sequence colors. way, colors   inspectors stay relevant (.e. match colors data   points) creating plots encode color data variable   different number groups. implemented color sampling scheme (color sequence generator)   also makes sure neighboring colors sequence different   hues. can access color sequence generator   loon_palette. color wheels show color   generating sequence twice, 16 colors 32 colors.  Note, inspector: unique colors data points   inspectors possible add next five   colors sequence colors +5 button.   Alternatively, + button modify color part analysis   inspectors allows user pick additional color color menu.   Also, change color mapping list close re-open loon   inspector new colors show modify color list. color mappings data values required (e.g. numerical data   color gradient) functions scales   R package provide various mappings including mappings qualitative,   diverging sequential values.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use custom colors for mapping nominal values to distinct colors — l_setColorList","text":"","code":"if(interactive()){   l_plot(1:3, color=1:3) # loon's default mapping  cols <- l_getColorList() l_setColorList(c(\"red\", \"blue\", \"green\", \"orange\"))  ## close and reopen inspector  l_plot(1:3, color=1:3)   # use the new color mapping l_plot(1:10, color=1:10) # use loons default color mapping as color list is too small  # reset to default l_setColorList(cols) }  if (FALSE) { # \\dontrun{ # you can also perform the color mapping yourself, for example with # the col_numeric function provided in the scales package if (requireNamespace(\"scales\", quietly = TRUE)) {   p_custom <- with(olive, l_plot(stearic ~ oleic,        color = scales::col_numeric(\"Greens\", domain = NULL)(palmitic)))   } } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ColorBrewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","title":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","text":"Loon's color list used map nominal values colors. See   documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ColorBrewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","text":"","code":"l_setColorList_ColorBrewer(   palette = c(\"Set1\", \"Set2\", \"Set3\", \"Pastel1\", \"Pastel2\", \"Paired\", \"Dark2\", \"Accent\") )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ColorBrewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","text":"palette one following RColorBrewer palette name: Set1, Set2, Set3, Pastel1, Pastel2, Paired, Dark2, Accent","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ColorBrewer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","text":"following palettes ColorBrewer available: Set1,   Set2, Set3, Pastel1, Pastel2, Paired, Dark2, Accent. See examples   .","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ColorBrewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set loon's color mapping list to the colors from ColorBrewer — l_setColorList_ColorBrewer","text":"","code":"if (interactive()){  if (FALSE) { # \\dontrun{ if (requireNamespace(\"RColorBrewer\", quietly = TRUE)) {   RColorBrewer::display.brewer.all() } } # }  l_setColorList_ColorBrewer(\"Set1\") p <- l_plot(iris)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_baseR.html","id":null,"dir":"Reference","previous_headings":"","what":"Set loon's color mapping list to the colors from base R — l_setColorList_baseR","title":"Set loon's color mapping list to the colors from base R — l_setColorList_baseR","text":"Loon's color list used map nominal values colors. See   documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_baseR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set loon's color mapping list to the colors from base R — l_setColorList_baseR","text":"","code":"l_setColorList_baseR()"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ggplot2.html","id":null,"dir":"Reference","previous_headings":"","what":"Set loon's color mapping list to the colors from ggplot2 — l_setColorList_ggplot2","title":"Set loon's color mapping list to the colors from ggplot2 — l_setColorList_ggplot2","text":"Loon's color list used map nominal values colors. See   documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_ggplot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set loon's color mapping list to the colors from ggplot2 — l_setColorList_ggplot2","text":"","code":"l_setColorList_ggplot2()"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_hcl.html","id":null,"dir":"Reference","previous_headings":"","what":"Set loon's color mapping list to the colors from hcl color wheen — l_setColorList_hcl","title":"Set loon's color mapping list to the colors from hcl color wheen — l_setColorList_hcl","text":"Loon's color list used map nominal values colors. See   documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_hcl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set loon's color mapping list to the colors from hcl color wheen — l_setColorList_hcl","text":"","code":"l_setColorList_hcl(chroma = 56, luminance = 51, hue_start = 231)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_hcl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set loon's color mapping list to the colors from hcl color wheen — l_setColorList_hcl","text":"chroma chroma color. upper bound chroma depends hue luminance. luminance value range [0,100] giving luminance colour. given combination hue chroma, subset range possible. hue_start start hue sampling. hue color specified angle range [0,360]. 0 yields red, 120 yields green 240 yields blue, etc.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_hcl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set loon's color mapping list to the colors from hcl color wheen — l_setColorList_hcl","text":"Samples equally distant colors hcl color wheel. See   documentation hcl information.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Set loon's color mapping list to the colors from loon defaults — l_setColorList_loon","title":"Set loon's color mapping list to the colors from loon defaults — l_setColorList_loon","text":"Loon's color list used map nominal values colors. See   documentation l_setColorList.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setColorList_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set loon's color mapping list to the colors from loon defaults — l_setColorList_loon","text":"","code":"l_setColorList_loon()"},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setLinkedStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify States of a Plot that are Linked in Loon's Standard Linking Model — l_setLinkedStates","title":"Modify States of a Plot that are Linked in Loon's Standard Linking Model — l_setLinkedStates","text":"Loon's standard linking model based three levels,   linkingGroup linkingKey states used   linkable states. See details .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setLinkedStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify States of a Plot that are Linked in Loon's Standard Linking Model — l_setLinkedStates","text":"","code":"l_setLinkedStates(widget, states)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setLinkedStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify States of a Plot that are Linked in Loon's Standard Linking Model — l_setLinkedStates","text":"widget widget path string object handle states used linkable state names, see details ","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setLinkedStates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify States of a Plot that are Linked in Loon's Standard Linking Model — l_setLinkedStates","text":"Loon's standard linking model based two states,   linkingGroup linkingKey. full capabilities   standard linking model described . However, setting   linkingGroup states two displays string   generally needed linking displays plot data   data frame. Changing linking group display also   linking-related action available analysis inspectors. first linking level follows: loon's displays linked   share string linkingGroup state. default   linking group 'none' keyword leaves display un-linked. second linking level follows. n-dimensional states can   linked displays. call states linkable. ,   linkable states name can linked displays. One   consequence shared state name rule ,   standard linking model, linewidth state serialaxes display   linked size state scatterplot display. Also,   display maintains list defines linkable states   used linking; call states used linkable   states. default used linkable states follows  two displays set linked (.e. share linking   group) intersection used linkable states   actually linked. third linking level follows. Every display   n-dimensional linkingKey state. Hence, every data point   associated linking key. Data points linked plots linked   share linking key.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setOption.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the value of a loon display option — l_setOption","title":"Set the value of a loon display option — l_setOption","text":"loon's displays access set common options. function assigns value named option.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setOption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the value of a loon display option — l_setOption","text":"","code":"l_setOption(option, value)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setOption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the value of a loon display option — l_setOption","text":"option name option set value value assigned option.  value == \"default\", option set loon's default value .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setOption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the value of a loon display option — l_setOption","text":"new value","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_setOption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the value of a loon display option — l_setOption","text":"","code":"l_setOption(\"select-color\", \"red\") #> [1] \"red\" l_setOption(\"select-color\", \"default\") #> [1] \"magenta\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setTitleFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the title font of all loon displays — l_setTitleFont","title":"Set the title font of all loon displays — l_setTitleFont","text":"loon's displays access set common options. function sets font title bar displays.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setTitleFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the title font of all loon displays — l_setTitleFont","text":"","code":"l_setTitleFont(size = \"16\", weight = \"bold\", family = \"Helvetica\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_setTitleFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the title font of all loon displays — l_setTitleFont","text":"size font size. weight font size. family font family.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_setTitleFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the title font of all loon displays — l_setTitleFont","text":"value named option.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_size-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Resize Plot Widget — l_size<-","title":"Resize Plot Widget — l_size<-","text":"Resizes toplevel widget specific size. setter   function uses l_resize.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_size-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resize Plot Widget — l_size<-","text":"","code":"l_size(widget) <- value"},{"path":"https://great-northern-diver.github.io/loon/reference/l_size-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resize Plot Widget — l_size<-","text":"widget widget path string object handle value numeric vector length 2 width height pixels","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_size-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resize Plot Widget — l_size<-","text":"","code":"if(interactive()){  p <- l_plot(iris)  l_resize(p, 300, 300) l_size(p) <- c(500, 500)  }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Size of a Plot Display — l_size","title":"Query Size of a Plot Display — l_size","text":"Get width height plot pixels","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Size of a Plot Display — l_size","text":"","code":"l_size(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Size of a Plot Display — l_size","text":"widget widget path string object handle","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Size of a Plot Display — l_size","text":"Vector width width height pixels","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_state_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State Names of Loon Object — l_state_names","title":"Get State Names of Loon Object — l_state_names","text":"States loon objects can accessed `[` l_cget modified l_configure.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_state_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State Names of Loon Object — l_state_names","text":"","code":"l_state_names(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_state_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State Names of Loon Object — l_state_names","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_state_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State Names of Loon Object — l_state_names","text":"state names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_state_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get State Names of Loon Object — l_state_names","text":"order access values states use l_info_states.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_subwin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a child widget path — l_subwin","title":"Create a child widget path — l_subwin","text":"function similar .Tk.subwin except   environment \"tkwin\" object keep track numbering   subwidgets. Instead creates widget path (parent).looni,   smallest integer widget exists yet.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_subwin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a child widget path — l_subwin","text":"","code":"l_subwin(parent, name = \"w\")"},{"path":"https://great-northern-diver.github.io/loon/reference/l_subwin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a child widget path — l_subwin","text":"parent parent widget path name child name","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_subwin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a child widget path — l_subwin","text":"widget path name string","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_throwErrorIfNotLoonWidget.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw an error if string is not associated with a loon widget — l_throwErrorIfNotLoonWidget","title":"Throw an error if string is not associated with a loon widget — l_throwErrorIfNotLoonWidget","text":"Helper function ensure widget path associated loon widget.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_throwErrorIfNotLoonWidget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw an error if string is not associated with a loon widget — l_throwErrorIfNotLoonWidget","text":"","code":"l_throwErrorIfNotLoonWidget(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_throwErrorIfNotLoonWidget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw an error if string is not associated with a loon widget — l_throwErrorIfNotLoonWidget","text":"widget widget path name string","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_throwErrorIfNotLoonWidget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw an error if string is not associated with a loon widget — l_throwErrorIfNotLoonWidget","text":"TRUE string associated loon widget, otherwise error thrown.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toR.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Tcl Object to some other R object — l_toR","title":"Convert a Tcl Object to some other R object — l_toR","text":"Return values .Tcl tcl   class tclObj often need mapped different data   structure R. function helper class mapping.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Tcl Object to some other R object — l_toR","text":"","code":"l_toR(x, cast = as.character)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_toR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Tcl Object to some other R object — l_toR","text":"x tclObj object cast function conver object R object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Tcl Object to some other R object — l_toR","text":"object returned function specified   cast argument.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toplevel.html","id":null,"dir":"Reference","previous_headings":"","what":"loon tk top level — l_toplevel","title":"loon tk top level — l_toplevel","text":"Create loon tk top-level window","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toplevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"loon tk top level — l_toplevel","text":"","code":"l_toplevel(path)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_toplevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"loon tk top level — l_toplevel","text":"path valid path name (character); missing, valid path generated automatically","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toplevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"loon tk top level — l_toplevel","text":"tk top level widget","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_toplevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"loon tk top level — l_toplevel","text":"","code":"if(interactive()) {    tt <- l_toplevel(\".test\")   subwin <- l_subwin(tt, 'ts')   tktitle(tt) <- paste(\"path:\", subwin)   parent <- as.character(tcl('frame', subwin))    # a loon widget   p <- l_plot(rnorm(100), rnorm(100), parent = parent)   # pack a refresh button (generate new data set)   refresh_button <- as.character(      tcltk::tcl('button',                 as.character(l_subwin(parent, 'refresh button')),                 text = \"refresh\",                 bg = \"grey80\",                 fg = \"black\",                 borderwidth = 2,                 relief = \"raised\"))    # layout   tcltk::tkgrid(p,                 row = 0,                 column = 0,                 rowspan = 10,                 columnspan = 10,                 sticky=\"nesw\")    tcltk::tkgrid(refresh_button,                 row = 10,                 column = 0,                 rowspan = 1,                 columnspan = 1,                 sticky=\"nesw\")   for(i in 0:10) {      tcltk::tkgrid.rowconfigure(parent, i, weight=1)   }   for(i in 0:9) {     tcltk::tkgrid.columnconfigure(parent, i, weight=1)   }    update <- function(...) {     l_configure(p,                 x = rnorm(100),                 y = rnorm(100))     l_scaleto_world(p)   }    # configure button (callback function)   tcltk::tkconfigure(refresh_button,                      command = update)   # configure canvas size   tcltk::tkconfigure(paste(p,\".canvas\", sep=''), width=500, height=500)    # pack widgets   tkpack(parent, fill=\"both\", expand=TRUE) }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptionDefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Get loon's system default value for the named display option. — l_userOptionDefault","title":"Get loon's system default value for the named display option. — l_userOptionDefault","text":"loon's displays access set common options. function accesses returns default value named option.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptionDefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get loon's system default value for the named display option. — l_userOptionDefault","text":"","code":"l_userOptionDefault(option)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptionDefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get loon's system default value for the named display option. — l_userOptionDefault","text":"option name user changeable loon display option whose default value determined.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptionDefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get loon's system default value for the named display option. — l_userOptionDefault","text":"default value named option","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptionDefault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get loon's system default value for the named display option. — l_userOptionDefault","text":"","code":"l_userOptionDefault(\"background\") #> [1] \"white\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of all loon display options that can be set by the user. — l_userOptions","title":"Get the names of all loon display options that can be set by the user. — l_userOptions","text":"loon's displays access set common options. function accesses returns names subset loon options can changed user.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of all loon display options that can be set by the user. — l_userOptions","text":"","code":"l_userOptions()"},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of all loon display options that can be set by the user. — l_userOptions","text":"vector user settable option names.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_userOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of all loon display options that can be set by the user. — l_userOptions","text":"","code":"l_userOptions() #>  [1] \"select-color\"       \"background\"         \"foreground\"         #>  [4] \"guidesBackground\"   \"guidelines\"         \"brush_color\"        #>  [7] \"brush_color_handle\" \"glyph\"              \"color\"              #> [10] \"size\"               \"linewidth\""},{"path":"https://great-northern-diver.github.io/loon/reference/l_web.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a browser with loon's R documentation webpage — l_web","title":"Open a browser with loon's R documentation webpage — l_web","text":"l_web opens browser relevant page   official loon documentation website.  constructed joining together   information provided arguments site/package/directory/page. Default documentation found   https://great-northern-diver.github.io/loon/.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_web.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a browser with loon's R documentation webpage — l_web","text":"","code":"l_web(   page = \"index\",   directory = c(\"home\", \"reference\", \"articles\"),   package = c(\"loon\", \"loon.data\", \"loon.ggplot\", \"loon.tourr\", \"ggmulti\", \"zenplots\",     \"loon.shiny\", \"diveR\"),   site = \"https://great-northern-diver.github.io\",   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/l_web.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a browser with loon's R documentation webpage — l_web","text":"page relative path page (\".html\" part may omitted) directory \"home\" (default) page ignored browser open home page official documentation website.  page refers package   manual reference, directory must \"reference\"; page refers name   vignette file, directory \"articles\" package string identifying package name online documentation (default \"loon\"). site URL site (default \"https://great-northern-diver.github.io\") prefixing path requested documentation. ... arguments forwarded browseURL(), e.g. specify browser","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_web.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a browser with loon's R documentation webpage — l_web","text":"","code":"if (FALSE) { # \\dontrun{ l_web() # vignette(\"introduction\", package = \"loon\") # or l_web(page = \"introduction\", directory = \"articles\") # or l_web(package = \"loon.data\", directory = \"reference\") # help(l_hist) l_web(page = \"l_hist\", directory = \"reference\") } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_widget.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy function to be used in the Roxygen documentation — l_widget","title":"Dummy function to be used in the Roxygen documentation — l_widget","text":"Dummy function used Roxygen documentation","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_widget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy function to be used in the Roxygen documentation — l_widget","text":"","code":"l_widget(widget)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_widget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy function to be used in the Roxygen documentation — l_widget","text":"widget widget path name string","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_widget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dummy function to be used in the Roxygen documentation — l_widget","text":"widget path name string","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_worldview.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Worldview Inspector — l_worldview","title":"Create a Worldview Inspector — l_worldview","text":"Inpectors provide graphical user interfaces oversee   modify plot states","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_worldview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Worldview Inspector — l_worldview","text":"","code":"l_worldview(parent = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_worldview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Worldview Inspector — l_worldview","text":"parent parent widget path ... state arguments","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_worldview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Worldview Inspector — l_worldview","text":"widget handle","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/l_worldview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Worldview Inspector — l_worldview","text":"","code":"if(interactive()){ i <- l_worldview() }"},{"path":"https://great-northern-diver.github.io/loon/reference/l_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom from and towards the center — l_zoom","title":"Zoom from and towards the center — l_zoom","text":"function changes plot states panX, panY,   zoomX, zoomY zoom towards away center   current view.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/l_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom from and towards the center — l_zoom","text":"","code":"l_zoom(widget, factor = 1.1)"},{"path":"https://great-northern-diver.github.io/loon/reference/l_zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom from and towards the center — l_zoom","text":"widget widget path string object handle factor zoom factor","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a linegraph — linegraph","title":"Create a linegraph — linegraph","text":"line graph G, denoted L(G), graph whose nodes   correspond edges G whose edges correspond nodes G   nodes L(G) joined corresponding edges G   adjacent G.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a linegraph — linegraph","text":"","code":"linegraph(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a linegraph — linegraph","text":"x graph class graph loongraph ... arguments passed method","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a linegraph — linegraph","text":"graph object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a linegraph of a graph — linegraph.loongraph","title":"Create a linegraph of a graph — linegraph.loongraph","text":"Create lingraph loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a linegraph of a graph — linegraph.loongraph","text":"","code":"# S3 method for class 'loongraph' linegraph(x, separator = \":\", ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a linegraph of a graph — linegraph.loongraph","text":"x loongraph object separator one character - node names x get concatenated character ... additional arguments used methiod","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a linegraph of a graph — linegraph.loongraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a linegraph of a graph — linegraph.loongraph","text":"linegraph.loongraph needs code part directed graphs (.e.   isDirected=TRUE)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/linegraph.loongraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a linegraph of a graph — linegraph.loongraph","text":"","code":"g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)  linegraph(g) #> $nodes #> [1] \"a:b\" \"b:c\" \"c:d\" #>  #> $from #> [1] \"a:b\" \"b:c\" #>  #> $to #> [1] \"b:c\" \"c:d\" #>  #> $isDirected #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"loongraph\" #> attr(,\"separator\") #> [1] \":\""},{"path":"https://great-northern-diver.github.io/loon/reference/loon.html","id":null,"dir":"Reference","previous_headings":"","what":"loon: A Toolkit for Interactive Data Visualization and Exploration — loon","title":"loon: A Toolkit for Interactive Data Visualization and Exploration — loon","text":"Loon toolkit highly interactive data visualization. Interactions plots provided mouse keyboard gestures well via command line control inspectors provide graphical user interfaces (GUIs) modifying overseeing plots.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"loon: A Toolkit for Interactive Data Visualization and Exploration — loon","text":"Currently, loon implements following statistical graphs: histogram, scatterplot, serialaxes plot (star glyphs, parallel coordinates) graph display creating navigation graphs. implemented scatterplot features, example, zooming, panning, selection moving points, dynamic linking plots, layering visual information maps regression lines, custom point glyphs (images, text, star glyphs), event bindings. Event bindings provide hooks evaluate custom code specific plot state changes mouse keyboard interactions. Hence, event bindings can used add modify default behavior plot widgets. Loon's capabilities useful statistical analysis tasks interactive exploratory data analysis, sensitivity analysis, animation, teaching, creating new graphical user interfaces. get started using loon read package vignettes visit loon website https://great-northern-diver.github.io/loon/.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"loon: A Toolkit for Interactive Data Visualization and Exploration — loon","text":"Maintainer: R. Wayne Oldford rwoldford@uwaterloo.ca [thesis advisor] Authors: Adrian Waddell adrian@waddell.ch contributors: Zehao Xu z267xu@uwaterloo.ca [contributor] Martin Gauch martin.gauch@student.kit.edu [contributor]","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonFacets.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function that produces facetted plots at the time of constructing a loon plot. — loonFacets","title":"A helper function that produces facetted plots at the time of constructing a loon plot. — loonFacets","text":"Facets across multiple panels can created existing loonplot via l_facet directly time original loon plot call (without constructing unfacetted loon plot ). loonFacets helper function called various loon plot creation function (e.g., l_plot, l_hist, etc.).  time creation produce facets. rarely called directly user. function makes use general loonPlotFactory interface tcl. detailed information common arguments, see arguments l_facet loon plot constructor (e.g., l_plot, etc.)","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonFacets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function that produces facetted plots at the time of constructing a loon plot. — loonFacets","text":"","code":"loonFacets(   type,   by,   args,   on,   bySubstitute,   layout = \"grid\",   connectedScales = \"both\",   byArgs,   linkingGroup,   sync,   parent,   factory_tclcmd,   factory_path,   factory_window_title,   xlabel = \"\",   ylabel = \"\",   title = \"\",   modifiedLinkedStates = character(0L),   ... )"},{"path":"https://great-northern-diver.github.io/loon/reference/loonFacets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function that produces facetted plots at the time of constructing a loon plot. — loonFacets","text":"type class name loon plot loon plot can separated variables mutiple panels. argument can take vector, list lengths data.frame input. args named list N-dimensional arguments (e.g., x, y, selected, etc.) formula, optional data frame containing variables . variables found data, variables taken environment(formula), typically environment function called. bySubstitute effectively call substitute() arguments used generate warnings errors. layout layout facets 'grid', 'wrap' 'separate' connectedScales Determines scales facets connected depending layout used.  value layout, scales connected follows: layout = \"wrap\":  Across facets, connectedScales \"x\",  \"x\"  scales connected \"y\", \"y\" scales connected \"\",  \"x\" \"y\" scales connected \"none\",  neither \"x\" \"y\" scales connected.    value, \"y\" scale connected. layout = \"grid\":  Across facets, connectedScales \"cross\", scales row column connected \"row\", \"x\" \"y\" scales facets row connected \"column\", \"x\" \"y\" scales facets column connected \"x\", \"x\"  scales connected (regardless column) \"y\", \"y\" scales connected (regardless row) \"\",  \"x\" \"y\" scales connected facets \"none\",  neither \"x\" \"y\" scales connected facets. byArgs arguments used determining used. linkingGroup string naming group plots linked facets. sync string identifying synchronize aesthetics linked plots (.e., \"push\" \"pull\", \"pull\" default). parent parent loon widget factory_tclcmd tcl command given loonPlotFactory.  example, loon histogram tcl command string '::loon::histogram' factory_path tcl path given loonPlotFactory identify widgets; example, string 'hist' prefix histograms. factory_window_title window title given loonPlotFactory better identify window user; example, string 'loon histogram'. xlabel string label x direction facets ylabel string label y direction facets title string providing title collection facets modifiedLinkedStates states plot synchronized plots linking group.  Used sync = \"push\". ... named arguments modify `loon` widget states","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loonGlyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grob glyph from a loon widget — loonGlyphGrob","title":"Create a grob glyph from a loon widget — loonGlyphGrob","text":"generic function used loonGrob specialized particular loon widgets. Used construct various point symbol types plot. Different S3 methods implemented various loon point glyphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGlyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grob glyph from a loon widget — loonGlyphGrob","text":"","code":"loonGlyphGrob(widget, x, glyph_info)"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGlyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grob glyph from a loon widget — loonGlyphGrob","text":"widget loon widget. x argument used dispatch method – empty structure class equal returned l_glyph_getType. glyph_info named list pertinent components glyph including x y locations plot well information relevant particular glyph.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGlyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grob glyph from a loon widget — loonGlyphGrob","text":"grob glyph.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grid grob from a loon widget handle — loonGrob","title":"Create a grid grob from a loon widget handle — loonGrob","text":"Grid grobs useful create publication quality graphics.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grid grob from a loon widget handle — loonGrob","text":"","code":"loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_compound' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_layer_graph' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_layer_histogram' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_layer_scatterplot' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_navgraph' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_navigator' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_serialaxes' loonGrob(target, name = NULL, gp = NULL, vp = NULL)  # S3 method for class 'l_ts' loonGrob(target, name = NULL, gp = NULL, vp = NULL)"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grid grob from a loon widget handle — loonGrob","text":"target either object class loon vector specifies widget, layer, glyph, navigator context completely. widget specified widget path name (e.g. '.l0.plot'), remaining objects ids. name character identifier grob, NULL. Used find grob display list /child another grob. gp gpar object, NULL, typically output call function gpar. basically list graphical parameter settings. vp grid viewport object (NULL).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grid grob from a loon widget handle — loonGrob","text":"grid grob","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grid grob from a loon widget handle — loonGrob","text":"","code":"if (FALSE) { # \\dontrun{ widget <- with(iris, l_plot(Sepal.Length, Sepal.Width))  lgrob <- loonGrob(widget)  library(grid) grid.ls(lgrob, viewports=TRUE, fullNames=TRUE) grid.newpage(); grid.draw(lgrob)  p <- demo(\"l_layers\", ask = FALSE)$value  lgrob <- loonGrob(p) grid.newpage(); grid.draw(lgrob)  p <- demo(\"l_glyph_sizes\", ask = FALSE)$value  lgrob <- loonGrob(p) grid.newpage() grid.draw(lgrob) } # }   if (FALSE) { # \\dontrun{  library(grid) ## l_pairs (scatterplot matrix) examples  p <- l_pairs(iris[,-5], color=iris$Species)  lgrob <- loonGrob(p) grid.newpage() grid.draw(lgrob)  ## Time series decomposition examples  decompose <- decompose(co2) # or decompose <- stl(co2, \"per\") p <- l_plot(decompose, title = \"Atmospheric carbon dioxide over Mauna Loa\")  # To print directly use either plot(p) # or grid.loon(p) # or to save structure lgrob <- loonGrob(p) grid.newpage() grid.draw(lgrob) } # }   if (FALSE) { # \\dontrun{ ## graph examples  G <- completegraph(names(iris[,-5])) LG <- linegraph(G) g <- l_graph(LG)  nav0 <- l_navigator_add(g) l_configure(nav0, label = 0) con0 <- l_context_add_geodesic2d(navigator=nav0, data=iris[,-5])  nav1 <- l_navigator_add(g, from = \"Sepal.Length:Petal.Width\",   to = \"Petal.Length:Petal.Width\", proportion = 0.6) l_configure(nav1, label = 1) con1 <- l_context_add_geodesic2d(navigator=nav1, data=iris[,-5])  nav2 <- l_navigator_add(g, from = \"Sepal.Length:Petal.Length\",   to = \"Sepal.Width:Petal.Length\", proportion = 0.5) l_configure(nav2, label = 2) con2 <- l_context_add_geodesic2d(navigator=nav2, data=iris[,-5])  # To print directly use either plot(g) # or grid.loon(g) # or to save structure library(grid) lgrob <- loonGrob(g) grid.newpage(); grid.draw(lgrob) } # }   if (FALSE) { # \\dontrun{ ## histogram examples  h <- l_hist(iris$Sepal.Length, color=iris$Species)  g <- loonGrob(h)  library(grid) grid.newpage(); grid.draw(g)  h['showStackedColors'] <- TRUE  g <- loonGrob(h)  grid.newpage(); grid.draw(g)  h['colorStackingOrder'] <- c(\"selected\", unique(h['color']))  g <- loonGrob(h) grid.newpage(); grid.draw(g)  h['colorStackingOrder'] <- rev(h['colorStackingOrder'])  # To print directly use either plot(h) # or grid.loon(h) } # }  if(interactive()) {  ## l_plot scatterplot examples  p <- l_plot(x = c(0,1), y = c(0,1)) l_layer_rectangle(p, x = c(0,1), y = c(0,1))  g <- loonGrob(p)  library(grid) grid.newpage(); grid.draw(g)  p['glyph'] <- \"ctriangle\" p['color'] <- \"blue\" p['size'] <- c(10, 20) p['selected'] <- c(TRUE, FALSE) g <- loonGrob(p) grid.newpage(); grid.draw(g) }  if (FALSE) { # \\dontrun{ ## navgraph examples  ng <- l_navgraph(oliveAcids, separator='-', color=olive$Area)  # To print directly use either plot(ng) # or grid.loon(ng) # or to save structure lgrob <- loonGrob(ng) library(grid) grid.newpage() grid.draw(lgrob) } # }   ## Serial axes (radial and parallel coordinate) examples if(interactive()) {   s <- l_serialaxes(data=oliveAcids, color=olive$Area, title=\"olive data\")   sGrob_radial <- loonGrob(s)   library(grid)   grid.newpage(); grid.draw(sGrob_radial)   s['axesLayout'] <- 'parallel'   sGrob_parallel <- loonGrob(s)   grid.newpage(); grid.draw(sGrob_parallel) }   if (FALSE) { # \\dontrun{  ## Time series decomposition examples  decompose <- decompose(co2) # or decompose <- stl(co2, \"per\") p <- l_plot(decompose, title = \"Atmospheric carbon dioxide over Mauna Loa\")  # To print directly use either plot(p) # or grid.loon(p) # or to save structure lgrob <- loonGrob(p) grid.newpage() grid.draw(lgrob) } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrobInstantiation.html","id":null,"dir":"Reference","previous_headings":"","what":"Instantiate a Grob — loonGrobInstantiation","title":"Instantiate a Grob — loonGrobInstantiation","text":"Functions used instantiate grob descriptions appearing gTree produced loonGrob().","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrobInstantiation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instantiate a Grob — loonGrobInstantiation","text":"","code":"l_updateGrob(grobDesc, grobFun, ...)  l_instantiateGrob(loonGrob, gPath, grobFun, ...)  l_setGrobPlotView(loonGrob, margins)"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrobInstantiation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instantiate a Grob — loonGrobInstantiation","text":"grobDesc grob description. Generally, created function grob(). grobFun new grob function. missing, best guess (based gPath) tried. ... arguments used set new grob function loonGrob loonGrob (gTree object) gPath grob path object specifing descendant specified gTree margins plot view margins. missing, loon default margin used.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrobInstantiation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Instantiate a Grob — loonGrobInstantiation","text":"l_updateGrob: query arguments grob description assign arguments new grob function. l_instantiateGrob: query descendant loonGrob, update via new grob function, return new editted loonGrob","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrobInstantiation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instantiate a Grob — loonGrobInstantiation","text":"","code":"library(grid) grobDesc <- grob(label = \"loon\",                  gp = gpar(col = \"red\")) grid.newpage() # Nothing is displayed grid.draw(grobDesc)  textDesc <- l_updateGrob(grobDesc, grid::textGrob) grid.newpage() # label \"loon\" is shown grid.draw(textDesc)   if(interactive()) { # a loon plot with hidden labels p <- l_plot(iris, showLabels = FALSE) lg <- loonGrob(p) # x label and y label are invisible grid.newpage() grid.draw(lg)  # show x label lg <- l_instantiateGrob(lg, \"x label: textGrob arguments\") # show y label lg <- l_instantiateGrob(lg, \"y label: textGrob arguments\") # reset margins lg <- l_setGrobPlotView(lg) grid.newpage() grid.draw(lg)  # show axes if(packageVersion(\"loon\") < '1.3.8') {   lg <- l_instantiateGrob(lg, \"x axis: .xaxisGrob arguments\")   lg <- l_instantiateGrob(lg, \"y axis: .yaxisGrob arguments\") } else {   lg <- l_instantiateGrob(lg, \"x axis: xaxisGrob arguments\")   lg <- l_instantiateGrob(lg, \"y axis: yaxisGrob arguments\") }  lg <- l_setGrobPlotView(lg) grid.newpage() # the labels are too close to the plot grid.draw(lg)  # reset the labels' positions lg <- l_instantiateGrob(lg, \"x label: textGrob arguments\",                         y = unit(-3.5, \"lines\")) lg <- l_instantiateGrob(lg, \"y label: textGrob arguments\",                         x = unit(-6.5, \"lines\")) grid.newpage() grid.draw(lg) }"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob_layoutType.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function used to distinguish whether only the locations of plots will be used to arrange them in a grob, or whether all arguments to `gridExtra::arrangeGrob()` will be used. — loonGrob_layoutType","title":"A generic function used to distinguish whether only the locations of plots will be used to arrange them in a grob, or whether all arguments to `gridExtra::arrangeGrob()` will be used. — loonGrob_layoutType","text":"generic function used distinguish whether locations plots used arrange grob, whether arguments `gridExtra::arrangeGrob()` used.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob_layoutType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function used to distinguish whether only the locations of plots will be used to arrange them in a grob, or whether all arguments to `gridExtra::arrangeGrob()` will be used. — loonGrob_layoutType","text":"","code":"loonGrob_layoutType(target)"},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob_layoutType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function used to distinguish whether only the locations of plots will be used to arrange them in a grob, or whether all arguments to `gridExtra::arrangeGrob()` will be used. — loonGrob_layoutType","text":"target (compound) loon plot laid .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loonGrob_layoutType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generic function used to distinguish whether only the locations of plots will be used to arrange them in a grob, or whether all arguments to `gridExtra::arrangeGrob()` will be used. — loonGrob_layoutType","text":"either string \"locations\" (default) string \"arrangeGrobArgs\". \"locations\", generic function `l_getLocations()` called location arguments `gridExtra::arrangeGrob()` used (.e. subset `c(\"ncol\", \"nrow\", \"layout_matrix\", \"heights\", \"widths\")`). grobs laid constructed using generic function `l_getPlots()`.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loon_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Loon's color generator for creating color palettes — loon_palette","title":"Loon's color generator for creating color palettes — loon_palette","text":"Loon color sequence generator implemented  creates color   palettes first m colors color palette size   m+1 colors color palette size m,   positive natural numbers m. See details   l_setColorList documentation.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loon_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loon's color generator for creating color palettes — loon_palette","text":"","code":"loon_palette(n)"},{"path":"https://great-northern-diver.github.io/loon/reference/loon_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loon's color generator for creating color palettes — loon_palette","text":"n number different colors palette","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loon_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loon's color generator for creating color palettes — loon_palette","text":"vector hex-encoded color values","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loon_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loon's color generator for creating color palettes — loon_palette","text":"","code":"loon_palette(12) #>  [1] \"#68B2ED\" \"#CDA64D\" \"#EF8AC9\" \"#1EC28B\" \"#C698EE\" \"#92B74D\" \"#EE938C\" #>  [8] \"#00C1C6\" \"#9FA5F3\" \"#B3AF40\" \"#F38CAC\" \"#00C3AA\""},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a graph object of class loongraph — loongraph","title":"Create a graph object of class loongraph — loongraph","text":"loongraph class provides simple alternative graph   class create common graphs useful use navigation graphs.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a graph object of class loongraph — loongraph","text":"","code":"loongraph(nodes, from = character(0), to = character(0), isDirected = FALSE)"},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a graph object of class loongraph — loongraph","text":"nodes character vector node names, element defines node hence elements need unique character vector node names, element defines edge character vector node names, element defines edge isDirected boolean scalar, defines whether define directed edges","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a graph object of class loongraph — loongraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a graph object of class loongraph — loongraph","text":"loongraph objects can converted graph objects (.e. objects class graph defined graph package) .graph function. information run: l_help(\"learn_R_display_graph.html.html#graph-utilities\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/loongraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a graph object of class loongraph — loongraph","text":"","code":"g <- loongraph(   nodes = c(\"A\", \"B\", \"C\", \"D\"),   from = c(\"A\", \"A\", \"B\", \"B\", \"C\"),   to   = c(\"B\", \"C\", \"C\", \"D\", \"D\") )  if (FALSE) { # \\dontrun{ # create a loon graph plot p <- l_graph(g) } # }  lg <- linegraph(g)"},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Closure of One Dimensional Measures — measures1d","title":"Closure of One Dimensional Measures — measures1d","text":"Function creates 1d measures object can used   l_ng_plots l_ng_ranges.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closure of One Dimensional Measures — measures1d","text":"","code":"measures1d(data, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closure of One Dimensional Measures — measures1d","text":"data data.frame data used calculate measures ... named arguments, name function name argument function calculate measure variable.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closure of One Dimensional Measures — measures1d","text":"measures object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Closure of One Dimensional Measures — measures1d","text":"information run: l_help(\"learn_R_display_graph.html#measures\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/measures1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closure of One Dimensional Measures — measures1d","text":"","code":"m1 <- measures1d(oliveAcids, mean=mean, median=median,      sd=sd, q1=function(x)as.vector(quantile(x, probs=0.25)),      q3=function(x)as.vector(quantile(x, probs=0.75)))       m1 #> [1] \"1d measure closure with measures: mean, median, sd, q1, q3 \\n\" m1() #>                   mean median        sd      q1      q3 #> palmitic    1231.74126 1201.0 168.59226 1095.00 1360.00 #> palmitoleic  126.09441  110.0  52.49436   87.75  169.25 #> stearic      228.86538  223.0  36.74494  205.00  249.00 #> oleic       7311.74825 7302.5 405.81022 7000.00 7680.00 #> linoleic     980.52797 1030.0 242.79922  770.75 1180.75 #> linolenic     31.88811   33.0  12.96870   26.00   40.25 #> arachidic     58.09790   61.0  22.03025   50.00   70.00 #> eicosenoic    16.28147   17.0  14.08330    2.00   28.00 m1(olive$palmitoleic>100) #>                   mean median        sd      q1      q3 #> palmitic    1331.49693 1345.5 144.92782 1254.25 1419.00 #> palmitoleic  162.35890  163.0  39.13201  130.00  185.00 #> stearic      224.03374  220.0  33.35324  203.00  242.00 #> oleic       7058.02454 7025.0 282.79153 6883.00 7253.75 #> linoleic    1090.95399 1134.0 177.25662  950.00 1215.50 #> linolenic     33.86196   34.0  10.89852   29.00   40.75 #> arachidic     59.93252   61.0  17.65329   53.00   68.00 #> eicosenoic    21.59816   23.5  11.18355   16.00   29.00 m1('data') #>     palmitic palmitoleic stearic oleic linoleic linolenic arachidic eicosenoic #> 1       1075          75     226  7823      672        36        60         29 #> 2       1088          73     224  7709      781        31        61         29 #> 3        911          54     246  8113      549        31        63         29 #> 4        966          57     240  7952      619        50        78         35 #> 5       1051          67     259  7771      672        50        80         46 #> 6        911          49     268  7924      678        51        70         44 #> 7        922          66     264  7990      618        49        56         29 #> 8       1100          61     235  7728      734        39        64         35 #> 9       1082          60     239  7745      709        46        83         33 #> 10      1037          55     213  7944      633        26        52         30 #> 11      1051          35     219  7978      605        21        65         24 #> 12      1036          59     235  7868      661        30        62         44 #> 13      1074          70     214  7728      747        50        79         33 #> 14       875          52     243  8018      655        41        79         32 #> 15       952          49     254  7795      780        50        75         41 #> 16      1155          98     201  7606      816        32        60         29 #> 17       943          94     183  7840      788        42        75         31 #> 18      1278          69     205  7344      957        45        70         28 #> 19       961          70     195  7958      742        46        75         30 #> 20       952          77     258  7820      736        43        78         33 #> 21      1074          67     236  7692      716        56        83         45 #> 22       995          46     288  7806      679        56        86         40 #> 23      1056          53     247  7703      700        54        89         51 #> 24      1065          39     234  7876      703        42        74         26 #> 25      1065          45     245  7779      696        47        82         38 #> 26      1315         139     230  7299      832        42        60         32 #> 27      1321         136     217  7174      950        43        63         30 #> 28      1359         115     246  7234      874        45        63         18 #> 29      1378         111     272  7127      940        46        64         23 #> 30      1295         109     245  7253      903        43        62         38 #> 31      1275         121     215  7285      892        40        68         41 #> 32      1336         120     318  7083      915        50        70         38 #> 33      1309         122     241  7257      870        46        72         35 #> 34      1340         114     189  7337      820        48        72         21 #> 35      1299         116     253  7309      823        40        69         27 #> 36      1221         107     221  7441      798        54        70         28 #> 37      1245          72     283  7395      829        44        67         28 #> 38      1285         129     244  7323      819        57        65         36 #> 39      1248         107     313  7299      840        46        66         33 #> 40      1356         106     236  7209      866        48        75         36 #> 41      1260         102     228  7354      870        49        64         28 #> 42      1261         121     312  7238      877        47        65         25 #> 43      1304         124     279  7160      928        48        61         37 #> 44      1344         117     287  7129      897        51        65         41 #> 45      1323          96     300  7351      757        47        54         26 #> 46      1292         117     215  7351      839        48        61         32 #> 47      1254         118     244  7394      786        46        71         24 #> 48      1312         131     259  7167      939        41        69         20 #> 49      1213         109     301  7261      925        47        65         31 #> 50      1359          98     351  7262      780        41        56         16 #> 51      1266          97     263  7435      743        45        69         29 #> 52      1298          99     311  7311      787        45        67         23 #> 53      1272         116     279  7258      872        43        72         27 #> 54      1278          87     332  7379      771        44        53         24 #> 55      1184         112     311  7391      819        48        57         28 #> 56      1382         110     268  7241      828        39        60         30 #> 57      1183         146     292  7580      618        38        51         23 #> 58      1261         153     219  7355      818        52        70         26 #> 59      1198         136     239  7639      633        27        55         19 #> 60      1225         134     232  7658      616        36        49         26 #> 61      1339         166     208  7190      923        40        69         25 #> 62      1132         157     240  7641      638        45        60         31 #> 63      1381         183     245  7385      609        47        70         25 #> 64      1409         128     257  7257      759        43        57         16 #> 65      1306         127     250  7254      869        47        68         24 #> 66      1372         120     250  7355      702        44        68         28 #> 67      1336         113     242  7293      855        38        60         18 #> 68      1401         151     238  7164      857        45        72         36 #> 69      1390         119     234  7236      823        40        62         41 #> 70      1432         152     281  7029      949        39        55         25 #> 71      1412         124     298  7182      790        45        68         28 #> 72      1366         147     291  7197      783        51        70         34 #> 73      1383         118     273  7282      738        45        68         29 #> 74      1283         102     263  7400      763        54        65         28 #> 75      1296         136     260  7380      780        48        51         18 #> 76      1287         108     287  7343      826        44        44         23 #> 77      1351         159     296  7229      810        36        60         22 #> 78      1241          97     268  7499      709        52        69         36 #> 79      1267         101     300  7230      898        74        65         34 #> 80      1235         138     252  7322      861        54        66         36 #> 81      1255         103     223  7395      848        47        56         30 #> 82      1454         183     196  7057     1014        27        46         19 #> 83      1347         194     197  7277      895        25        46         15 #> 84      1364         204     225  6929     1084        21        50         14 #> 85      1410         199     216  7130      955        21        48         19 #> 86      1384         178     208  7105      999        29        67         26 #> 87      1412         185     217  6842     1203        34        72         32 #> 88      1410         232     280  6715     1233        32        60         24 #> 89      1509         209     257  6647     1240        42        62         30 #> 90      1317         197     256  7036     1067        40        60         22 #> 91      1286         192     203  7132     1053        38        65         28 #> 92      1273         191     202  6862     1303        43        70         28 #> 93      1463         183     183  6747     1307        36        60         24 #> 94      1399         187     191  6861     1233        38        60         17 #> 95      1413         193     208  6875     1202        30        60         18 #> 96      1369         206     203  6953     1168        35        50         16 #> 97      1488         172     170  6920     1144        37        54         14 #> 98      1323         160     205  6911     1298        24        50         17 #> 99      1311         166     170  6902     1312        41        69         28 #> 100     1286         163     183  7040     1230        29        57         12 #> 101     1380         173     188  7038     1139        31        44         14 #> 102     1394         164     223  7086     1042        24        43         23 #> 103     1324         174     198  6863     1289        36        70         21 #> 104     1290         157     192  7000     1263        26        51         19 #> 105     1361         163     196  6888     1273        37        58         24 #> 106     1387         182     242  6913     1101        44        68         30 #> 107     1369         180     181  7000     1130        39        45         24 #> 108     1303         165     175  7025     1243        31        41         16 #> 109     1346         160     169  7072     1151        39        48         15 #> 110     1369         171     184  6937     1246        30        48         15 #> 111     1305         172     169  7004     1260        28        50         11 #> 112     1351         179     186  6935     1243        36        50         19 #> 113     1283         151     182  7000     1271        40        52         21 #> 114     1449         175     198  6883     1162        40        70         22 #> 115     1310         180     183  7054     1202        26        32         12 #> 116     1360         163     176  6901     1280        28        65         27 #> 117     1300         187     196  6920     1253        41        76         25 #> 118     1368         171     218  7010     1057        41        54         26 #> 119     1207         151     156  7159     1234        27        51         14 #> 120     1348         154     183  6917     1277        48        56         16 #> 121     1334         186     229  7261      827        34        56         20 #> 122     1301         156     207  7003     1229        41        48         14 #> 123     1226         181     213  6961     1230        47        74         26 #> 124     1201         168     190  7100     1216        43        64         16 #> 125     1297         153     177  7004     1260        35        60         16 #> 126     1248         163     158  7103     1222        31        60         14 #> 127     1335         159     197  6974     1220        36        60         17 #> 128     1219         167     171  7087     1254        35        50         16 #> 129     1318         179     177  7030     1194        35        42         25 #> 130     1264         167     166  7130     1187        22        52         12 #> 131     1201         175     201  7129     1193        36        49         15 #> 132     1252         180     181  7055     1214        31        59         38 #> 133     1273         182     209  6965     1191        43        74         23 #> 134     1351         179     170  7034     1154        35        66         10 #> 135     1336         155     212  7103     1086        33        55         20 #> 136     1499         201     182  6803     1204        30        56         24 #> 137     1425         198     193  7032     1041        31        52         17 #> 138     1358         204     227  6962     1109        41        65         34 #> 139     1346         181     257  7147      933        40        60         36 #> 140     1392         186     256  6732     1278        53        64         29 #> 141     1311         166     222  7006     1147        41        80         27 #> 142     1314         171     229  6923     1198        47        76         42 #> 143     1409         200     207  6842     1224        31        60         27 #> 144     1342         174     221  6993     1147        36        64         23 #> 145     1387         182     206  7100     1020        34        54         17 #> 146     1413         202     205  6920     1165        36        46         13 #> 147     1430         209     225  6800     1200        32        59         27 #> 148     1336         185     223  6956     1155        56        73         16 #> 149     1372         200     200  6916     1189        33        50         22 #> 150     1330         157     228  7055     1108        42        55         25 #> 151     1412         207     208  6822     1239        36        51         28 #> 152     1321         209     217  6948     1178        42        62         23 #> 153     1401         200     217  6980     1073        40        68         21 #> 154     1401         214     217  6734     1293        44        69         27 #> 155     1457         168     242  6724     1266        54        59         30 #> 156     1451         199     221  6835     1177        37        51         29 #> 157     1438         206     248  6806     1183        34        57         28 #> 158     1462         204     237  6644     1309        42        54         28 #> 159     1529         215     203  6602     1310        45        69         27 #> 160     1510         189     245  6752     1188        36        52         28 #> 161     1437         222     184  6803     1240        43        56         16 #> 162     1327         129     247  7024     1157        38        56         22 #> 163     1438         172     252  6630     1380        40        64         24 #> 164     1447         176     189  6849     1180        42        64         26 #> 165     1355         144     214  6972     1198        33        60         24 #> 166     1369         156     241  6890     1209        42        63         30 #> 167     1471         188     276  6697     1269        34        51         16 #> 168     1456         179     240  6738     1267        41        65         14 #> 169     1314         140     207  7020     1220        28        59         12 #> 170     1408         176     192  6909     1195        45        50         25 #> 171     1397         172     191  7107     1018        36        50         29 #> 172     1413         191     186  6937     1180        31        46         13 #> 173     1539         194     213  6764     1178        38        58         16 #> 174     1304         159     234  7019     1174        38        53         19 #> 175     1341         160     231  7033     1069        40        67         33 #> 176     1508         208     249  6641     1311        25        43         20 #> 177     1515         226     257  6595     1287        41        63         16 #> 178     1262         165     235  7120     1113        32        51         21 #> 179     1307         197     238  7003     1144        37        50         24 #> 180     1294         159     253  7009     1190        30        52         13 #> 181     1460         187     215  6843     1172        35        56         32 #> 182     1476         187     203  6837     1197        36        48         22 #> 183     1482         178     197  6814     1201        40        64         24 #> 184     1388         176     185  7008     1111        48        53         31 #> 185     1367         172     235  7066     1054        35        45         26 #> 186     1272         207     205  7152     1098        37        52         22 #> 187     1323         157     234  7132     1022        38        58         31 #> 188     1206         218     242  7193     1002        37        54         25 #> 189     1383         157     217  7018     1090        40        60         37 #> 190     1521         190     238  6956      986        36        50         23 #> 191     1350         168     227  6986     1165        29        58         17 #> 192     1422         181     218  6813     1230        30        59         21 #> 193     1298         166     224  6986     1162        34        65         31 #> 194     1447         236     245  6607     1336        33        51         21 #> 195     1347         197     211  6795     1300        32        59         34 #> 196     1339         170     253  6989     1110        29        63         23 #> 197     1388         183     216  6867     1208        28        61         21 #> 198     1527         260     232  6488     1370        31        45         20 #> 199     1495         237     236  6571     1318        32        58         26 #> 200     1487         246     251  6504     1390        29        53         19 #> 201     1399         180     232  6855     1190        32        66         22 #> 202     1489         215     242  6777     1145        30        60         22 #> 203     1339         166     226  6928     1198        30        60         23 #> 204     1482         246     238  6444     1462        27        50         20 #> 205     1434         172     255  6646     1354        27        59         25 #> 206     1347         156     214  6850     1313        25        48         19 #> 207     1340         158     233  6848     1272        32        63         25 #> 208     1453         180     244  6752     1238        34        54         23 #> 209     1306         149     226  7082     1097        33        61         24 #> 210     1349         161     217  6997     1138        31        62         23 #> 211     1254         151     205  7319      947        28        54         23 #> 212     1168         144     220  7230     1109        31        52         28 #> 213     1346         167     224  6959     1111        30        49         23 #> 214     1390         184     212  6898     1189        29        44         19 #> 215     1283         149     224  7077     1104        30        57         32 #> 216     1214         137     232  7269     1005        32        55         23 #> 217     1491         227     205  6941      988        33        68         34 #> 218     1479         218     207  7039      887        36        65         36 #> 219     1445         174     228  6875     1123        29        69         31 #> 220     1439         183     218  6775     1226        32        66         29 #> 221     1387         154     204  6991     1090        34        74         32 #> 222     1426         169     192  7025     1043        31        64         27 #> 223     1451         200     208  6980     1006        30        62         31 #> 224     1493         204     188  6913     1044        32        61         35 #> 225     1419         192     207  6996     1014        36        70         36 #> 226     1342         177     199  7172      952        34        65         33 #> 227     1349         152     236  7145      949        35        75         29 #> 228     1440         196     208  6938     1070        32        61         26 #> 229     1460         215     197  6918     1081        28        55         23 #> 230     1249         133     205  7417      827        33        72         33 #> 231     1348         159     238  7017     1081        31        67         25 #> 232     1341         155     244  6958     1144        32        68         26 #> 233     1398         149     204  7182      907        29        76         30 #> 234     1454         200     199  6910     1090        30        62         25 #> 235     1334         153     219  6928     1214        33        66         24 #> 236     1438         204     189  7107      910        33        63         27 #> 237     1303         138     212  7170     1016        34        69         25 #> 238     1323         147     210  7108     1070        33        61         20 #> 239     1417         169     207  6875     1184        34        57         27 #> 240     1360         167     225  6883     1220        31        55         27 #> 241     1420         179     214  6923     1121        33        56         27 #> 242     1472         218     214  6724     1238        29        53         23 #> 243     1368         174     205  7042     1066        31        57         26 #> 244     1367         173     228  6948     1141        32        53         24 #> 245     1403         173     209  6843     1210        33        63         33 #> 246     1413         197     206  6737     1387        34        60         31 #> 247     1201         138     207  7011     1269        37        64         35 #> 248     1359         180     207  6895     1203        33        61         30 #> 249     1518         198     225  6681     1243        29        57         24 #> 250     1434         185     189  6771     1269        30        62         25 #> 251     1367         162     179  6772     1368        33        64         27 #> 252     1461         181     197  6783     1246        26        57         23 #> 253     1368         161     198  7030     1095        33        59         31 #> 254     1419         159     215  6862     1193        35        60         31 #> 255     1514         162     298  6725     1119        45        93         30 #> 256     1328         171     253  6987     1030        38        83         39 #> 257     1469         160     337  6675     1127        44        94         36 #> 258     1222         133     227  7425      824        36        69         35 #> 259     1639         172     331  6510     1124        46        91         32 #> 260     1345         133     272  6801     1194        48        83         37 #> 261     1339         170     275  6838     1060        46        88         43 #> 262     1194         135     263  7277      889        44        95         41 #> 263     1112          68     375  7770      448        52        69         45 #> 264     1222          70     329  7605      566        48        67         43 #> 265     1136          72     341  7616      661        49        65         32 #> 266      926          41     277  7815      784        45        65         25 #> 267     1105          69     373  7714      532        51        68         37 #> 268     1109          79     305  7576      763        45        64         36 #> 269     1284          93     265  7235      893        43        77         46 #> 270     1120          69     277  7416      946        42        59         36 #> 271      916          52     281  7870      694        42        64         58 #> 272      905          49     288  7747      812        49        71         56 #> 273     1206          55     287  7329      935        44        74         42 #> 274     1457         182     267  7020      863        41        84         37 #> 275     1327         140     193  7328      823        36        87         35 #> 276     1303         100     251  7045     1049        40        86         40 #> 277     1444         175     259  6876     1027        34        78         32 #> 278     1505         243     226  6962      858        30        72         27 #> 279     1429         162     223  6917     1041        37        77         40 #> 280     1491         162     211  6994      928        37        97         38 #> 281     1393         128     211  7189      870        38        93         40 #> 282     1404         134     210  7110      923        40       101         43 #> 283     1222         130     214  7374      856        38        89         45 #> 284     1153          74     316  7593      705        42        64         32 #> 285     1169          76     307  7553      728        43        69         32 #> 286     1369         104     237  7375      775        39        70         15 #> 287      993          58     267  7743      773        41        62         44 #> 288      980          53     254  7719      815        44        69         47 #> 289      967          55     273  7692      833        45        63         47 #> 290     1128          73     354  7527      728        44        76         38 #> 291     1188          85     273  7445      814        44        73         42 #> 292     1257          95     247  7405      812        43        70         35 #> 293     1262          88     301  7471      704        43        71         31 #> 294     1283         153     196  7107     1115        37        60         28 #> 295     1263         155     199  7140     1148        31        42         18 #> 296     1369         158     215  7160      958        38        69         32 #> 297     1353         172     175  6965     1212        28        75         19 #> 298     1187         139     185  7427      952        29        56         22 #> 299     1732         231     156  6437     1313        45        62         23 #> 300     1620         255     166  6628     1212        29        62         27 #> 301     1543         172     193  6740     1157        52        87         34 #> 302     1498         170     195  6804     1206        35        66         23 #> 303     1399         169     171  7011     1100        36        72         16 #> 304     1293         156     191  7101     1111        32        60         31 #> 305     1420         175     152  7004     1149        27        50         20 #> 306     1721         238     255  6300     1350        35        70         28 #> 307     1742         221     156  6415     1315        43        82         23 #> 308     1391         187     189  6975     1062        52        70         45 #> 309     1517         206     249  6680     1205        33        80         27 #> 310     1269         157     193  7140     1148        31        40         18 #> 311     1577         204     208  6732     1183        20        52         20 #> 312     1590         241     195  6705     1149        27        68         21 #> 313     1621         280     197  6608     1179        28        58         27 #> 314     1753         275     236  6367     1214        23        61         27 #> 315     1679         260     177  6568     1191        30        59         33 #> 316     1419         203     176  6973     1083        38        78         27 #> 317     1693         236     174  6499     1204        51       102         37 #> 318     1692         270     234  6499     1196        31        59         15 #> 319     1638         252     215  6570     1199        39        53         29 #> 320     1497         247     219  6621     1270        36        73         32 #> 321     1442         222     194  6677     1314        36        72         38 #> 322     1680         270     170  6440     1310        31        62         28 #> 323     1463         164     185  6909     1154        49        58         17 #> 324     1129         120     222  7272     1112        43        98          2 #> 325     1042         135     210  7376     1116        35        90          3 #> 326     1103          96     210  7380     1085        32        94          3 #> 327     1118          97     221  7279     1154        35        94          2 #> 328     1052          95     215  7388     1126        31        92          1 #> 329     1116         102     231  7290     1168        26        66          1 #> 330     1108         132     231  7319     1101        20        66          2 #> 331     1129         108     212  7386     1074        28        62          3 #> 332     1085          91     223  7384     1126        28        62          3 #> 333     1104         103     233  7322     1147        27        61          2 #> 334     1098          88     212  7338     1140        28        67          1 #> 335     1135          98     251  7120     1314        20        61          2 #> 336     1158         108     245  7065     1326        22        75          1 #> 337     1133         110     241  7080     1342        21        68          3 #> 338     1095         125     250  7120     1305        21        83          1 #> 339     1201          87     238  6990     1383        25        75          3 #> 340     1213         112     245  7007     1335        22        65          3 #> 341     1108          92     231  7367     1110        29        62          3 #> 342     1075         103     207  7413     1096        32        68          2 #> 343     1059          96     228  7386     1128        25        72          2 #> 344     1176          92     207  7347     1057        35        82          1 #> 345     1159          98     213  7320     1108        38        64          1 #> 346     1132          80     201  7398     1095        27        67          2 #> 347     1107          75     220  7399     1096        29        90          1 #> 348     1092         104     234  7355     1126        28        58          2 #> 349     1119          81     219  7409     1057        33        81          2 #> 350     1106          93     212  7381     1104        35        68          1 #> 351     1047         101     238  7385     1120        28        89          1 #> 352     1165          99     214  7331     1101        22        67          3 #> 353     1158          84     201  7327     1123        29        77          2 #> 354     1095          88     203  7415     1093        37        78          1 #> 355     1176          75     205  7396     1107        33        74          2 #> 356     1103         109     220  7335     1140        28        59          2 #> 357     1112          92     209  7356     1125        32        73          2 #> 358     1091          93     222  7377     1113        20        53          2 #> 359     1080          98     219  7371     1125        33        78          1 #> 360     1051         108     227  7403     1114        30        66          3 #> 361     1096          84     211  7415     1091        30        71          2 #> 362     1142          97     225  7341     1101        28        65          1 #> 363     1047          96     236  7399     1107        32        80          3 #> 364     1114          86     210  7359     1116        31        83          2 #> 365     1140          93     241  7324     1098        23        74          1 #> 366     1075          91     200  7410     1107        36        80          1 #> 367     1092         106     219  7427     1125        33        77          1 #> 368     1076          95     204  7408     1130        27        79          2 #> 369     1178          89     201  7381     1099        34        87          2 #> 370     1095         104     223  7367     1111        43        56          2 #> 371     1166          97     272  6971     1390        20        83          3 #> 372     1154         119     257  7130     1253        22        61          1 #> 373     1177         111     241  6882     1470        22        95          2 #> 374     1160          96     240  7043     1357        24        79          2 #> 375     1122         104     241  7145     1313        15        58          1 #> 376     1132          99     257  7065     1362        24        90          3 #> 377     1096         100     260  7162     1282        25        74          2 #> 378     1131          87     233  7144     1307        25        72          3 #> 379     1184         105     258  7020     1340        26        66          2 #> 380     1135          94     235  7123     1320        24        67          2 #> 381     1084          96     240  7164     1330        28        57          1 #> 382     1086         127     252  7159     1285        28        62          2 #> 383     1140          95     258  7085     1347        23        71          3 #> 384     1138         101     254  7103     1310        25        68          1 #> 385     1159         110     261  7068     1297        27        77          2 #> 386     1051          78     211  7421     1146        30        82          2 #> 387     1048          79     213  7439     1130        28        61          2 #> 388     1061          86     220  7421     1102        29        79          3 #> 389     1105          88     210  7353     1142        28        72          1 #> 390     1145          35     237  7208     1118        20        46          2 #> 391     1049          96     219  7303     1168        22        47          2 #> 392     1105         120     218  7302     1158        23        45          3 #> 393     1030          84     214  7403     1177        21        70          1 #> 394     1070          98     215  7280     1240        28        68          3 #> 395     1103          81     208  7310     1177        30        90          3 #> 396     1040         101     205  7368     1176        25        85          3 #> 397     1100          95     210  7320     1113        22        72          3 #> 398     1118          85     199  7415     1060        36        86          3 #> 399     1065          98     230  7345     1163        24        74          1 #> 400     1131          78     221  7358     1120        22        69          2 #> 401     1080         120     218  7296     1145        35       105          2 #> 402     1075          86     231  7403     1109        22        73          3 #> 403     1040         103     228  7364     1173        25        66          2 #> 404     1128          82     203  7320     1148        30        88          1 #> 405     1060         111     231  7363     1149        20        65          1 #> 406     1103          78     220  7365     1149        20        65          2 #> 407     1110          91     201  7318     1185        24        74          2 #> 408     1091         108     218  7383     1183        28        88          3 #> 409     1094          96     220  7341     1127        26        96          2 #> 410     1131          87     208  7170     1308        28        57          2 #> 411     1175         108     214  7076     1307        33        85          2 #> 412     1076          77     202  7243     1305        29        67          1 #> 413     1120          90     240  7068     1383        23        75          1 #> 414     1152         111     238  7080     1372        25        81          2 #> 415     1141          95     250  7035     1388        22        68          2 #> 416     1098         103     267  7135     1301        24        76          2 #> 417     1126         100     236  7062     1380        26        69          1 #> 418     1087          89     243  7200     1302        18        60          1 #> 419     1115          96     236  7085     1372        20        75          2 #> 420     1178          92     241  7006     1376        22        84          1 #> 421     1162         106     242  7025     1368        25        71          2 #> 422     1085          70     180  7955      605        20        50          1 #> 423     1085          70     185  7955      600        25        55          1 #> 424     1090          60     190  7950      600        28        47          2 #> 425     1080          65     189  7960      602        35        20          1 #> 426     1090          60     195  7955      600        28        42          2 #> 427     1105          55     200  7900      600        37        55          2 #> 428     1060          75     175  7975      610        20        55          2 #> 429     1050          70     170  7977      605        28        65          1 #> 430     1100          55     198  7905      600        35        50          3 #> 431     1065          65     178  7965      605        22        65          2 #> 432     1085          60     188  7955      602        30        50          2 #> 433     1080          65     180  7960      605        25        55          1 #> 434     1085          60     190  7955      602        30        53          1 #> 435     1075          68     195  7960      602        20        40          3 #> 436     1090          58     192  7950      600        35        40          3 #> 437     1095          60     198  7945      600        38        34          2 #> 438     1090          58     195  7950      600        30        42          2 #> 439     1095          58     198  7950      602        35        32          1 #> 440     1090          58     195  7940      600        35        42          2 #> 441     1095          58     198  7945      600        35        34          1 #> 442     1095          55     200  7940      600        35        45          3 #> 443     1080          70     188  7965      608        28        36          3 #> 444     1090          60     195  7950      600        32        38          2 #> 445     1105          55     200  7900      595        39        56          1 #> 446     1110          50     205  7900      595        40        52          1 #> 447     1075          70     198  7978      608        28        33          2 #> 448     1075          65     185  7980      608        35        42          3 #> 449     1065          75     180  7975      610        25        50          3 #> 450     1070          75     188  7980      602        22        45          2 #> 451     1070          75     188  7980      602        22        45          1 #> 452     1100          70     200  7910      610        39        44          1 #> 453     1075          70     185  7960      610        22        58          2 #> 454     1050          78     175  7990      610        18        59          3 #> 455     1090          60     198  7945      600        32        35          2 #> 456     1050          78     188  7990      608        28        23          3 #> 457     1075          70     190  7975      605        28        27          3 #> 458     1098          54     202  7945      595        42        32          2 #> 459     1105          15     198  8005      575        52        20          2 #> 460     1110          75     220  7915      510        55        65          2 #> 461     1058          50     178  7988      626        40        55          3 #> 462     1115          30     225  7955      600        55        15          2 #> 463     1105          30     198  7995      570        52        20          3 #> 464     1072          49     178  7980      615        48        48          2 #> 465     1110          15     210  7990      570        50        20          2 #> 466     1110          80     215  7910      525        50        60          1 #> 467     1055          60     175  7985      620        45        50          1 #> 468     1100          80     215  7930      535        45        60          2 #> 469     1105          55     205  7965      600        25        20          2 #> 470     1095          50     210  7948      600        25        35          2 #> 471     1110          50     220  7950      600        52        10          2 #> 472     1092          37     210  7955      600        40        40          3 #> 473     1290          60     260  7550      670        70       100          2 #> 474     1170          80     230  7690      720        40        70          1 #> 475     1100          90     250  7680      760        30        80          2 #> 476     1120          70     240  7720      730        40        80          2 #> 477     1160          70     250  7650      750        30        90          1 #> 478     1200          50     210  7770      690        20        50          3 #> 479     1140          50     200  7990      580        10        20          1 #> 480     1220          80     240  7610      760        30        60          2 #> 481     1180          90     250  7520      800        50       100          2 #> 482     1210          70     250  7560      780        40        90          2 #> 483     1220          80     220  7540      770        60       100          2 #> 484     1180         100     190  7520      820        50       100          1 #> 485     1160          90     220  7580      790        40        90          1 #> 486     1130         100     240  7620      780        30        90          1 #> 487     1080         100     260  7710      750        20        70          2 #> 488     1090          90     280  7730      720        50       100          1 #> 489     1020         100     270  7770      710        40        90          1 #> 490     1090          90     250  7680      760        60        80          1 #> 491     1120         100     260  7720      680        30        80          2 #> 492     1080          80     240  7830      670        30        70          2 #> 493     1160          70     230  7860      640        10        20          1 #> 494     1100          80     240  7820      670        20        70          2 #> 495     1050         100     250  7930      630        10        30          3 #> 496     1090          90     270  7780      690        30        50          3 #> 497     1120          80     260  7750      680        30        80          3 #> 498     1120         100     250  7680      730        40        70          2 #> 499     1190          90     230  7670      710        30        80          2 #> 500     1170         110     250  7620      740        20        90          1 #> 501     1120         100     230  7720      730        20        70          1 #> 502     1190          80     270  7690      720        10        40          2 #> 503     1400          90     270  7420      800         0        20          2 #> 504     1350          80     250  7520      760        10        30          1 #> 505     1090          60     220  7890      670        10        60          2 #> 506     1150          90     230  7790      650        30        60          1 #> 507     1240          90     220  7820      590        10        30          1 #> 508     1220         100     240  7890      530         0        10          2 #> 509     1180          80     250  7870      580        10        30          2 #> 510     1170         110     240  7730      630        30        90          1 #> 511     1170         100     280  7710      640        20        70          3 #> 512     1180          80     220  7790      680        10        40          1 #> 513     1200          90     240  7820      590        10        50          2 #> 514     1140          90     240  7880      570        20        60          3 #> 515     1160          70     210  7870      580        30        80          3 #> 516     1130          80     250  7780      650        40        60          3 #> 517     1150          80     240  7800      630        30        70          2 #> 518     1110          70     240  7820      670        20        70          3 #> 519     1150          70     220  7850      620        20        40          2 #> 520     1180          80     240  7760      670        20        50          2 #> 521     1020          80     250  7920      680        10        30          3 #> 522      610          80     230  8410      650         0        20          3 #> 523     1190         150     290  7340     1020         0        10          2 #> 524     1110         130     210  7550     1000         0         0          1 #> 525     1020         100     220  7530     1030         0         0          3 #> 526     1070         120     210  7600      990         0        10          3 #> 527     1010          90     350  7480     1050        10        10          1 #> 528     1060         140     240  7680      830        10        40          2 #> 529     1060         140     270  7620      880        10        20          1 #> 530     1030         100     230  7740      900         0         0          2 #> 531     1120         130     250  7530      970         0         0          3 #> 532     1030         110     220  7760      980         0         0          2 #> 533     1070         100     230  7600      990        10         0          1 #> 534     1140         180     220  7610      850        10        10          2 #> 535     1090         180     230  7590      860        10        40          2 #> 536      980         110     300  7720      910        10         0          3 #> 537      980          90     330  7540     1040         0         0          2 #> 538      960          90     200  7810      940         0         0          2 #> 539      990          90     210  7780      930         0         0          2 #> 540     1060         120     210  7600     1010         0         0          1 #> 541     1240         150     250  7610      730        10        10          1 #> 542     1060          90     310  7850      690         0         0          2 #> 543     1020         100     290  7620      960         0        10          2 #> 544      970          90     220  7700     1020         0         0          3 #> 545     1180         130     220  7450     1010         0        10          2 #> 546     1060         140     240  7690      850        10        10          1 #> 547      990         100     250  7630     1030         0         0          3 #> 548     1010          90     350  7630      940        10         0          3 #> 549     1040          90     250  7780      820        10        10          1 #> 550     1040          90     250  7810      810        10        10          2 #> 551     1020          90     350  7620      920        10         0          3 #> 552     1020          90     260  7620     1010         0         0          3 #> 553     1010          90     350  7610      930        10         0          3 #> 554      920         110     340  7720      910         0         0          3 #> 555     1030         100     250  7710      900         0        10          2 #> 556      960          90     300  7820      830         0         0          3 #> 557     1030         110     210  7810      840         0         0          1 #> 558     1010         100     240  7710      910        10        20          2 #> 559     1020          90     240  7800      850         0         0          2 #> 560     1120          90     300  7650      830         0        10          1 #> 561     1090          90     290  7710      800        10         0          2 #> 562     1100         120     280  7630      770        10        10          2 #> 563     1090          80     240  7820      760        10         0          2 #> 564     1150          90     250  7720      810         0        10          3 #> 565     1110          90     230  7810      750         0        10          2 #> 566     1010         110     210  7720      950         0         0          1 #> 567     1070         100     220  7730      870        10        10          2 #> 568     1280         110     290  7490      790        10        10          2 #> 569     1060         100     270  7740      810        10        10          3 #> 570     1010          90     210  7720      970         0         0          2 #> 571      990         120     250  7750      870        10        10          2 #> 572      960          80     240  7950      740        10        20          2 m1('measures') #> [1] \"mean\"   \"median\" \"sd\"     \"q1\"     \"q3\""},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Closure of Two Dimensional Measures — measures2d","title":"Closure of Two Dimensional Measures — measures2d","text":"Function creates 2d measures object can used   l_ng_plots l_ng_ranges.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closure of Two Dimensional Measures — measures2d","text":"","code":"measures2d(data, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closure of Two Dimensional Measures — measures2d","text":"data data.frame data used calculate measures ... named arguments, name function name argument function calculate measure variable.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closure of Two Dimensional Measures — measures2d","text":"measures object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Closure of Two Dimensional Measures — measures2d","text":"information run: l_help(\"learn_R_display_graph.html#measures\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/measures2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closure of Two Dimensional Measures — measures2d","text":"","code":"m <- measures2d(oliveAcids, separator='*', cov=cov, cor=cor) m #> 2d measure closure with measures: cov, cor  m() #>                                  cov         cor #> palmitic*palmitoleic     7395.224119  0.83560497 #> palmitic*stearic        -1055.562037 -0.17039178 #> palmitic*oleic         -57287.524096 -0.83733535 #> palmitic*linoleic       18857.690262  0.46068446 #> palmitic*linolenic        698.182908  0.31932669 #> palmitic*arachidic        847.932556  0.22829912 #> palmitic*eicosenoic      1191.801501  0.50195179 #> palmitoleic*stearic      -428.573959 -0.22218545 #> palmitoleic*oleic      -18159.280920 -0.85243835 #> palmitoleic*linoleic     7922.999106  0.62162666 #> palmitoleic*linolenic      63.388865  0.09311163 #> palmitoleic*arachidic      98.855890  0.08548117 #> palmitoleic*eicosenoic    307.805255  0.41635048 #> stearic*oleic            1693.924020  0.11359873 #> stearic*linoleic        -1764.851745 -0.19781693 #> stearic*linolenic           9.014684  0.01891719 #> stearic*arachidic         -33.172437 -0.04097892 #> stearic*eicosenoic         72.643911  0.14037748 #> oleic*linoleic         -83782.213611 -0.85031837 #> oleic*linolenic         -1148.198094 -0.21817123 #> oleic*arachidic         -2860.495450 -0.31996234 #> oleic*eicosenoic        -2424.055111 -0.42414586 #> linoleic*linolenic       -180.862014 -0.05743858 #> linoleic*arachidic       1128.477117  0.21097260 #> linoleic*eicosenoic       304.481605  0.08904499 #> linolenic*arachidic       177.203618  0.62023577 #> linolenic*eicosenoic      105.625243  0.57831851 #> arachidic*eicosenoic      101.970644  0.32866349 m(keep=olive$palmitic>1360) #>                                 cov         cor #> palmitic*palmitoleic     1975.76196  0.64958597 #> palmitic*stearic         -241.34237 -0.08521612 #> palmitic*oleic         -13774.18135 -0.73093470 #> palmitic*linoleic        4761.02058  0.34501728 #> palmitic*linolenic        -22.57707 -0.03493272 #> palmitic*arachidic        205.75926  0.19437962 #> palmitic*eicosenoic        16.62401  0.02747476 #> palmitoleic*stearic      -304.56498 -0.26254549 #> palmitoleic*oleic       -5783.43692 -0.74926458 #> palmitoleic*linoleic     3206.22945  0.56724648 #> palmitoleic*linolenic     -57.82659 -0.21843835 #> palmitoleic*arachidic     -45.45330 -0.10483183 #> palmitoleic*eicosenoic    -20.65618 -0.08334593 #> stearic*oleic             263.06768  0.03660183 #> stearic*linoleic        -1179.22795 -0.22405835 #> stearic*linolenic          36.76326  0.14914252 #> stearic*arachidic          57.43522  0.14226308 #> stearic*eicosenoic         18.93907  0.08206901 #> oleic*linoleic         -29898.57327 -0.85376517 #> oleic*linolenic            46.31955  0.02824076 #> oleic*arachidic          -164.69673 -0.06130890 #> oleic*eicosenoic           41.56957  0.02707203 #> linoleic*linolenic       -137.40795 -0.11440683 #> linoleic*arachidic       -381.98252 -0.19418246 #> linoleic*eicosenoic      -222.03097 -0.19746347 #> linolenic*arachidic        44.88053  0.48713418 #> linolenic*eicosenoic       21.37029  0.40579602 #> arachidic*eicosenoic       53.79682  0.62370668 m('data') #>     palmitic palmitoleic stearic oleic linoleic linolenic arachidic eicosenoic #> 1       1075          75     226  7823      672        36        60         29 #> 2       1088          73     224  7709      781        31        61         29 #> 3        911          54     246  8113      549        31        63         29 #> 4        966          57     240  7952      619        50        78         35 #> 5       1051          67     259  7771      672        50        80         46 #> 6        911          49     268  7924      678        51        70         44 #> 7        922          66     264  7990      618        49        56         29 #> 8       1100          61     235  7728      734        39        64         35 #> 9       1082          60     239  7745      709        46        83         33 #> 10      1037          55     213  7944      633        26        52         30 #> 11      1051          35     219  7978      605        21        65         24 #> 12      1036          59     235  7868      661        30        62         44 #> 13      1074          70     214  7728      747        50        79         33 #> 14       875          52     243  8018      655        41        79         32 #> 15       952          49     254  7795      780        50        75         41 #> 16      1155          98     201  7606      816        32        60         29 #> 17       943          94     183  7840      788        42        75         31 #> 18      1278          69     205  7344      957        45        70         28 #> 19       961          70     195  7958      742        46        75         30 #> 20       952          77     258  7820      736        43        78         33 #> 21      1074          67     236  7692      716        56        83         45 #> 22       995          46     288  7806      679        56        86         40 #> 23      1056          53     247  7703      700        54        89         51 #> 24      1065          39     234  7876      703        42        74         26 #> 25      1065          45     245  7779      696        47        82         38 #> 26      1315         139     230  7299      832        42        60         32 #> 27      1321         136     217  7174      950        43        63         30 #> 28      1359         115     246  7234      874        45        63         18 #> 29      1378         111     272  7127      940        46        64         23 #> 30      1295         109     245  7253      903        43        62         38 #> 31      1275         121     215  7285      892        40        68         41 #> 32      1336         120     318  7083      915        50        70         38 #> 33      1309         122     241  7257      870        46        72         35 #> 34      1340         114     189  7337      820        48        72         21 #> 35      1299         116     253  7309      823        40        69         27 #> 36      1221         107     221  7441      798        54        70         28 #> 37      1245          72     283  7395      829        44        67         28 #> 38      1285         129     244  7323      819        57        65         36 #> 39      1248         107     313  7299      840        46        66         33 #> 40      1356         106     236  7209      866        48        75         36 #> 41      1260         102     228  7354      870        49        64         28 #> 42      1261         121     312  7238      877        47        65         25 #> 43      1304         124     279  7160      928        48        61         37 #> 44      1344         117     287  7129      897        51        65         41 #> 45      1323          96     300  7351      757        47        54         26 #> 46      1292         117     215  7351      839        48        61         32 #> 47      1254         118     244  7394      786        46        71         24 #> 48      1312         131     259  7167      939        41        69         20 #> 49      1213         109     301  7261      925        47        65         31 #> 50      1359          98     351  7262      780        41        56         16 #> 51      1266          97     263  7435      743        45        69         29 #> 52      1298          99     311  7311      787        45        67         23 #> 53      1272         116     279  7258      872        43        72         27 #> 54      1278          87     332  7379      771        44        53         24 #> 55      1184         112     311  7391      819        48        57         28 #> 56      1382         110     268  7241      828        39        60         30 #> 57      1183         146     292  7580      618        38        51         23 #> 58      1261         153     219  7355      818        52        70         26 #> 59      1198         136     239  7639      633        27        55         19 #> 60      1225         134     232  7658      616        36        49         26 #> 61      1339         166     208  7190      923        40        69         25 #> 62      1132         157     240  7641      638        45        60         31 #> 63      1381         183     245  7385      609        47        70         25 #> 64      1409         128     257  7257      759        43        57         16 #> 65      1306         127     250  7254      869        47        68         24 #> 66      1372         120     250  7355      702        44        68         28 #> 67      1336         113     242  7293      855        38        60         18 #> 68      1401         151     238  7164      857        45        72         36 #> 69      1390         119     234  7236      823        40        62         41 #> 70      1432         152     281  7029      949        39        55         25 #> 71      1412         124     298  7182      790        45        68         28 #> 72      1366         147     291  7197      783        51        70         34 #> 73      1383         118     273  7282      738        45        68         29 #> 74      1283         102     263  7400      763        54        65         28 #> 75      1296         136     260  7380      780        48        51         18 #> 76      1287         108     287  7343      826        44        44         23 #> 77      1351         159     296  7229      810        36        60         22 #> 78      1241          97     268  7499      709        52        69         36 #> 79      1267         101     300  7230      898        74        65         34 #> 80      1235         138     252  7322      861        54        66         36 #> 81      1255         103     223  7395      848        47        56         30 #> 82      1454         183     196  7057     1014        27        46         19 #> 83      1347         194     197  7277      895        25        46         15 #> 84      1364         204     225  6929     1084        21        50         14 #> 85      1410         199     216  7130      955        21        48         19 #> 86      1384         178     208  7105      999        29        67         26 #> 87      1412         185     217  6842     1203        34        72         32 #> 88      1410         232     280  6715     1233        32        60         24 #> 89      1509         209     257  6647     1240        42        62         30 #> 90      1317         197     256  7036     1067        40        60         22 #> 91      1286         192     203  7132     1053        38        65         28 #> 92      1273         191     202  6862     1303        43        70         28 #> 93      1463         183     183  6747     1307        36        60         24 #> 94      1399         187     191  6861     1233        38        60         17 #> 95      1413         193     208  6875     1202        30        60         18 #> 96      1369         206     203  6953     1168        35        50         16 #> 97      1488         172     170  6920     1144        37        54         14 #> 98      1323         160     205  6911     1298        24        50         17 #> 99      1311         166     170  6902     1312        41        69         28 #> 100     1286         163     183  7040     1230        29        57         12 #> 101     1380         173     188  7038     1139        31        44         14 #> 102     1394         164     223  7086     1042        24        43         23 #> 103     1324         174     198  6863     1289        36        70         21 #> 104     1290         157     192  7000     1263        26        51         19 #> 105     1361         163     196  6888     1273        37        58         24 #> 106     1387         182     242  6913     1101        44        68         30 #> 107     1369         180     181  7000     1130        39        45         24 #> 108     1303         165     175  7025     1243        31        41         16 #> 109     1346         160     169  7072     1151        39        48         15 #> 110     1369         171     184  6937     1246        30        48         15 #> 111     1305         172     169  7004     1260        28        50         11 #> 112     1351         179     186  6935     1243        36        50         19 #> 113     1283         151     182  7000     1271        40        52         21 #> 114     1449         175     198  6883     1162        40        70         22 #> 115     1310         180     183  7054     1202        26        32         12 #> 116     1360         163     176  6901     1280        28        65         27 #> 117     1300         187     196  6920     1253        41        76         25 #> 118     1368         171     218  7010     1057        41        54         26 #> 119     1207         151     156  7159     1234        27        51         14 #> 120     1348         154     183  6917     1277        48        56         16 #> 121     1334         186     229  7261      827        34        56         20 #> 122     1301         156     207  7003     1229        41        48         14 #> 123     1226         181     213  6961     1230        47        74         26 #> 124     1201         168     190  7100     1216        43        64         16 #> 125     1297         153     177  7004     1260        35        60         16 #> 126     1248         163     158  7103     1222        31        60         14 #> 127     1335         159     197  6974     1220        36        60         17 #> 128     1219         167     171  7087     1254        35        50         16 #> 129     1318         179     177  7030     1194        35        42         25 #> 130     1264         167     166  7130     1187        22        52         12 #> 131     1201         175     201  7129     1193        36        49         15 #> 132     1252         180     181  7055     1214        31        59         38 #> 133     1273         182     209  6965     1191        43        74         23 #> 134     1351         179     170  7034     1154        35        66         10 #> 135     1336         155     212  7103     1086        33        55         20 #> 136     1499         201     182  6803     1204        30        56         24 #> 137     1425         198     193  7032     1041        31        52         17 #> 138     1358         204     227  6962     1109        41        65         34 #> 139     1346         181     257  7147      933        40        60         36 #> 140     1392         186     256  6732     1278        53        64         29 #> 141     1311         166     222  7006     1147        41        80         27 #> 142     1314         171     229  6923     1198        47        76         42 #> 143     1409         200     207  6842     1224        31        60         27 #> 144     1342         174     221  6993     1147        36        64         23 #> 145     1387         182     206  7100     1020        34        54         17 #> 146     1413         202     205  6920     1165        36        46         13 #> 147     1430         209     225  6800     1200        32        59         27 #> 148     1336         185     223  6956     1155        56        73         16 #> 149     1372         200     200  6916     1189        33        50         22 #> 150     1330         157     228  7055     1108        42        55         25 #> 151     1412         207     208  6822     1239        36        51         28 #> 152     1321         209     217  6948     1178        42        62         23 #> 153     1401         200     217  6980     1073        40        68         21 #> 154     1401         214     217  6734     1293        44        69         27 #> 155     1457         168     242  6724     1266        54        59         30 #> 156     1451         199     221  6835     1177        37        51         29 #> 157     1438         206     248  6806     1183        34        57         28 #> 158     1462         204     237  6644     1309        42        54         28 #> 159     1529         215     203  6602     1310        45        69         27 #> 160     1510         189     245  6752     1188        36        52         28 #> 161     1437         222     184  6803     1240        43        56         16 #> 162     1327         129     247  7024     1157        38        56         22 #> 163     1438         172     252  6630     1380        40        64         24 #> 164     1447         176     189  6849     1180        42        64         26 #> 165     1355         144     214  6972     1198        33        60         24 #> 166     1369         156     241  6890     1209        42        63         30 #> 167     1471         188     276  6697     1269        34        51         16 #> 168     1456         179     240  6738     1267        41        65         14 #> 169     1314         140     207  7020     1220        28        59         12 #> 170     1408         176     192  6909     1195        45        50         25 #> 171     1397         172     191  7107     1018        36        50         29 #> 172     1413         191     186  6937     1180        31        46         13 #> 173     1539         194     213  6764     1178        38        58         16 #> 174     1304         159     234  7019     1174        38        53         19 #> 175     1341         160     231  7033     1069        40        67         33 #> 176     1508         208     249  6641     1311        25        43         20 #> 177     1515         226     257  6595     1287        41        63         16 #> 178     1262         165     235  7120     1113        32        51         21 #> 179     1307         197     238  7003     1144        37        50         24 #> 180     1294         159     253  7009     1190        30        52         13 #> 181     1460         187     215  6843     1172        35        56         32 #> 182     1476         187     203  6837     1197        36        48         22 #> 183     1482         178     197  6814     1201        40        64         24 #> 184     1388         176     185  7008     1111        48        53         31 #> 185     1367         172     235  7066     1054        35        45         26 #> 186     1272         207     205  7152     1098        37        52         22 #> 187     1323         157     234  7132     1022        38        58         31 #> 188     1206         218     242  7193     1002        37        54         25 #> 189     1383         157     217  7018     1090        40        60         37 #> 190     1521         190     238  6956      986        36        50         23 #> 191     1350         168     227  6986     1165        29        58         17 #> 192     1422         181     218  6813     1230        30        59         21 #> 193     1298         166     224  6986     1162        34        65         31 #> 194     1447         236     245  6607     1336        33        51         21 #> 195     1347         197     211  6795     1300        32        59         34 #> 196     1339         170     253  6989     1110        29        63         23 #> 197     1388         183     216  6867     1208        28        61         21 #> 198     1527         260     232  6488     1370        31        45         20 #> 199     1495         237     236  6571     1318        32        58         26 #> 200     1487         246     251  6504     1390        29        53         19 #> 201     1399         180     232  6855     1190        32        66         22 #> 202     1489         215     242  6777     1145        30        60         22 #> 203     1339         166     226  6928     1198        30        60         23 #> 204     1482         246     238  6444     1462        27        50         20 #> 205     1434         172     255  6646     1354        27        59         25 #> 206     1347         156     214  6850     1313        25        48         19 #> 207     1340         158     233  6848     1272        32        63         25 #> 208     1453         180     244  6752     1238        34        54         23 #> 209     1306         149     226  7082     1097        33        61         24 #> 210     1349         161     217  6997     1138        31        62         23 #> 211     1254         151     205  7319      947        28        54         23 #> 212     1168         144     220  7230     1109        31        52         28 #> 213     1346         167     224  6959     1111        30        49         23 #> 214     1390         184     212  6898     1189        29        44         19 #> 215     1283         149     224  7077     1104        30        57         32 #> 216     1214         137     232  7269     1005        32        55         23 #> 217     1491         227     205  6941      988        33        68         34 #> 218     1479         218     207  7039      887        36        65         36 #> 219     1445         174     228  6875     1123        29        69         31 #> 220     1439         183     218  6775     1226        32        66         29 #> 221     1387         154     204  6991     1090        34        74         32 #> 222     1426         169     192  7025     1043        31        64         27 #> 223     1451         200     208  6980     1006        30        62         31 #> 224     1493         204     188  6913     1044        32        61         35 #> 225     1419         192     207  6996     1014        36        70         36 #> 226     1342         177     199  7172      952        34        65         33 #> 227     1349         152     236  7145      949        35        75         29 #> 228     1440         196     208  6938     1070        32        61         26 #> 229     1460         215     197  6918     1081        28        55         23 #> 230     1249         133     205  7417      827        33        72         33 #> 231     1348         159     238  7017     1081        31        67         25 #> 232     1341         155     244  6958     1144        32        68         26 #> 233     1398         149     204  7182      907        29        76         30 #> 234     1454         200     199  6910     1090        30        62         25 #> 235     1334         153     219  6928     1214        33        66         24 #> 236     1438         204     189  7107      910        33        63         27 #> 237     1303         138     212  7170     1016        34        69         25 #> 238     1323         147     210  7108     1070        33        61         20 #> 239     1417         169     207  6875     1184        34        57         27 #> 240     1360         167     225  6883     1220        31        55         27 #> 241     1420         179     214  6923     1121        33        56         27 #> 242     1472         218     214  6724     1238        29        53         23 #> 243     1368         174     205  7042     1066        31        57         26 #> 244     1367         173     228  6948     1141        32        53         24 #> 245     1403         173     209  6843     1210        33        63         33 #> 246     1413         197     206  6737     1387        34        60         31 #> 247     1201         138     207  7011     1269        37        64         35 #> 248     1359         180     207  6895     1203        33        61         30 #> 249     1518         198     225  6681     1243        29        57         24 #> 250     1434         185     189  6771     1269        30        62         25 #> 251     1367         162     179  6772     1368        33        64         27 #> 252     1461         181     197  6783     1246        26        57         23 #> 253     1368         161     198  7030     1095        33        59         31 #> 254     1419         159     215  6862     1193        35        60         31 #> 255     1514         162     298  6725     1119        45        93         30 #> 256     1328         171     253  6987     1030        38        83         39 #> 257     1469         160     337  6675     1127        44        94         36 #> 258     1222         133     227  7425      824        36        69         35 #> 259     1639         172     331  6510     1124        46        91         32 #> 260     1345         133     272  6801     1194        48        83         37 #> 261     1339         170     275  6838     1060        46        88         43 #> 262     1194         135     263  7277      889        44        95         41 #> 263     1112          68     375  7770      448        52        69         45 #> 264     1222          70     329  7605      566        48        67         43 #> 265     1136          72     341  7616      661        49        65         32 #> 266      926          41     277  7815      784        45        65         25 #> 267     1105          69     373  7714      532        51        68         37 #> 268     1109          79     305  7576      763        45        64         36 #> 269     1284          93     265  7235      893        43        77         46 #> 270     1120          69     277  7416      946        42        59         36 #> 271      916          52     281  7870      694        42        64         58 #> 272      905          49     288  7747      812        49        71         56 #> 273     1206          55     287  7329      935        44        74         42 #> 274     1457         182     267  7020      863        41        84         37 #> 275     1327         140     193  7328      823        36        87         35 #> 276     1303         100     251  7045     1049        40        86         40 #> 277     1444         175     259  6876     1027        34        78         32 #> 278     1505         243     226  6962      858        30        72         27 #> 279     1429         162     223  6917     1041        37        77         40 #> 280     1491         162     211  6994      928        37        97         38 #> 281     1393         128     211  7189      870        38        93         40 #> 282     1404         134     210  7110      923        40       101         43 #> 283     1222         130     214  7374      856        38        89         45 #> 284     1153          74     316  7593      705        42        64         32 #> 285     1169          76     307  7553      728        43        69         32 #> 286     1369         104     237  7375      775        39        70         15 #> 287      993          58     267  7743      773        41        62         44 #> 288      980          53     254  7719      815        44        69         47 #> 289      967          55     273  7692      833        45        63         47 #> 290     1128          73     354  7527      728        44        76         38 #> 291     1188          85     273  7445      814        44        73         42 #> 292     1257          95     247  7405      812        43        70         35 #> 293     1262          88     301  7471      704        43        71         31 #> 294     1283         153     196  7107     1115        37        60         28 #> 295     1263         155     199  7140     1148        31        42         18 #> 296     1369         158     215  7160      958        38        69         32 #> 297     1353         172     175  6965     1212        28        75         19 #> 298     1187         139     185  7427      952        29        56         22 #> 299     1732         231     156  6437     1313        45        62         23 #> 300     1620         255     166  6628     1212        29        62         27 #> 301     1543         172     193  6740     1157        52        87         34 #> 302     1498         170     195  6804     1206        35        66         23 #> 303     1399         169     171  7011     1100        36        72         16 #> 304     1293         156     191  7101     1111        32        60         31 #> 305     1420         175     152  7004     1149        27        50         20 #> 306     1721         238     255  6300     1350        35        70         28 #> 307     1742         221     156  6415     1315        43        82         23 #> 308     1391         187     189  6975     1062        52        70         45 #> 309     1517         206     249  6680     1205        33        80         27 #> 310     1269         157     193  7140     1148        31        40         18 #> 311     1577         204     208  6732     1183        20        52         20 #> 312     1590         241     195  6705     1149        27        68         21 #> 313     1621         280     197  6608     1179        28        58         27 #> 314     1753         275     236  6367     1214        23        61         27 #> 315     1679         260     177  6568     1191        30        59         33 #> 316     1419         203     176  6973     1083        38        78         27 #> 317     1693         236     174  6499     1204        51       102         37 #> 318     1692         270     234  6499     1196        31        59         15 #> 319     1638         252     215  6570     1199        39        53         29 #> 320     1497         247     219  6621     1270        36        73         32 #> 321     1442         222     194  6677     1314        36        72         38 #> 322     1680         270     170  6440     1310        31        62         28 #> 323     1463         164     185  6909     1154        49        58         17 #> 324     1129         120     222  7272     1112        43        98          2 #> 325     1042         135     210  7376     1116        35        90          3 #> 326     1103          96     210  7380     1085        32        94          3 #> 327     1118          97     221  7279     1154        35        94          2 #> 328     1052          95     215  7388     1126        31        92          1 #> 329     1116         102     231  7290     1168        26        66          1 #> 330     1108         132     231  7319     1101        20        66          2 #> 331     1129         108     212  7386     1074        28        62          3 #> 332     1085          91     223  7384     1126        28        62          3 #> 333     1104         103     233  7322     1147        27        61          2 #> 334     1098          88     212  7338     1140        28        67          1 #> 335     1135          98     251  7120     1314        20        61          2 #> 336     1158         108     245  7065     1326        22        75          1 #> 337     1133         110     241  7080     1342        21        68          3 #> 338     1095         125     250  7120     1305        21        83          1 #> 339     1201          87     238  6990     1383        25        75          3 #> 340     1213         112     245  7007     1335        22        65          3 #> 341     1108          92     231  7367     1110        29        62          3 #> 342     1075         103     207  7413     1096        32        68          2 #> 343     1059          96     228  7386     1128        25        72          2 #> 344     1176          92     207  7347     1057        35        82          1 #> 345     1159          98     213  7320     1108        38        64          1 #> 346     1132          80     201  7398     1095        27        67          2 #> 347     1107          75     220  7399     1096        29        90          1 #> 348     1092         104     234  7355     1126        28        58          2 #> 349     1119          81     219  7409     1057        33        81          2 #> 350     1106          93     212  7381     1104        35        68          1 #> 351     1047         101     238  7385     1120        28        89          1 #> 352     1165          99     214  7331     1101        22        67          3 #> 353     1158          84     201  7327     1123        29        77          2 #> 354     1095          88     203  7415     1093        37        78          1 #> 355     1176          75     205  7396     1107        33        74          2 #> 356     1103         109     220  7335     1140        28        59          2 #> 357     1112          92     209  7356     1125        32        73          2 #> 358     1091          93     222  7377     1113        20        53          2 #> 359     1080          98     219  7371     1125        33        78          1 #> 360     1051         108     227  7403     1114        30        66          3 #> 361     1096          84     211  7415     1091        30        71          2 #> 362     1142          97     225  7341     1101        28        65          1 #> 363     1047          96     236  7399     1107        32        80          3 #> 364     1114          86     210  7359     1116        31        83          2 #> 365     1140          93     241  7324     1098        23        74          1 #> 366     1075          91     200  7410     1107        36        80          1 #> 367     1092         106     219  7427     1125        33        77          1 #> 368     1076          95     204  7408     1130        27        79          2 #> 369     1178          89     201  7381     1099        34        87          2 #> 370     1095         104     223  7367     1111        43        56          2 #> 371     1166          97     272  6971     1390        20        83          3 #> 372     1154         119     257  7130     1253        22        61          1 #> 373     1177         111     241  6882     1470        22        95          2 #> 374     1160          96     240  7043     1357        24        79          2 #> 375     1122         104     241  7145     1313        15        58          1 #> 376     1132          99     257  7065     1362        24        90          3 #> 377     1096         100     260  7162     1282        25        74          2 #> 378     1131          87     233  7144     1307        25        72          3 #> 379     1184         105     258  7020     1340        26        66          2 #> 380     1135          94     235  7123     1320        24        67          2 #> 381     1084          96     240  7164     1330        28        57          1 #> 382     1086         127     252  7159     1285        28        62          2 #> 383     1140          95     258  7085     1347        23        71          3 #> 384     1138         101     254  7103     1310        25        68          1 #> 385     1159         110     261  7068     1297        27        77          2 #> 386     1051          78     211  7421     1146        30        82          2 #> 387     1048          79     213  7439     1130        28        61          2 #> 388     1061          86     220  7421     1102        29        79          3 #> 389     1105          88     210  7353     1142        28        72          1 #> 390     1145          35     237  7208     1118        20        46          2 #> 391     1049          96     219  7303     1168        22        47          2 #> 392     1105         120     218  7302     1158        23        45          3 #> 393     1030          84     214  7403     1177        21        70          1 #> 394     1070          98     215  7280     1240        28        68          3 #> 395     1103          81     208  7310     1177        30        90          3 #> 396     1040         101     205  7368     1176        25        85          3 #> 397     1100          95     210  7320     1113        22        72          3 #> 398     1118          85     199  7415     1060        36        86          3 #> 399     1065          98     230  7345     1163        24        74          1 #> 400     1131          78     221  7358     1120        22        69          2 #> 401     1080         120     218  7296     1145        35       105          2 #> 402     1075          86     231  7403     1109        22        73          3 #> 403     1040         103     228  7364     1173        25        66          2 #> 404     1128          82     203  7320     1148        30        88          1 #> 405     1060         111     231  7363     1149        20        65          1 #> 406     1103          78     220  7365     1149        20        65          2 #> 407     1110          91     201  7318     1185        24        74          2 #> 408     1091         108     218  7383     1183        28        88          3 #> 409     1094          96     220  7341     1127        26        96          2 #> 410     1131          87     208  7170     1308        28        57          2 #> 411     1175         108     214  7076     1307        33        85          2 #> 412     1076          77     202  7243     1305        29        67          1 #> 413     1120          90     240  7068     1383        23        75          1 #> 414     1152         111     238  7080     1372        25        81          2 #> 415     1141          95     250  7035     1388        22        68          2 #> 416     1098         103     267  7135     1301        24        76          2 #> 417     1126         100     236  7062     1380        26        69          1 #> 418     1087          89     243  7200     1302        18        60          1 #> 419     1115          96     236  7085     1372        20        75          2 #> 420     1178          92     241  7006     1376        22        84          1 #> 421     1162         106     242  7025     1368        25        71          2 #> 422     1085          70     180  7955      605        20        50          1 #> 423     1085          70     185  7955      600        25        55          1 #> 424     1090          60     190  7950      600        28        47          2 #> 425     1080          65     189  7960      602        35        20          1 #> 426     1090          60     195  7955      600        28        42          2 #> 427     1105          55     200  7900      600        37        55          2 #> 428     1060          75     175  7975      610        20        55          2 #> 429     1050          70     170  7977      605        28        65          1 #> 430     1100          55     198  7905      600        35        50          3 #> 431     1065          65     178  7965      605        22        65          2 #> 432     1085          60     188  7955      602        30        50          2 #> 433     1080          65     180  7960      605        25        55          1 #> 434     1085          60     190  7955      602        30        53          1 #> 435     1075          68     195  7960      602        20        40          3 #> 436     1090          58     192  7950      600        35        40          3 #> 437     1095          60     198  7945      600        38        34          2 #> 438     1090          58     195  7950      600        30        42          2 #> 439     1095          58     198  7950      602        35        32          1 #> 440     1090          58     195  7940      600        35        42          2 #> 441     1095          58     198  7945      600        35        34          1 #> 442     1095          55     200  7940      600        35        45          3 #> 443     1080          70     188  7965      608        28        36          3 #> 444     1090          60     195  7950      600        32        38          2 #> 445     1105          55     200  7900      595        39        56          1 #> 446     1110          50     205  7900      595        40        52          1 #> 447     1075          70     198  7978      608        28        33          2 #> 448     1075          65     185  7980      608        35        42          3 #> 449     1065          75     180  7975      610        25        50          3 #> 450     1070          75     188  7980      602        22        45          2 #> 451     1070          75     188  7980      602        22        45          1 #> 452     1100          70     200  7910      610        39        44          1 #> 453     1075          70     185  7960      610        22        58          2 #> 454     1050          78     175  7990      610        18        59          3 #> 455     1090          60     198  7945      600        32        35          2 #> 456     1050          78     188  7990      608        28        23          3 #> 457     1075          70     190  7975      605        28        27          3 #> 458     1098          54     202  7945      595        42        32          2 #> 459     1105          15     198  8005      575        52        20          2 #> 460     1110          75     220  7915      510        55        65          2 #> 461     1058          50     178  7988      626        40        55          3 #> 462     1115          30     225  7955      600        55        15          2 #> 463     1105          30     198  7995      570        52        20          3 #> 464     1072          49     178  7980      615        48        48          2 #> 465     1110          15     210  7990      570        50        20          2 #> 466     1110          80     215  7910      525        50        60          1 #> 467     1055          60     175  7985      620        45        50          1 #> 468     1100          80     215  7930      535        45        60          2 #> 469     1105          55     205  7965      600        25        20          2 #> 470     1095          50     210  7948      600        25        35          2 #> 471     1110          50     220  7950      600        52        10          2 #> 472     1092          37     210  7955      600        40        40          3 #> 473     1290          60     260  7550      670        70       100          2 #> 474     1170          80     230  7690      720        40        70          1 #> 475     1100          90     250  7680      760        30        80          2 #> 476     1120          70     240  7720      730        40        80          2 #> 477     1160          70     250  7650      750        30        90          1 #> 478     1200          50     210  7770      690        20        50          3 #> 479     1140          50     200  7990      580        10        20          1 #> 480     1220          80     240  7610      760        30        60          2 #> 481     1180          90     250  7520      800        50       100          2 #> 482     1210          70     250  7560      780        40        90          2 #> 483     1220          80     220  7540      770        60       100          2 #> 484     1180         100     190  7520      820        50       100          1 #> 485     1160          90     220  7580      790        40        90          1 #> 486     1130         100     240  7620      780        30        90          1 #> 487     1080         100     260  7710      750        20        70          2 #> 488     1090          90     280  7730      720        50       100          1 #> 489     1020         100     270  7770      710        40        90          1 #> 490     1090          90     250  7680      760        60        80          1 #> 491     1120         100     260  7720      680        30        80          2 #> 492     1080          80     240  7830      670        30        70          2 #> 493     1160          70     230  7860      640        10        20          1 #> 494     1100          80     240  7820      670        20        70          2 #> 495     1050         100     250  7930      630        10        30          3 #> 496     1090          90     270  7780      690        30        50          3 #> 497     1120          80     260  7750      680        30        80          3 #> 498     1120         100     250  7680      730        40        70          2 #> 499     1190          90     230  7670      710        30        80          2 #> 500     1170         110     250  7620      740        20        90          1 #> 501     1120         100     230  7720      730        20        70          1 #> 502     1190          80     270  7690      720        10        40          2 #> 503     1400          90     270  7420      800         0        20          2 #> 504     1350          80     250  7520      760        10        30          1 #> 505     1090          60     220  7890      670        10        60          2 #> 506     1150          90     230  7790      650        30        60          1 #> 507     1240          90     220  7820      590        10        30          1 #> 508     1220         100     240  7890      530         0        10          2 #> 509     1180          80     250  7870      580        10        30          2 #> 510     1170         110     240  7730      630        30        90          1 #> 511     1170         100     280  7710      640        20        70          3 #> 512     1180          80     220  7790      680        10        40          1 #> 513     1200          90     240  7820      590        10        50          2 #> 514     1140          90     240  7880      570        20        60          3 #> 515     1160          70     210  7870      580        30        80          3 #> 516     1130          80     250  7780      650        40        60          3 #> 517     1150          80     240  7800      630        30        70          2 #> 518     1110          70     240  7820      670        20        70          3 #> 519     1150          70     220  7850      620        20        40          2 #> 520     1180          80     240  7760      670        20        50          2 #> 521     1020          80     250  7920      680        10        30          3 #> 522      610          80     230  8410      650         0        20          3 #> 523     1190         150     290  7340     1020         0        10          2 #> 524     1110         130     210  7550     1000         0         0          1 #> 525     1020         100     220  7530     1030         0         0          3 #> 526     1070         120     210  7600      990         0        10          3 #> 527     1010          90     350  7480     1050        10        10          1 #> 528     1060         140     240  7680      830        10        40          2 #> 529     1060         140     270  7620      880        10        20          1 #> 530     1030         100     230  7740      900         0         0          2 #> 531     1120         130     250  7530      970         0         0          3 #> 532     1030         110     220  7760      980         0         0          2 #> 533     1070         100     230  7600      990        10         0          1 #> 534     1140         180     220  7610      850        10        10          2 #> 535     1090         180     230  7590      860        10        40          2 #> 536      980         110     300  7720      910        10         0          3 #> 537      980          90     330  7540     1040         0         0          2 #> 538      960          90     200  7810      940         0         0          2 #> 539      990          90     210  7780      930         0         0          2 #> 540     1060         120     210  7600     1010         0         0          1 #> 541     1240         150     250  7610      730        10        10          1 #> 542     1060          90     310  7850      690         0         0          2 #> 543     1020         100     290  7620      960         0        10          2 #> 544      970          90     220  7700     1020         0         0          3 #> 545     1180         130     220  7450     1010         0        10          2 #> 546     1060         140     240  7690      850        10        10          1 #> 547      990         100     250  7630     1030         0         0          3 #> 548     1010          90     350  7630      940        10         0          3 #> 549     1040          90     250  7780      820        10        10          1 #> 550     1040          90     250  7810      810        10        10          2 #> 551     1020          90     350  7620      920        10         0          3 #> 552     1020          90     260  7620     1010         0         0          3 #> 553     1010          90     350  7610      930        10         0          3 #> 554      920         110     340  7720      910         0         0          3 #> 555     1030         100     250  7710      900         0        10          2 #> 556      960          90     300  7820      830         0         0          3 #> 557     1030         110     210  7810      840         0         0          1 #> 558     1010         100     240  7710      910        10        20          2 #> 559     1020          90     240  7800      850         0         0          2 #> 560     1120          90     300  7650      830         0        10          1 #> 561     1090          90     290  7710      800        10         0          2 #> 562     1100         120     280  7630      770        10        10          2 #> 563     1090          80     240  7820      760        10         0          2 #> 564     1150          90     250  7720      810         0        10          3 #> 565     1110          90     230  7810      750         0        10          2 #> 566     1010         110     210  7720      950         0         0          1 #> 567     1070         100     220  7730      870        10        10          2 #> 568     1280         110     290  7490      790        10        10          2 #> 569     1060         100     270  7740      810        10        10          3 #> 570     1010          90     210  7720      970         0         0          2 #> 571      990         120     250  7750      870        10        10          2 #> 572      960          80     240  7950      740        10        20          2 m('grid') #>                        x y #> palmitic*palmitoleic   1 2 #> palmitic*stearic       1 3 #> palmitic*oleic         1 4 #> palmitic*linoleic      1 5 #> palmitic*linolenic     1 6 #> palmitic*arachidic     1 7 #> palmitic*eicosenoic    1 8 #> palmitoleic*stearic    2 3 #> palmitoleic*oleic      2 4 #> palmitoleic*linoleic   2 5 #> palmitoleic*linolenic  2 6 #> palmitoleic*arachidic  2 7 #> palmitoleic*eicosenoic 2 8 #> stearic*oleic          3 4 #> stearic*linoleic       3 5 #> stearic*linolenic      3 6 #> stearic*arachidic      3 7 #> stearic*eicosenoic     3 8 #> oleic*linoleic         4 5 #> oleic*linolenic        4 6 #> oleic*arachidic        4 7 #> oleic*eicosenoic       4 8 #> linoleic*linolenic     5 6 #> linoleic*arachidic     5 7 #> linoleic*eicosenoic    5 8 #> linolenic*arachidic    6 7 #> linolenic*eicosenoic   6 8 #> arachidic*eicosenoic   7 8 m('measures') #> [1] \"cov\" \"cor\""},{"path":"https://great-northern-diver.github.io/loon/reference/minority.html","id":null,"dir":"Reference","previous_headings":"","what":"Canadian Visible Minority Data 2006 — minority","title":"Canadian Visible Minority Data 2006 — minority","text":"Population census count various named   visible minority groups 33 major census metropolitan   areas Canada 2006. data 2006 Canadian census, publicly available   Statistics Canada.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/minority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canadian Visible Minority Data 2006 — minority","text":"","code":"minority"},{"path":"https://great-northern-diver.github.io/loon/reference/minority.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Canadian Visible Minority Data 2006 — minority","text":"data frame 33 rows 18 variates Arab Number identifying `Arab`. Black Number identifying `Black`. Chinese Number identifying `Chinese`. Filipino Number identifying `Filipino`. Japanese Number identifying `Japanese`. Korean Number identifying `Korean`. Latin.American Number identifying `Latin American`. Multiple.visible.minority Number identifying member  one visible minority. South.Asian Number identifying `South Asian`. Southeast.Asian Number identifying `Southeast Asian`. Total.population Total population metropolitan census area. Visible.minority..included.elsewhere Number identifying  member visible minority included elsewhere. Visible.minority.population Total number identifying  member visible minority. West.Asian Number identifying `West Asian`. lat, long Latitude longitude (degrees) metropolitan census area. googleLat, googleLong Latitude longitude degrees determined  using Google Maps Geocoding API. rownames(minority) names metropolitan areas cities.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/minority.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Canadian Visible Minority Data 2006 — minority","text":"Statistics Canada","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/names.loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State Names of Loon Object — names.loon","title":"Get State Names of Loon Object — names.loon","text":"States loon objects can accessed `[` l_cget modified l_configure.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/names.loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State Names of Loon Object — names.loon","text":"","code":"# S3 method for class 'loon' names(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/names.loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State Names of Loon Object — names.loon","text":"x loon object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/names.loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State Names of Loon Object — names.loon","text":"state names","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a n-d transition graph — ndtransitiongraph","title":"Create a n-d transition graph — ndtransitiongraph","text":"n-d transition graph k-d nodes edges connect   two nodes n-d subspace","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a n-d transition graph — ndtransitiongraph","text":"","code":"ndtransitiongraph(nodes, n, separator = \":\")"},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a n-d transition graph — ndtransitiongraph","text":"nodes node names graph n integer, dimension edge represent separator character separates spaces node names","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a n-d transition graph — ndtransitiongraph","text":"graph object class loongraph","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a n-d transition graph — ndtransitiongraph","text":"information run: l_help(\"learn_R_display_graph.html.html#graph-utilities\")","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/ndtransitiongraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a n-d transition graph — ndtransitiongraph","text":"","code":"g <- ndtransitiongraph(nodes=c('A:B', 'A:F', 'B:C', 'B:F'), n=3, separator=':')"},{"path":"https://great-northern-diver.github.io/loon/reference/olive.html","id":null,"dir":"Reference","previous_headings":"","what":"Fatty Acid Composition of Italian Olive Oils — olive","title":"Fatty Acid Composition of Italian Olive Oils — olive","text":"data set records percentage composition 8 fatty   acids found lipid fraction 572 Italian olive   oils. oils samples taken three Italian regions varying number   areas within region.  regions areas recorded   shown following table:","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/olive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fatty Acid Composition of Italian Olive Oils — olive","text":"","code":"olive"},{"path":"https://great-northern-diver.github.io/loon/reference/olive.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fatty Acid Composition of Italian Olive Oils — olive","text":"data frame containing 572 cases 10 variates. Region Italian olive oil general growing region: North, South, Sardinia Area \"Administrative Regions\" Italy (e.g. Sicily, Umbria), parts region like  \"Coastal-Sardinia\" \"Inland-Sardinia\" \"North-Apulia\" \"South-Apulia\". Administrative regions larger  , contain, Italian provinces. palmitic Percentage (hundredths percent) Palmitic acid, hexadecanoic acid olive oil.  common saturated fatty acid found animals, plants micro-organisms. palmitoleic Percentage (hundredths percent) Palmitoleic acid, omega-7 monounsaturated fatty acid. stearic Percentage (hundredths percent) Stearic acid, saturated fatty acid. waxy solid  name comes Greek word tallow. Like palmitic acid,  one common saturated fatty acids found nature. oleic Percentage (hundredths percent) Oleic acid, common fatty acid occurring nature found  various animal vegetable fats oils. linoleic Percentage (hundredths percent) Linoleic acid, polyunsaturated omega-6 fatty acid.  one two essential fatty acids humans. linolenic Percentage (hundredths percent) Linolenic acid, type fatty acid. can refer one  two types fatty acids mixture .  One omega-3 essential fatty acid; omega-6. arachidic Percentage (hundredths percent) Arachidic acid, also known eicosanoic acid, saturated fatty acid  used production detergents, photographic materials lubricants. eicosenoic Percentage (hundredths percent) Eicosenoic acid, may refer one three closely related  fatty acids: gadoleic acid (omega-11), gondoic acid (omega-9), paullinic acid (omega-7). Note percentages (hundredths percent) sum approximately 10,000 oil (row).","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/olive.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fatty Acid Composition of Italian Olive Oils — olive","text":"Forina, M., Armanino, C., Lanteri, S., Tiscornia, E. (1983)   \"Classification Olive Oils Fatty Acid Composition\", Food   Research Data Analysis (Martens, H., Russwurm, H., eds.), p. 189,   Applied Science Publ., Barking.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/oliveAcids.html","id":null,"dir":"Reference","previous_headings":"","what":"Just the Fatty Acid Composition of Italian Olive Oils — oliveAcids","title":"Just the Fatty Acid Composition of Italian Olive Oils — oliveAcids","text":"olive data set minus Region   Area variables.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/oliveAcids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Just the Fatty Acid Composition of Italian Olive Oils — oliveAcids","text":"","code":"oliveAcids"},{"path":"https://great-northern-diver.github.io/loon/reference/oliveAcids.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Just the Fatty Acid Composition of Italian Olive Oils — oliveAcids","text":"data frame containing 572 cases 8 variates.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/oliveLocations.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic location of each Italian olive growing area named in the olive data. — oliveLocations","title":"Geographic location of each Italian olive growing area named in the olive data. — oliveLocations","text":"longitude latitude Area  named olive data set.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/oliveLocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic location of each Italian olive growing area named in the olive data. — oliveLocations","text":"","code":"oliveLocations"},{"path":"https://great-northern-diver.github.io/loon/reference/oliveLocations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geographic location of each Italian olive growing area named in the olive data. — oliveLocations","text":"data frame containing 9 cases 3 variates. Area name Italian growing area olive oil. lat, long latitude longitude degrees approximate  centre named growing area","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/oliveLocations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geographic location of each Italian olive growing area named in the olive data. — oliveLocations","text":"https://www.latlong.net","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the current view of any loon plot in the current device. — plot.loon","title":"Plot the current view of any loon plot in the current device. — plot.loon","text":"wrapper grid.loon() simplify plotting loon plots device.  Frequent users recommended use grid.loon() control.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the current view of any loon plot in the current device. — plot.loon","text":"","code":"# S3 method for class 'loon' plot(x, y = NULL, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the current view of any loon plot in the current device. — plot.loon","text":"x loon plot plotted current device y NULL, ignored. ... parameters passed loonGrob","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the current view of any loon plot in the current device. — plot.loon","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the current view of any loon plot in the current device. — plot.loon","text":"","code":"if(interactive()) {   loonPlot <- with(iris, l_plot(Sepal.Length, Sepal.Width))   loonPlot['color'] <- iris$Species   loonPlot['selected'] <- iris$Species == \"versicolor\"   l_scaleto_selected(loonPlot)   loonPlot['showGuides'] <- TRUE   plot(loonPlot) }"},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loongraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a loon graph object with base R graphics — plot.loongraph","title":"Plot a loon graph object with base R graphics — plot.loongraph","text":"function converts loongraph object one class   graph plots respective plot method.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loongraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a loon graph object with base R graphics — plot.loongraph","text":"","code":"# S3 method for class 'loongraph' plot(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loongraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a loon graph object with base R graphics — plot.loongraph","text":"x object class loongraph ... arguments forwarded method","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/plot.loongraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a loon graph object with base R graphics — plot.loongraph","text":"","code":"g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)"},{"path":"https://great-northern-diver.github.io/loon/reference/print.l_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of a loon layer object — print.l_layer","title":"Print a summary of a loon layer object — print.l_layer","text":"Prints layer label layer type","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/print.l_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of a loon layer object — print.l_layer","text":"","code":"# S3 method for class 'l_layer' print(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/print.l_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of a loon layer object — print.l_layer","text":"x l_layer object ... additional arguments used methiod","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function names from measure1d object — print.measures1d","title":"Print function names from measure1d object — print.measures1d","text":"Prints function names measure1d object using   print.default.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function names from measure1d object — print.measures1d","text":"","code":"# S3 method for class 'measures1d' print(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function names from measure1d object — print.measures1d","text":"x measures1d object ... arguments passed print.default","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function names from measure2d object — print.measures2d","title":"Print function names from measure2d object — print.measures2d","text":"Prints function names measure2d object using   print.default.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function names from measure2d object — print.measures2d","text":"","code":"# S3 method for class 'measures2d' print(x, ...)"},{"path":"https://great-northern-diver.github.io/loon/reference/print.measures2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function names from measure2d object — print.measures2d","text":"x measures2d object ... arguments passed print.default","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"Function creates 2d measures object can used   l_ng_plots l_ng_ranges.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"","code":"scagnostics2d(   data,   scagnostics = c(\"Clumpy\", \"Monotonic\", \"Convex\", \"Stringy\", \"Skinny\", \"Outlying\",     \"Sparse\", \"Striated\", \"Skewed\"),   separator = \":\" )"},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"data data.frame data used calculate measures scagnostics vector valid scanostics meausure names, .e \"Clumpy\", \"Monotonic\", \"Convex\", \"Stringy\", \"Skinny\", \"Outlying\", \"Sparse\", \"Striated\", \"Skewed\". Also prefix \"\" can added measure equals 1-measure. separator string separates variable names 2d graph nodes","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"measures object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"information run: l_help(\"learn_R_display_graph.html#measures\")","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/scagnostics2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closure of Two Dimensional Scagnostic Measures — scagnostics2d","text":"","code":"if (FALSE) { # \\dontrun{ m <- scagnostics2d(oliveAcids, separator='**') m m() m(olive$palmitoleic > 80) m('data') m('grid') m('measures') } # }"},{"path":"https://great-northern-diver.github.io/loon/reference/spAsList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","title":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","text":"spAsList helper function rarely called directly user. S3 generic function takes spatial data object returns components (polygons, lines, et cetera) list. element list. Different S3 methods implemented various spatial data types.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/spAsList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","text":"","code":"spAsList(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/spAsList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","text":"x sp spatial data object.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/spAsList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","text":"list relevant components spatial data object.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/spAsList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of polygons or lines from a spatial data object from the sp package. — spAsList","text":"","code":"library(sp) library(rworldmap) #> ### Welcome to rworldmap ### #> For a short introduction type : \t vignette('rworldmap') world <- getMap(resolution = \"coarse\") class(world) #> [1] \"SpatialPolygonsDataFrame\" #> attr(,\"package\") #> [1] \"sp\" isS4(world) #> [1] TRUE xy <- spAsList(world)  names(xy) #>   [1] \"Antarctica\"                 \"Russia\"                     #>   [3] \"Canada\"                     \"United States\"              #>   [5] \"China\"                      \"Brazil\"                     #>   [7] \"Australia\"                  \"Greenland\"                  #>   [9] \"Kazakhstan\"                 \"Argentina\"                  #>  [11] \"India\"                      \"Algeria\"                    #>  [13] \"Congo (Kinshasa)\"           \"Mongolia\"                   #>  [15] \"Mexico\"                     \"Saudi Arabia\"               #>  [17] \"Sudan\"                      \"Iran\"                       #>  [19] \"Libya\"                      \"Indonesia\"                  #>  [21] \"South Africa\"               \"Peru\"                       #>  [23] \"Chad\"                       \"Mali\"                       #>  [25] \"Angola\"                     \"Niger\"                      #>  [27] \"Colombia\"                   \"Ethiopia\"                   #>  [29] \"Bolivia\"                    \"Mauritania\"                 #>  [31] \"Norway\"                     \"Egypt\"                      #>  [33] \"Chile\"                      \"Turkey\"                     #>  [35] \"Pakistan\"                   \"Sweden\"                     #>  [37] \"Tanzania\"                   \"Nigeria\"                    #>  [39] \"Venezuela\"                  \"Ukraine\"                    #>  [41] \"Namibia\"                    \"Mozambique\"                 #>  [43] \"France\"                     \"Finland\"                    #>  [45] \"Afghanistan\"                \"Zambia\"                     #>  [47] \"Myanmar\"                    \"Morocco\"                    #>  [49] \"Spain\"                      \"Botswana\"                   #>  [51] \"S. Sudan\"                   \"Central African Rep.\"       #>  [53] \"Madagascar\"                 \"Turkmenistan\"               #>  [55] \"Uzbekistan\"                 \"Kenya\"                      #>  [57] \"Germany\"                    \"Thailand\"                   #>  [59] \"Iraq\"                       \"Japan\"                      #>  [61] \"Poland\"                     \"Somalia\"                    #>  [63] \"Yemen\"                      \"Papua New Guinea\"           #>  [65] \"Cameroon\"                   \"Paraguay\"                   #>  [67] \"Italy\"                      \"United Kingdom\"             #>  [69] \"Zimbabwe\"                   \"New Zealand\"                #>  [71] \"Vietnam\"                    \"Belarus\"                    #>  [73] \"Romania\"                    \"Congo (Brazzaville)\"        #>  [75] \"Malaysia\"                   \"Ivory Coast\"                #>  [77] \"Oman\"                       \"Philippines\"                #>  [79] \"Burkina Faso\"               \"Gabon\"                      #>  [81] \"Kyrgyzstan\"                 \"Iceland\"                    #>  [83] \"Ecuador\"                    \"Uganda\"                     #>  [85] \"Ghana\"                      \"Guinea\"                     #>  [87] \"Laos\"                       \"Syria\"                      #>  [89] \"Guyana\"                     \"Uruguay\"                    #>  [91] \"Senegal\"                    \"Tunisia\"                    #>  [93] \"Cambodia\"                   \"Tajikistan\"                 #>  [95] \"Nepal\"                      \"Greece\"                     #>  [97] \"N. Korea\"                   \"Bulgaria\"                   #>  [99] \"Bangladesh\"                 \"Suriname\"                   #> [101] \"Hungary\"                    \"Nicaragua\"                  #> [103] \"Austria\"                    \"Czech Rep.\"                 #> [105] \"Eritrea\"                    \"Cuba\"                       #> [107] \"S. Korea\"                   \"Portugal\"                   #> [109] \"Azerbaijan\"                 \"Benin\"                      #> [111] \"Honduras\"                   \"Latvia\"                     #> [113] \"Malawi\"                     \"Guatemala\"                  #> [115] \"Lithuania\"                  \"Serbia\"                     #> [117] \"W. Sahara\"                  \"Jordan\"                     #> [119] \"Liberia\"                    \"Ireland\"                    #> [121] \"Georgia\"                    \"United Arab Emirates\"       #> [123] \"French Guiana\"              \"Estonia\"                    #> [125] \"Croatia\"                    \"Sierra Leone\"               #> [127] \"Panama\"                     \"Denmark\"                    #> [129] \"Slovakia\"                   \"Bosnia and Herz.\"           #> [131] \"Switzerland\"                \"Sri Lanka\"                  #> [133] \"Netherlands\"                \"Togo\"                       #> [135] \"Costa Rica\"                 \"Dominican Rep.\"             #> [137] \"Moldova\"                    \"Belgium\"                    #> [139] \"Bhutan\"                     \"Albania\"                    #> [141] \"Taiwan\"                     \"Armenia\"                    #> [143] \"Guinea Bissau\"              \"Macedonia\"                  #> [145] \"Lesotho\"                    \"Haiti\"                      #> [147] \"Slovenia\"                   \"Eq. Guinea\"                 #> [149] \"Israel\"                     \"Burundi\"                    #> [151] \"Falkland Is.\"               \"Solomon Is.\"                #> [153] \"New Caledonia\"              \"Rwanda\"                     #> [155] \"Belize\"                     \"Djibouti\"                   #> [157] \"El Salvador\"                \"Swaziland\"                  #> [159] \"Fiji\"                       \"Kuwait\"                     #> [161] \"Montenegro\"                 \"Fr. S. and Antarctic Lands\" #> [163] \"Bahamas\"                    \"Kosovo\"                     #> [165] \"East Timor\"                 \"Gambia\"                     #> [167] \"Jamaica\"                    \"Qatar\"                      #> [169] \"Lebanon\"                    \"Brunei\"                     #> [171] \"Puerto Rico\"                \"Trinidad and Tobago\"        #> [173] \"Vanuatu\"                    \"Cyprus\"                     #> [175] \"S. Geo. and S. Sandw. Is.\"  \"West Bank\"                  #> [177] \"N. Cyprus\"                  \"Cape Verde\"                 #> [179] \"Luxembourg\"                 \"Samoa\"                      #> [181] \"Fr. Polynesia\"              NA                           #> [183] \"Faroe Is.\"                  \"Mauritius\"                  #> [185] \"Comoros\"                    \"Aland\"                      #> [187] \"Hong Kong\"                  \"Sao Tome and Principe\"      #> [189] \"Isle of Man\"                \"Kiribati\"                   #> [191] \"Dominica\"                   \"Heard I. and McDonald Is.\"  #> [193] \"Bahrain\"                    \"Andorra\"                    #> [195] \"Saint Lucia\"                \"Micronesia\"                 #> [197] \"Guam\"                       \"Singapore\"                  #> [199] \"Tonga\"                      \"Antigua and Barb.\"          #> [201] \"Curacao\"                    \"Gaza\"                       #> [203] \"N. Mariana Is.\"             \"Barbados\"                   #> [205] \"Turks and Caicos Is.\"       \"Palau\"                      #> [207] \"Malta\"                      \"U.S. Virgin Is.\"            #> [209] \"St. Vin. and Gren.\"         \"Cayman Is.\"                 #> [211] \"St. Pierre and Miquelon\"    \"Grenada\"                    #> [213] \"St. Kitts and Nevis\"        \"Marshall Is.\"               #> [215] \"Niue\"                       \"Liechtenstein\"              #> [217] \"Jersey\"                     \"Saint Helena\"               #> [219] \"Seychelles\"                 \"Aruba\"                      #> [221] \"Indian Ocean Ter.\"          \"British Virgin Is.\"         #> [223] \"Wallis and Futuna\"          \"Br. Indian Ocean Ter.\"      #> [225] \"American Samoa\"             \"San Marino\"                 #> [227] \"Anguilla\"                   \"Montserrat\"                 #> [229] \"Bermuda\"                    \"Guernsey\"                   #> [231] \"Maldives\"                   \"Cook Is.\"                   #> [233] \"St. Martin\"                 \"Norfolk Island\"             #> [235] \"Sint Maarten\"               \"Pitcairn Is.\"               #> [237] \"Nauru\"                      \"St. Barthelemy\"             #> [239] \"Macau\"                      \"Tuvalu\"                     #> [241] \"Monaco\"                     \"Ashmore and Cartier Is.\"    #> [243] \"Vatican\"                    # because tree has same depth for every leaf unlist is ok # This is not true otherwise. uxy <- spunlist(xy) unlist(xy, recursive=FALSE) #> $Antarctica1 #> $Antarctica1$x #>   [1]  -58.6141428  -59.0450726  -59.7893424  -60.6119279  -61.2974157 #>   [6]  -62.0221002  -62.5117602  -62.6488578  -62.5901275  -62.1200787 #>  [11]  -62.8055666  -63.7456901  -64.2941062  -64.8816931  -65.5084249 #>  [16]  -65.6650820  -65.3125453  -64.7837146  -63.9611033  -63.1972998 #>  [21]  -62.7859554  -62.5705163  -62.2767358  -61.8066611  -61.5129065 #>  [26]  -61.3758089  -61.0819767  -61.0036611  -60.6902693  -60.8273669 #>  [31]  -61.3758089  -61.9633699  -63.2952008  -63.7456901  -64.3528365 #>  [36]  -65.8609873  -67.1928182  -68.4462817  -69.7977238  -70.6007238 #>  [41]  -72.2067757  -73.9695363  -75.5559769  -77.2403702  -76.9269785 #>  [46]  -75.3992940  -74.2828763  -73.6561187  -74.7725364  -76.4961004 #>  [51]  -77.9258581  -77.9846659  -78.0237850  -76.8486371  -76.6332238 #>  [56]  -75.3600974  -73.2448519  -71.4429463  -70.0131628  -68.1916461 #>  [61]  -65.7042785  -63.2560300  -61.5520255  -59.6914156  -58.7121213 #>  [66]  -58.2224871  -57.0081168  -55.3628943  -53.6197707  -51.5436442 #>  [71]  -49.7613499  -47.2739306  -44.8257080  -42.8083634  -42.1620204 #>  [76]  -40.7714335  -38.2448177  -36.2666697  -34.3863969  -32.3102962 #>  [81]  -30.0970979  -28.5498022  -29.2549013  -29.6858052  -29.6858052 #>  [86]  -31.6248083  -33.6813236  -35.6399121  -35.9141072  -35.7770097 #>  [91]  -35.3265462  -33.8967627  -32.2123694  -30.9980507  -29.7837321 #>  [96]  -28.8827793  -27.5117519  -26.1603357  -25.4748219  -23.9275520 #> [101]  -22.4585978  -21.2246938  -20.0103751  -18.9135429  -17.5229817 #> [106]  -16.6415885  -15.7014909  -15.4077103  -16.4653202  -16.1127836 #> [111]  -15.4468552  -14.4088049  -13.3119726  -12.2935077  -11.5100671 #> [116]  -11.0204329  -10.2957743   -9.1010152   -8.6113810   -7.4166219 #> [121]   -7.3774511   -6.8682316   -5.7909847   -5.5363749   -4.3416674 #> [126]   -3.0489815   -1.7954921   -0.6594891   -0.2286368    0.8681954 #> [131]    1.8866862    3.0226376    4.1390552    5.1575460    6.2739120 #> [136]    7.1357198    7.7428662    8.4871102    9.5251347   10.2498450 #> [141]   10.8178207   11.9538237   12.4042871   13.4227779   14.7349976 #> [146]   15.1267566   15.9493421   17.0265890   18.2017111   19.2593726 #> [151]   20.3757386   21.4529855   21.9230343   22.5694031   23.6661837 #> [156]   24.8413575   25.9773088   27.0937264   28.0925802   29.1502417 #> [161]   30.0315833   30.9717326   31.9901717   32.7540528   33.3024431 #> [166]   33.8704187   34.9084949   35.3002023   36.1620101   37.2000346 #> [171]   37.9051079   38.6494035   39.6678943   40.0204309   40.9213579 #> [176]   41.9594340   42.9387024   44.1138762   44.8972909   45.7199280 #> [181]   46.5033427   47.4434404   48.3444190   48.9907361   49.9308855 #> [186]   50.7534709   50.9493246   51.7915471   52.6141325   53.6130380 #> [191]   54.5335502   55.4149435   56.3550411   57.1580929   57.2559681 #> [196]   58.1373613   58.7445077   59.9393185   60.6052210   61.4278064 #> [201]   62.3874895   63.1904895   64.0523491   64.9924467   65.9717151 #> [206]   66.9118645   67.8911328   68.8900383   69.7126237   69.6734530 #> [211]   69.5559408   68.5962578   67.8127397   67.9498890   69.0663066 #> [216]   68.9291573   68.4199895   67.9498890   68.7137700   69.8693067 #> [221]   71.0248951   71.5732854   71.9062883   72.4546269   73.0814104 #> [226]   73.3360201   73.8648767   74.4915568   75.6275598   76.6264653 #> [231]   77.6449044   78.1345386   78.4283708   79.1138587   80.0931271 #> [236]   80.9353496   81.4837915   82.0517672   82.7764258   83.7753313 #> [241]   84.6762065   85.6555266   86.7523588   87.4770174   87.9862887 #> [246]   88.3584107   88.8284078   89.6706303   90.6303650   91.5900997 #> [251]   92.6085389   93.5486365   94.1754200   95.0175908   95.7814718 #> [256]   96.6823987   97.7596456   98.6802096   99.7181824  100.3841883 #> [261]  100.8933562  101.5788957  102.8324109  103.4786764  104.2425574 #> [266]  104.9084599  106.1815605  107.1608806  108.0813929  109.1586398 #> [271]  110.2358350  111.0584721  111.7439600  112.8603776  113.6046733 #> [276]  114.3880880  114.8973076  115.6023808  116.6991614  117.3847010 #> [281]  118.5794601  119.8329236  120.8709998  121.6544145  122.3203687 #> [286]  123.2212956  124.1222742  125.1602470  126.1003964  127.0014266 #> [291]  127.8827682  128.8032805  129.7042591  130.7814543  131.7999451 #> [296]  132.9358964  133.8564604  134.7573873  135.0315825  135.0707532 #> [301]  135.6974850  135.8738050  136.2067045  136.6180489  137.4602714 #> [306]  138.5962228  139.9084424  140.8094210  142.1216923  143.0618417 #> [311]  144.3740613  145.4904273  146.1955522  145.9996985  146.6460673 #> [316]  147.7232626  148.8396285  150.1323145  151.4837049  152.5022473 #> [321]  153.6381987  154.2845675  155.1658574  155.9297901  156.8111316 #> [326]  158.0255278  159.1810128  159.6706987  160.8066500  161.5704794 #> [331]  162.6868970  163.8424337  164.9196806  166.1144397  167.3090955 #> [336]  168.4256165  169.4635893  170.5016655  171.2067904  171.0892265 #> [341]  170.5604216  170.1099581  169.7573698  169.2873210  167.9751014 #> [346]  167.3874886  166.0948027  165.6443909  164.9588514  164.2341927 #> [351]  163.8227967  163.5682386  163.4702600  163.4898971  164.0578728 #> [356]  164.2733635  164.7434640  166.6041256  166.9957813  165.1938758 #> [361]  163.6662171  161.7663847  160.9241622  160.7478939  160.3169641 #> [366]  159.7882109  161.1200159  161.6292871  162.4909917  163.7053361 #> [371]  165.0959489  166.6041256  168.8956653  169.4047815  172.2839340 #> [376]  172.4770488  173.2240833  175.9856718  178.2772115  180.0000000 #> [381]  180.0000000 -180.0000000 -180.0000000 -179.9424994 -179.0586773 #> [386] -177.2567718 -177.1408067 -176.0846728 -175.9472346 -175.8298822 #> [391] -174.3825028 -173.1165594 -172.8891056 -169.9512229 -168.9999890 #> [396] -168.5301985 -167.0220994 -164.1821435 -161.9297745 -158.0713796 #> [401] -155.1922530 -150.9420990 -148.5330729 -145.8889182 -143.1077185 #> [406] -142.8922794 -146.8290684 -150.0607316 -150.9029282 -153.5862011 #> [411] -153.4099070 -153.0377592 -152.6656372 -152.8615167 -154.5262988 #> [416] -155.2901798 -156.8374497 -154.4087866 -152.0976615 -150.6482926 #> [421] -148.8659983 -147.2207499 -146.4177490 -146.7702864 -148.0629465 #> [426] -149.5319008 -151.5884161 -153.3903216 -155.3293764 -155.9756677 #> [431] -157.2683020 -158.0517684 -158.3651342 -157.8754742 -156.9745731 #> [436] -155.3293764 -153.7428324 -152.9202470 -151.3337805 -150.0019496 #> [441] -148.7484861 -147.6124831 -146.1044089 -146.1435280 -146.4960913 #> [446] -146.2023099 -144.9096240 -144.3220371 -142.7943526 -141.6387642 #> [451] -140.2090065 -138.8575903 -137.5061999 -136.4289013 -135.2145827 #> [456] -134.4311938 -133.7456543 -132.2571679 -130.9253112 -129.5542838 #> [461] -128.2420383 -126.8906221 -125.4020825 -124.0114955 -122.5621525 #> [466] -121.0736128 -119.7025596 -118.6841455 -117.4698010 -116.2163116 #> [471] -115.0215525 -113.9443314 -113.2979885 -112.9454518 -112.2990830 #> [476] -111.2610585 -110.0663252 -108.7149090 -107.5593465 -106.1491483 #> [481] -104.8760736 -103.3679486 -102.0165065 -100.6455308 -100.1167000 #> [486] -100.7630430 -101.2527030 -102.5453373 -103.1133130 -103.3287520 #> [491] -103.6812886 -102.9174851 -101.6052396 -100.3125278  -99.1373799 #> [496]  -98.1188891  -97.6880369  -96.3365948  -95.0439605  -93.6729073 #> [501]  -92.4390033  -91.4205641  -90.0887333  -89.2269513  -88.4239512 #> [506]  -87.2683370  -86.0148217  -85.1922363  -83.8799908  -82.6656463 #> [511]  -81.4709131  -80.6874467  -80.2957910  -79.2968855  -77.9258581 #> [516]  -76.9073673  -76.2218794  -74.8900486  -73.8520241  -72.8335333 #> [521]  -71.6192146  -70.2090423  -68.9359159  -67.9566217  -67.3690606 #> [526]  -67.1340362  -67.2515484  -67.5649402  -67.9174768  -68.2308427 #> [531]  -68.4854524  -68.5442085  -68.4462817  -67.9762329  -67.5844997 #> [536]  -67.4278426  -67.6236704  -67.7411826  -67.2515484  -66.7031840 #> [541]  -66.0568152  -65.3713273  -64.5682755  -64.1765423  -63.6281520 #> [546]  -63.0013944  -62.0416856  -61.4149279  -60.7098547  -59.8872693 #> [551]  -59.1625848  -58.5945575  -57.8111427  -57.2235817  -57.5957295 #> [556]  -58.6141428 #>  #> $Antarctica1$y #>   [1] -64.15247 -64.36801 -64.21122 -64.30920 -64.54433 -64.79909 -65.09303 #>   [8] -65.48494 -65.85722 -66.19033 -66.42551 -66.50385 -66.83700 -67.15047 #>  [15] -67.58161 -67.95389 -68.36533 -68.67891 -68.91398 -69.22756 -69.61942 #>  [22] -69.99175 -70.38366 -70.71677 -71.08904 -72.01007 -72.38235 -72.77426 #>  [29] -73.16618 -73.69524 -74.10674 -74.43985 -74.57700 -74.92974 -75.26285 #>  [36] -75.63512 -75.79191 -76.00745 -76.22299 -76.63449 -76.67367 -76.63449 #>  [43] -76.71289 -76.71289 -77.10480 -77.28107 -77.55542 -77.90811 -78.22163 #>  [50] -78.12365 -78.37842 -78.78992 -79.18183 -79.51494 -79.88722 -80.25955 #>  [57] -80.41633 -80.69063 -81.00415 -81.31767 -81.47446 -81.74876 -82.04269 #>  [64] -82.37585 -82.84611 -83.21843 -82.86569 -82.57176 -82.25823 -82.00352 #>  [71] -81.72917 -81.70959 -81.84674 -82.08191 -81.65083 -81.35689 -81.33731 #>  [78] -81.12171 -80.90617 -80.76902 -80.59265 -80.33794 -79.98520 -79.63250 #>  [85] -79.26023 -79.29940 -79.45613 -79.45613 -79.08385 -78.33925 -78.12365 #>  [92] -77.88853 -77.65345 -77.35951 -77.06558 -76.67367 -76.49735 -76.36014 #>  [99] -76.28180 -76.24258 -76.10543 -75.90947 -75.67435 -75.43922 -75.12570 #> [106] -74.79254 -74.49860 -74.10674 -73.87161 -73.46011 -73.14654 -72.95058 #> [113] -72.71546 -72.40194 -72.01007 -71.53977 -71.26542 -71.32422 -71.65733 #> [120] -71.69650 -71.32422 -70.93231 -71.03029 -71.40262 -71.46137 -71.28505 #> [127] -71.16744 -71.22625 -71.63775 -71.30464 -71.12827 -70.99112 -70.85392 #> [134] -70.61879 -70.46205 -70.24651 -69.89377 -70.14853 -70.01133 -70.48164 #> [141] -70.83433 -70.63837 -70.24651 -69.97216 -70.03092 -70.40325 -70.03092 #> [148] -69.91335 -69.87418 -69.89377 -70.01133 -70.07014 -70.40325 -70.69718 #> [155] -70.52081 -70.48164 -70.48164 -70.46205 -70.32485 -70.20729 -69.93294 #> [162] -69.75662 -69.65864 -69.38429 -68.83564 -68.50259 -68.65927 -69.01201 #> [169] -69.24714 -69.16875 -69.52144 -69.77620 -69.54108 -69.10994 -68.93362 #> [176] -68.60051 -68.46331 -68.26741 -68.05187 -67.81674 -67.60120 -67.71876 #> [183] -67.36607 -67.09172 -67.11130 -66.87618 -66.52348 -66.24913 -66.05318 #> [190] -65.89639 -65.81805 -65.87680 -65.97478 -66.24913 -66.68022 -67.01332 #> [197] -67.28767 -67.40524 -67.67959 -67.95389 -68.01270 -67.81674 -67.40524 #> [204] -67.62073 -67.73834 -67.85591 -67.93430 -67.93430 -68.97279 -69.22756 #> [211] -69.67823 -69.93294 -70.30527 -70.69718 -70.67755 -71.06946 -71.44179 #> [218] -71.85329 -72.16681 -72.26479 -72.08842 -71.69650 -71.32422 -71.01070 #> [225] -70.71677 -70.36402 -69.87418 -69.77620 -69.73703 -69.61942 -69.46268 #> [232] -69.07077 -68.69844 -68.32622 -68.07150 -67.87555 -67.54239 -67.36607 #> [239] -67.20928 -67.30726 -67.20928 -67.09172 -67.15047 -66.87618 -66.20991 #> [246] -66.48426 -66.95457 -67.15047 -67.22887 -67.11130 -67.18970 -67.20928 #> [253] -67.11130 -67.17011 -67.38565 -67.24850 -67.24850 -67.11130 -67.24850 #> [260] -66.91535 -66.58224 -66.30789 -65.56328 -65.70048 -65.97478 -66.32753 #> [267] -66.93493 -66.95457 -66.95457 -66.83700 -66.69980 -66.42551 -66.13157 #> [274] -66.09235 -65.87680 -66.07276 -66.38628 -66.69980 -66.66063 -66.91535 #> [281] -67.17011 -67.26809 -67.18970 -66.87618 -66.56265 -66.48426 -66.62146 #> [288] -66.71939 -66.56265 -66.56265 -66.66063 -66.75861 -66.58224 -66.42551 #> [295] -66.38628 -66.38628 -66.28830 -66.20996 -65.72007 -65.30857 -65.58287 #> [302] -66.03359 -66.44509 -66.77820 -66.95457 -66.89576 -66.87618 -66.81737 #> [309] -66.81737 -66.79778 -66.83700 -66.91535 -67.22887 -67.60120 -67.89513 #> [316] -68.13026 -68.38502 -68.56129 -68.71813 -68.87481 -68.89450 -68.56129 #> [323] -68.83564 -69.14921 -69.38429 -69.48227 -69.59983 -69.99175 -70.22688 #> [330] -70.57962 -70.73635 -70.71677 -70.77552 -70.75594 -70.83433 -70.97148 #> [337] -71.20666 -71.40262 -71.69650 -72.08842 -72.44116 -72.89183 -73.24452 #> [344] -73.65602 -73.81281 -74.16550 -74.38104 -74.77295 -75.14528 -75.45880 #> [351] -75.87030 -76.24258 -76.69330 -77.06558 -77.45744 -77.82977 -78.18251 #> [358] -78.31961 -78.75075 -78.90748 -79.12303 -79.16225 -79.73048 -80.20074 #> [365] -80.57307 -80.94539 -81.27850 -81.69000 -82.06228 -82.39544 -82.70896 #> [372] -83.02248 -83.33600 -83.82589 -84.04143 -84.11791 -84.41371 -84.15900 #> [379] -84.47252 -84.71338 -90.00000 -90.00000 -84.71338 -84.72144 -84.13941 #> [386] -84.45293 -84.41794 -84.09926 -84.11045 -84.11791 -84.53432 -84.11791 #> [393] -84.06102 -83.88465 -84.11791 -84.23739 -84.57050 -84.82521 -85.13873 #> [400] -85.37391 -85.09956 -85.29552 -85.60904 -85.31510 -85.04075 -84.57050 #> [407] -84.53127 -84.29615 -83.90423 -83.68869 -83.23802 -82.82652 -82.45419 #> [414] -82.04269 -81.76839 -81.41565 -81.10213 -81.16094 -81.00415 -81.33731 #> [421] -81.04337 -80.67104 -80.33794 -79.92644 -79.65209 -79.35820 -79.29940 #> [428] -79.16225 -79.06427 -78.69194 -78.37842 -78.02568 -76.88921 -76.98724 #> [435] -77.30076 -77.20273 -77.06558 -77.49666 -77.39874 -77.18314 -76.90884 #> [442] -76.57574 -76.47776 -76.10543 -75.73315 -75.38041 -75.20404 -75.53720 #> [449] -75.34124 -75.08648 -75.06689 -74.96891 -74.73378 -74.51824 -74.30270 #> [456] -74.36145 -74.43985 -74.30270 -74.47902 -74.45943 -74.32228 -74.42026 #> [463] -74.51824 -74.47902 -74.49860 -74.51824 -74.47902 -74.18508 -74.02835 #> [470] -74.24389 -74.06752 -73.71483 -74.02835 -74.38104 -74.71420 -74.42026 #> [477] -74.79254 -74.91010 -75.18445 -75.12570 -74.94933 -74.98850 -75.12570 #> [484] -75.30202 -74.87093 -74.53783 -74.18508 -74.10674 -73.73441 -73.36208 #> [491] -72.61753 -72.75468 -72.81344 -72.75468 -72.91141 -73.20535 -73.55804 #> [498] -73.61685 -73.47970 -73.28374 -73.16618 -73.40131 -73.32291 -72.55872 #> [505] -73.00939 -73.18576 -73.08779 -73.47970 -73.51887 -73.63643 -73.85198 #> [512] -73.47970 -73.12696 -73.51887 -73.42089 -73.63643 -73.96954 -73.87161 #> [519] -73.65602 -73.40131 -73.26416 -73.14654 -73.00939 -72.79385 -72.48033 #> [526] -72.04924 -71.63775 -71.24583 -70.85392 -70.46205 -70.10931 -69.71740 #> [533] -69.32553 -68.95321 -68.54171 -68.14984 -67.71876 -67.32685 -66.87618 #> [540] -66.58224 -66.20996 -65.89639 -65.60251 -65.17142 -64.89707 -64.64231 #> [547] -64.58355 -64.27003 -64.07407 -63.95651 -63.70175 -63.38822 -63.27066 #> [554] -63.52543 -63.85853 -64.15247 #>  #> $Antarctica1$isHole #> [1] FALSE #>  #>  #> $Antarctica2 #> $Antarctica2$x #>  [1] -45.15476 -43.92083 -43.48995 -43.37244 -43.33327 -44.88054 -46.50617 #>  [8] -48.38642 -50.48211 -52.85199 -54.16426 -53.98799 -51.85313 -50.99133 #> [15] -50.36459 -49.91413 -49.30696 -48.66062 -48.66062 -48.15140 -46.66286 #> [22] -45.15476 #>  #> $Antarctica2$y #>  [1] -78.04707 -78.47810 -79.08556 -79.51664 -80.02612 -80.33964 -80.59436 #>  [8] -80.82948 -81.02544 -80.96669 -80.63353 -80.22203 -79.94773 -79.61462 #> [15] -79.18349 -78.81121 -78.45857 -78.04702 -78.04702 -78.04707 -77.83148 #> [22] -78.04707 #>  #> $Antarctica2$isHole #> [1] FALSE #>  #>  #> $Antarctica3 #> $Antarctica3$x #>  [1] -68.45135 -68.33383 -68.51013 -68.78430 -69.95947 -71.07589 -72.38813 #>  [8] -71.89850 -73.07362 -74.19004 -74.95389 -75.01263 -73.91582 -73.91582 #> [15] -73.23033 -72.07472 -71.78096 -71.72218 -71.74179 -71.17382 -70.25325 #> [22] -69.72445 -69.48942 -69.05852 -68.72554 -68.45135 #>  #> $Antarctica3$y #>  [1] -70.95582 -71.40649 -71.79841 -72.17074 -72.30789 -72.50384 -72.48426 #>  [8] -72.09234 -72.22949 -72.36669 -72.07276 -71.66126 -71.26934 -71.26934 #> [15] -71.15178 -71.19095 -70.68147 -70.30920 -69.50578 -69.03547 -68.87874 #> [22] -69.25102 -69.62335 -70.07402 -70.50515 -70.95582 #>  #> $Antarctica3$isHole #> [1] FALSE #>  #>  #> $Antarctica4 #> $Antarctica4$x #>  [1] -59.57209 -59.86585 -60.15966 -62.25539 -64.48813 -65.74167 -65.74167 #>  [8] -66.29003 -64.03769 -61.88325 -61.13898 -60.61012 -59.57209 #>  #> $Antarctica4$y #>  [1] -80.04018 -80.54966 -81.00033 -80.86318 -80.92193 -80.58883 -80.54966 #>  [8] -80.25577 -80.29494 -80.39287 -79.98137 -79.62868 -80.04018 #>  #> $Antarctica4$isHole #> [1] FALSE #>  #>  #> $Antarctica5 #> $Antarctica5$x #>  [1] -159.2082 -161.1276 -162.4398 -163.0274 -163.0666 -163.7129 -163.7129 #>  [8] -163.1058 -161.2451 -160.2462 -159.4824 -159.2082 #>  #> $Antarctica5$y #>  [1] -79.49706 -79.63421 -79.28147 -78.92877 -78.86997 -78.59567 -78.59567 #>  [8] -78.22334 -78.38018 -78.69365 -79.04634 -79.49706 #>  #> $Antarctica5$isHole #> [1] FALSE #>  #>  #> $Antarctica6 #> $Antarctica6$x #>  [1]  -98.98155  -97.88474  -96.78794  -96.20035  -96.98376  -98.19808 #>  [7]  -99.43201 -100.78346 -101.80187 -102.33073 -102.33073 -101.70397 #> [13] -100.43092  -98.98155 #>  #> $Antarctica6$y #>  [1] -71.93333 -72.07054 -71.95297 -72.52121 -72.44286 -72.48203 -72.44286 #>  [8] -72.50162 -72.30566 -71.89416 -71.89416 -71.71779 -71.85499 -71.93333 #>  #> $Antarctica6$isHole #> [1] FALSE #>  #>  #> $Antarctica7 #> $Antarctica7$x #>  [1] -121.2115 -119.9189 -118.7241 -119.2921 -120.2322 -121.6228 -122.6217 #>  [8] -122.6217 -122.4062 -121.2115 #>  #> $Antarctica7$y #>  [1] -73.50099 -73.65773 -73.48135 -73.83410 -74.08881 -74.01047 -73.65778 #>  [8] -73.65778 -73.32462 -73.50099 #>  #> $Antarctica7$isHole #> [1] FALSE #>  #>  #> $Antarctica8 #> $Antarctica8$x #> [1] -125.5596 -124.0319 -124.6195 -125.9122 -127.2831 -127.2831 -126.5585 #> [8] -125.5596 #>  #> $Antarctica8$y #> [1] -73.48135 -73.87327 -73.83410 -73.73612 -73.46177 -73.46177 -73.24623 #> [8] -73.48135 #>  #> $Antarctica8$isHole #> [1] FALSE #>  #>  #> $Russia1 #> $Russia1$x #>   [1] 106.97013 107.24000 108.15380 111.07726 113.33151 114.13417 113.88539 #>   [8] 112.77918 110.15125 109.40000 110.64000 112.11919 113.01954 113.52958 #>  [15] 113.96881 115.56782 118.77633 119.02000 123.20066 123.25777 125.38000 #>  [22] 126.97644 128.59126 129.05157 128.46000 129.71599 131.28858 132.25350 #>  [29] 133.85766 135.56193 137.49755 138.23409 139.86983 139.14791 140.46817 #>  [36] 149.50000 150.35118 152.96890 157.00688 158.99779 159.83031 159.70866 #>  [43] 160.94053 162.27907 164.05248 165.94037 167.83567 169.57763 170.81688 #>  [50] 170.00820 170.45345 173.64391 175.72403 178.60000 180.00000 180.00000 #>  [57] 179.99281 178.70720 177.41128 178.31300 178.90825 179.37034 179.48636 #>  [64] 179.22825 177.36430 174.56929 173.68013 172.15000 170.69850 170.33085 #>  [71] 168.90046 166.29498 165.84000 164.87674 163.53929 163.21711 162.01733 #>  [78] 162.05297 163.19191 163.05794 162.12958 161.70146 162.11749 160.36877 #>  [85] 160.02173 158.53094 158.23118 156.78979 156.42000 155.99182 155.43366 #>  [92] 155.91442 156.75815 156.81035 158.36433 160.15064 161.87204 163.66969 #>  [99] 164.47355 163.25842 162.65791 160.12148 159.30232 156.72068 154.21806 #> [106] 155.04375 152.81185 151.26573 151.33815 149.78371 148.54481 145.48722 #> [113] 142.19782 138.95848 135.12619 136.70171 137.19342 138.16470 138.80463 #> [120] 139.90151 141.34531 141.37923 140.59742 140.51308 140.06193 138.55472 #> [127] 138.21971 136.86232 135.51535 134.86939 133.53687 132.90627 132.27807 #> [134] 130.93587 130.78000 130.64000 130.63387 131.14469 131.28856 131.02519 #> [141] 131.88345 133.09712 133.76964 134.11235 134.50081 135.02631 133.37360 #> [148] 132.50669 130.98726 130.58229 129.39782 127.65740 127.28746 126.93916 #> [155] 126.56440 125.94635 125.06821 123.57147 122.24575 121.00308 120.17709 #> [162] 120.72579 120.73820 120.18208 119.27939 119.28846 117.87924 116.67880 #> [169] 115.48570 114.96211 114.36246 112.89774 111.58123 110.66201 109.40245 #> [176] 108.47517 107.86818 106.88880 105.88659 104.62158 103.67655 102.25589 #> [183] 102.06521 100.88948  99.98173  98.86149  97.82574  98.23176  97.25976 #> [190]  95.81402  94.81595  94.14757  93.10421  92.23471  90.71367  88.80557 #> [197]  87.75126  87.35997  86.82936  85.54127  85.11556  84.41638  83.93511 #> [204]  83.38300  81.94599  80.56845  80.03556  77.80092  76.52518  76.89110 #> [211]  74.38482  73.42568  73.50852  72.22415  71.18013  70.86527  69.06817 #> [218]  68.16910  65.66687  65.17853  61.43660  60.97807  61.69999  60.73999 #> [225]  60.92727  59.96753  61.58800  61.33742  59.93281  59.64228  58.36332 #> [232]  56.77798  55.71694  54.53288  52.32872  50.76665  48.70238  48.57784 #> [239]  47.54948  46.75160  47.04367  46.46645  47.31524  48.05725  48.69473 #> [246]  48.59325  49.10116  48.64541  47.67591  46.68201  47.59094  47.49252 #> [253]  48.58437  47.98728  47.81567  47.37332  46.68607  46.40495  45.77640 #> [260]  45.47028  44.53762  43.93121  43.75599  42.39440  40.92219  40.07696 #> [267]  39.95501  38.68000  37.53912  36.67546  37.40317  38.23295  37.67372 #> [274]  39.14767  39.12120  38.22354  38.25511  38.77057  39.73828  39.89562 #> [281]  39.67465  40.08079  40.06904  38.59499  38.01063  37.39346  36.62617 #> [288]  35.35612  35.37791  35.02218  34.22482  34.14198  34.39173  33.75270 #> [295]  32.71576  32.41206  32.15944  31.78597  31.54002  31.30520  31.49764 #> [302]  32.30452  32.69364  32.40560  31.73127  31.79142  31.38447  30.75753 #> [309]  30.97184  30.87391  29.89629  29.37157  29.22951  28.17671  27.85528 #> [316]  27.77002  27.28818  27.71669  27.42015  28.13170  27.98112  29.11770 #> [323]  28.07000  30.21111  31.13999  31.51609  30.03587  30.44468  29.54443 #> [330]  30.21765  29.05459  29.97743  28.44594  28.59193  29.39955  31.10108 #> [337]  32.13272  33.77547  36.51396  40.29234  41.05987  41.12595  40.01583 #> [344]  38.38295  33.91871  33.18444  34.81477  34.87857  34.94391  36.23129 #> [351]  37.01273  37.14197  36.53958  37.17604  39.59345  40.43560  39.76260 #> [358]  42.09309  43.01604  43.94975  44.53226  43.69839  44.18795  43.45282 #> [365]  46.25000  46.82134  45.55517  45.56202  46.34915  47.89416  48.13876 #> [372]  50.22766  53.71743  54.47171  53.48582  54.72628  55.44268  57.31702 #> [379]  58.80200  59.94142  61.07784  60.03000  60.55000  63.50400  64.88811 #> [386]  68.51216  69.18068  68.16444  68.13522  66.93008  67.25976  66.72492 #> [393]  66.69466  68.54006  69.19636  69.94000  72.58754  72.79603  71.84811 #> [400]  72.47011  72.79188  72.56470  73.66787  73.23870  71.28000  72.42301 #> [407]  72.82077  73.92099  74.18651  75.05200  74.46926  74.93584  73.84236 #> [414]  73.60187  74.39980  73.10110  74.89082  74.65926  75.15801  75.68351 #> [421]  75.28898  76.35911  75.90313  77.57665  79.65202  81.50000  80.61071 #> [428]  80.51109  82.25000  84.65526  86.82230  86.00956  87.16682  88.31571 #> [435]  90.26000  92.90058  93.23421  95.86000  96.67821  98.92254 100.75967 #> [442] 101.03532 101.99084 104.35160 106.06664 104.70500 106.97013 #>  #> $Russia1$y #>   [1] 76.97419 76.48000 76.72335 76.71000 76.22224 75.84764 75.32779 75.03186 #>   [9] 74.47673 74.18000 74.04000 73.78774 73.97693 73.33505 73.59488 73.75285 #>  [17] 73.58772 73.12000 72.97122 73.73503 73.56000 73.56549 73.03871 72.39872 #>  [25] 71.98000 71.19304 70.78699 71.83630 71.38642 71.65525 71.34763 71.62803 #>  [33] 71.48783 72.41619 72.84941 72.20000 71.60643 70.84222 71.03141 70.86672 #>  [41] 70.45324 69.72198 69.43728 69.64204 69.66823 69.47199 69.58269 68.69380 #>  [49] 69.01363 69.65276 70.09703 69.81743 69.87725 69.40000 68.96364 64.97971 #>  [57] 64.97433 64.53493 64.60821 64.07593 63.25197 62.98262 62.56894 62.30410 #>  [65] 62.52190 61.76915 61.65261 60.95000 60.33618 59.88177 60.57355 59.78855 #>  [73] 60.16000 59.73160 59.86871 59.21101 58.24328 57.83912 57.61503 56.15924 #>  [81] 56.12219 55.28568 54.85514 54.34433 53.20257 52.95868 51.94269 51.01105 #>  [89] 51.70000 53.15895 55.38103 56.76792 57.36470 57.83204 58.05575 59.31477 #>  [97] 60.34300 61.14090 62.55061 62.46627 61.64250 60.54423 61.77396 61.43442 #> [105] 59.75818 59.14495 58.88385 58.78089 59.50396 59.65573 59.16448 59.33637 #> [113] 59.03998 57.08805 54.72959 54.60355 53.97732 53.75501 54.25455 54.18968 #> [121] 53.08957 52.23877 51.23967 50.04553 48.44671 46.99965 46.30795 45.14350 #> [129] 43.98900 43.39821 42.81147 42.79849 43.28456 42.55274 42.22000 42.39500 #> [137] 42.90301 42.92999 44.11152 44.96796 45.32116 45.14409 46.11693 47.21248 #> [145] 47.57845 48.47823 48.18344 47.78896 47.79013 48.72969 49.44060 49.76027 #> [153] 50.73980 51.35389 51.78426 52.79280 53.16104 53.45880 53.43173 53.25140 #> [161] 52.75389 52.51623 51.96411 51.64355 50.58292 50.14288 49.51098 49.88853 #> [169] 49.80518 50.14025 50.24830 49.54357 49.37797 49.13013 49.29296 49.28255 #> [177] 49.79371 50.27430 50.40602 50.27532 50.08997 50.51056 51.25991 51.51686 #> [185] 51.63401 52.04737 51.01100 50.42240 49.72605 49.97746 50.01343 50.48054 #> [193] 50.49529 50.80217 50.33181 49.47052 49.29720 49.21498 49.82667 49.69286 #> [201] 50.11730 50.31140 50.88925 51.06918 50.81220 51.38834 50.86475 53.40441 #> [209] 54.17700 54.49052 53.54685 53.48981 54.03562 54.37666 54.13329 55.16973 #> [217] 55.38525 54.97039 54.60125 54.35423 54.00625 53.66499 52.98000 52.71999 #> [225] 52.44755 51.96042 51.27266 50.79907 50.84219 50.54544 51.06364 51.04355 #> [233] 50.62171 51.02624 51.71865 51.69276 50.60513 49.87476 50.45470 49.35601 #> [241] 49.15204 48.39415 47.71585 47.74377 47.07563 46.56104 46.39933 45.80629 #> [249] 45.64149 44.60920 43.66016 42.98658 41.80888 41.40582 41.15142 41.21973 #> [257] 41.82714 41.86068 42.09244 42.50278 42.71199 42.55496 42.74083 43.22030 #> [265] 43.38215 43.55310 43.43500 44.28000 44.65721 45.24469 45.40451 46.24087 #> [273] 46.63657 47.04475 47.26336 47.10219 47.54640 47.82562 47.89894 48.23241 #> [281] 48.78382 49.30743 49.60105 49.92646 49.91566 50.38395 50.22559 50.57720 #> [289] 50.77394 51.20757 51.25599 51.56641 51.76888 52.33507 52.23847 52.28869 #> [297] 52.06125 52.10168 52.74205 53.07400 53.16743 53.13273 53.35142 53.61805 #> [305] 53.79403 53.97464 54.15706 54.81177 55.08155 55.55098 55.78946 55.67009 #> [313] 55.91834 56.16913 56.75933 57.24426 57.47453 57.79190 58.72457 59.30083 #> [321] 59.47537 60.02805 60.50352 61.78003 62.35769 62.86769 63.55281 64.20445 #> [329] 64.94867 65.80598 66.94429 67.69830 68.36461 69.06478 69.15692 69.55811 #> [337] 69.90595 69.30142 69.06342 67.93240 67.45713 66.79158 66.26618 65.99953 #> [345] 66.75961 66.63253 65.90015 65.43621 64.41437 64.10945 63.84983 64.33471 #> [353] 64.76446 65.14322 64.52079 64.76446 65.49682 66.47623 66.41858 66.06908 #> [361] 66.75634 67.35245 67.95051 68.57079 68.25000 67.68997 67.56652 67.01005 #> [369] 66.66767 66.88455 67.52238 67.99867 68.85738 68.80815 68.20131 68.09702 #> [377] 68.43866 68.46628 68.88082 68.27844 68.94069 69.52000 69.85000 69.54739 #> [385] 69.23484 68.09233 68.61563 69.14436 69.35649 69.45461 69.92873 70.70889 #> [393] 71.02897 71.93450 72.84336 73.04000 72.77629 72.22006 71.40898 71.09019 #> [401] 70.39114 69.02085 68.40790 67.74040 66.32000 66.17267 66.53267 66.78946 #> [409] 67.28429 67.76047 68.32899 68.98918 69.07146 69.62763 70.63175 71.44717 #> [417] 72.12119 72.83227 72.85497 72.30056 71.33556 71.15287 71.87401 72.26717 #> [425] 72.32011 71.75000 72.58285 73.64820 73.85000 73.80591 73.93688 74.45967 #> [433] 75.11643 75.14393 75.64000 75.77333 76.04720 76.14000 75.91548 76.44689 #> [441] 76.43028 76.86189 77.28754 77.69792 77.37389 77.12740 76.97419 #>  #> $Russia1$isHole #> [1] FALSE #>  #>  #> $Russia2 #> $Russia2$x #>  [1] 57.53569 56.94498 53.67738 53.41202 51.60189 51.45575 52.47828 52.44417 #>  [9] 54.42761 53.50829 55.90246 55.63193 57.86864 61.17004 64.49837 66.21098 #> [17] 68.15706 68.85221 68.18057 64.63733 61.58351 58.47708 56.98679 55.41934 #> [25] 55.62284 57.53569 #>  #> $Russia2$y #>  [1] 70.72046 70.63274 70.76266 71.20666 71.47476 72.01488 72.22944 72.77473 #>  [9] 73.62755 73.74981 74.62749 75.08141 75.60939 76.25188 76.43906 76.80978 #> [17] 76.93970 76.54481 76.23364 75.73775 75.26088 74.30906 73.33304 72.37127 #> [25] 71.54059 70.72046 #>  #> $Russia2$isHole #> [1] FALSE #>  #>  #> $Russia3 #> $Russia3$x #>  [1] -175.0143 -174.3398 -174.5718 -171.8573 -169.8996 -170.8911 -172.5303 #>  [8] -172.5550 -172.9553 -173.8918 -174.6539 -175.9835 -176.2072 -177.2227 #> [15] -178.3599 -178.9033 -178.6861 -179.8838 -179.4327 -180.0000 -180.0000 #> [22] -177.5500 -174.9283 -175.0143 #>  #> $Russia3$y #>  [1] 66.58435 66.33556 67.06219 66.91308 65.97724 65.54139 65.43791 64.46079 #>  [9] 64.25269 64.28260 64.63125 64.92288 65.35667 65.52024 65.39052 65.74044 #> [17] 66.11211 65.87456 65.40411 64.97971 68.96364 68.20000 67.20589 66.58435 #>  #> $Russia3$isHole #> [1] FALSE #>  #>  #> $Russia4 #> $Russia4$x #>  [1]  99.93976  97.75794  94.97259  93.31288  92.54540  91.18107  93.77766 #>  [8]  95.94090  97.88385 100.18666  99.93976 #>  #> $Russia4$y #>  [1] 78.88094 78.75620 79.04475 79.42650 80.14379 80.34146 81.02460 81.25040 #>  [9] 80.74698 79.78014 78.88094 #>  #> $Russia4$isHole #> [1] FALSE #>  #>  #> $Russia5 #> $Russia5$x #>  [1] 143.6480 144.6541 143.1739 142.5587 143.5335 143.5053 142.7477 142.0920 #>  [9] 141.9069 142.0184 141.9044 142.1358 142.1800 141.5941 141.6825 142.6069 #> [17] 142.2097 142.6548 142.9146 143.2608 143.2353 143.6480 #>  #> $Russia5$y #>  [1] 50.74760 48.97639 49.30655 47.86158 46.83673 46.13791 46.74076 45.96676 #>  [9] 46.80593 47.78013 48.85919 49.61516 50.95234 51.93543 53.30197 53.76215 #> [17] 54.22548 54.36588 53.70458 52.74076 51.75666 50.74760 #>  #> $Russia5$isHole #> [1] FALSE #>  #>  #> $Russia6 #> $Russia6$x #> [1] 145.0863 144.3000 140.6138 138.9554 136.9744 137.5118 138.8311 141.4716 #> [9] 145.0863 #>  #> $Russia6$y #> [1] 75.56262 74.82000 74.84768 74.61148 75.26167 75.94917 76.13676 76.09289 #> [9] 75.56262 #>  #> $Russia6$isHole #> [1] FALSE #>  #>  #> $Russia7 #> $Russia7$x #> [1] 105.07547  99.43814 101.26490 102.08635 102.83782 105.37243 105.07547 #>  #> $Russia7$y #> [1] 78.30689 77.92100 79.23399 79.34641 79.28129 78.71334 78.30689 #>  #> $Russia7$isHole #> [1] FALSE #>  #>  #> $Russia8 #> $Russia8$x #>  [1] 51.13619 49.79368 48.89441 48.75494 47.58612 46.50283 47.07246 44.84696 #>  [9] 46.79914 48.31848 48.52281 49.09719 50.03977 51.52293 51.13619 #>  #> $Russia8$y #>  [1] 80.54728 80.41543 80.33957 80.17547 80.01018 80.24725 80.55942 80.58981 #>  [9] 80.77192 80.78401 80.51457 80.75399 80.91889 80.69973 80.54728 #>  #> $Russia8$isHole #> [1] FALSE #>  #>  #> $Russia9 #> $Russia9$x #> [1] 22.73110 20.89224 19.66064 19.88848 21.26845 22.31572 22.75776 22.65105 #> [9] 22.73110 #>  #> $Russia9$y #> [1] 54.32754 54.31252 54.42608 54.86616 55.19048 55.01530 54.85657 54.58274 #> [9] 54.32754 #>  #> $Russia9$isHole #> [1] FALSE #>  #>  #> $Russia10 #> $Russia10$x #> [1] 150.7317 149.5759 147.9775 146.1192 146.3585 148.2222 150.7317 #>  #> $Russia10$y #> [1] 75.08406 74.68892 74.77836 75.17298 75.49682 75.34584 75.08406 #>  #> $Russia10$isHole #> [1] FALSE #>  #>  #> $Russia11 #> $Russia11$x #> [1] 143.6039 142.0876 140.0382 139.8631 140.8117 142.0621 143.4828 143.6039 #>  #> $Russia11$y #> [1] 73.21244 73.20544 73.31692 73.36983 73.76506 73.85758 73.47525 73.21244 #>  #> $Russia11$isHole #> [1] FALSE #>  #>  #> $Russia12 #> $Russia12$x #> [1] -178.6938 -180.0000 -180.0000 -179.8719 -179.0243 -177.5779 -177.6636 #> [8] -178.6938 #>  #> $Russia12$y #> [1] 70.89302 70.83220 71.51571 71.55762 71.55553 71.26948 71.13277 70.89302 #>  #> $Russia12$isHole #> [1] FALSE #>  #>  #> $Russia13 #> $Russia13$x #> [1] 180.0000 178.9034 178.7253 180.0000 180.0000 #>  #> $Russia13$y #> [1] 70.83220 70.78114 71.09880 71.51571 70.83220 #>  #> $Russia13$isHole #> [1] FALSE #>  #>  #> $Canada1 #> $Canada1$x #>   [1]  -90.54710  -90.55151  -89.21515  -88.01966  -88.31749  -87.35017 #>   [7]  -86.30607  -85.57664  -85.52197  -84.10081  -82.62258  -81.28043 #>  [13]  -81.22020  -81.96436  -81.25928  -81.38653  -83.34456  -84.73542 #>  [19]  -85.76943  -86.06760  -87.03143  -87.32324  -88.48296  -89.91444 #>  [25]  -90.70398  -90.77004  -91.93342  -93.15698  -94.24153  -94.62931 #>  [31]  -94.68460  -93.21502  -92.76462  -92.29703  -90.89769  -89.03953 #>  [37]  -88.03978  -87.32421  -86.07121  -85.01181  -83.36055  -82.27285 #>  [43]  -82.43620  -82.12502  -81.40075  -79.91289  -79.14301  -78.60191 #>  [49]  -79.12421  -79.82958  -78.22874  -77.09560  -76.54137  -76.62319 #>  [55]  -77.30226  -78.51688  -77.33676  -77.77272  -78.10687  -77.41067 #>  [61]  -75.69621  -74.66820  -73.83988  -72.90853  -71.67708  -71.37369 #>  [67]  -69.59042  -69.62033  -69.28790  -68.37455  -67.64976  -66.20178 #>  [73]  -65.24517  -64.58352  -63.80475  -62.50236  -61.39655  -61.79866 #>  [79]  -60.46853  -59.56962  -57.97508  -57.33320  -56.93689  -56.15811 #>  [85]  -55.75632  -55.68338  -56.40916  -57.12691  -58.77482  -60.03309 #>  [91]  -61.72366  -63.86251  -65.36331  -66.39905  -67.23631  -68.51114 #>  [97]  -69.95362  -71.10458  -70.25522  -68.65000  -66.55243  -65.05626 #> [103]  -64.17099  -65.11545  -64.79854  -64.47219  -63.17329  -61.52072 #> [109]  -60.51815  -60.44860  -59.80287  -61.03988  -63.25471  -64.24656 #> [115]  -65.36406  -66.12340  -66.16173  -64.42549  -66.02605  -67.13741 #> [121]  -67.79134  -67.79046  -68.23444  -68.90500  -69.23722  -69.99997 #> [127]  -70.30500  -70.66000  -71.08482  -71.40500  -71.50506  -73.34783 #> [133]  -74.86700  -75.31821  -76.37500  -76.50000  -76.82003  -77.73789 #> [139]  -78.72028  -79.17167  -79.01000  -78.92000  -78.93936  -80.24745 #> [145]  -81.27775  -82.43928  -82.69009  -83.02981  -83.14200  -83.12000 #> [151]  -82.90000  -82.43000  -82.13764  -82.33776  -82.55092  -83.59285 #> [157]  -83.46955  -83.61613  -83.89077  -84.09185  -84.14212  -84.33670 #> [163]  -84.60490  -84.54375  -84.77924  -84.87608  -85.65236  -86.46199 #> [169]  -87.43979  -88.37811  -89.27292  -89.60000  -90.83000  -91.64000 #> [175]  -92.61000  -93.63087  -94.32914  -94.64000  -94.81758  -95.15609 #> [181]  -95.15907  -97.22872 -100.65000 -104.04826 -107.05000 -110.05000 #> [187] -113.00000 -116.04818 -117.03121 -120.00000 -122.84000 -122.97421 #> [193] -124.91024 -125.62461 -127.43561 -127.99276 -127.85032 -129.12979 #> [199] -129.30523 -130.51497 -130.53611 -129.98000 -130.00778 -131.70781 #> [205] -132.73042 -133.35556 -134.27111 -134.94500 -135.47583 -136.47972 #> [211] -137.45250 -138.34089 -139.03900 -140.01300 -140.99778 -140.99250 #> [217] -140.98600 -139.12052 -137.54636 -136.50358 -135.62576 -134.41464 #> [223] -132.92925 -131.43136 -129.79471 -129.10773 -128.36156 -128.13817 #> [229] -127.44712 -125.75632 -124.42483 -124.28968 -123.06108 -122.68350 #> [235] -121.47226 -119.94288 -117.60268 -116.22643 -115.24690 -113.89794 #> [241] -115.30489 -113.49727 -110.79800 -109.94619 -108.88020 -107.79239 #> [247] -108.81299 -108.16721 -106.95000 -106.15000 -105.34282 -104.33791 #> [253] -103.22115 -101.45433  -99.90195  -98.44320  -98.55860  -97.66948 #> [259]  -96.11991  -96.12588  -95.48943  -94.68500  -94.23282  -95.30408 #> [265]  -96.47131  -96.39115  -95.20880  -93.88997  -92.87818  -91.51964 #> [271]  -92.40692  -90.54710 #>  #> $Canada1$y #>   [1] 69.49766 68.47499 69.25873 68.61508 67.87338 67.19872 67.92146 68.78456 #>   [9] 69.88211 69.80539 69.65826 69.16202 68.66567 68.13253 67.59716 67.11078 #>  [17] 66.41154 66.25730 66.55833 66.05625 65.21297 64.77563 64.09897 64.03273 #>  [25] 63.61017 62.96021 62.83508 62.02469 60.89865 60.11021 58.94882 58.78212 #>  [33] 57.84571 57.08709 57.28468 56.85172 56.47162 55.99914 55.72383 55.30260 #>  [41] 55.24489 55.14832 54.28227 53.27703 52.15788 51.20842 51.53393 52.56208 #>  [49] 54.14145 54.66772 55.13645 55.83741 56.53423 57.20263 58.05209 58.80458 #>  [57] 59.85261 60.75788 62.31964 62.55053 62.27840 62.18111 62.44380 62.10507 #>  [65] 61.52535 61.13717 61.06141 60.22125 58.95736 58.80106 58.21206 58.76731 #>  [73] 59.87071 60.33558 59.44260 58.16708 56.96745 56.33945 55.77548 55.20407 #>  [81] 54.94549 54.62650 53.78032 53.64749 53.27036 52.14664 51.77070 51.41972 #>  [89] 51.06430 50.24277 50.08046 50.29099 50.29820 50.22897 49.51156 49.06836 #>  [97] 47.74488 46.82171 46.98606 48.30000 49.13310 49.23278 48.74248 48.07085 #> [105] 46.99297 46.23849 45.73902 45.88377 47.00793 46.28264 45.92040 45.26525 #> [113] 44.67014 44.26553 43.54523 43.61867 44.46512 45.29204 45.25931 45.13753 #> [121] 45.70281 47.06636 47.35486 47.18500 47.44778 46.69307 45.91500 45.46000 #> [129] 45.30524 45.25500 45.00820 45.00738 45.00048 44.81645 44.09631 44.01846 #> [137] 43.62878 43.62906 43.62509 43.46634 43.27000 42.96500 42.86361 42.36620 #> [145] 42.20903 41.67511 41.67511 41.83280 41.97568 42.08000 42.43000 42.98000 #> [153] 43.57109 44.44000 45.34752 45.81689 45.99469 46.11693 46.11693 46.27542 #> [161] 46.51223 46.40877 46.43960 46.53868 46.63710 46.90008 47.22022 47.55334 #> [169] 47.94000 48.30292 48.01981 48.01000 48.27000 48.14000 48.45000 48.60926 #> [177] 48.67074 48.84000 49.38905 49.38425 49.00000 49.00070 49.00000 48.99986 #> [185] 49.00000 49.00000 49.00000 49.00000 49.00000 49.00000 49.00000 49.00254 #> [193] 49.98456 50.41656 50.83061 51.71583 52.32961 52.75538 53.56159 54.28757 #> [201] 54.80278 55.28500 55.91583 56.55212 57.69289 58.41028 58.86111 59.27056 #> [209] 59.78778 59.46389 58.90500 59.56211 60.00000 60.27682 60.30639 66.00003 #> [217] 69.71200 69.47102 68.99002 68.89804 69.31512 69.62743 69.50534 69.94451 #> [225] 70.19369 69.77927 70.01286 70.48384 70.37721 69.48058 70.15840 69.39969 #> [233] 69.56372 69.85553 69.79778 69.37786 69.01128 68.84151 68.90591 68.39890 #> [241] 67.90261 67.68815 67.80612 67.98104 67.38144 67.88736 68.31164 68.65392 #> [249] 68.70000 68.80000 68.56122 68.01800 68.09775 67.64689 67.80566 67.78165 #> [257] 68.40394 68.57864 68.23939 67.29338 68.09070 68.06383 69.06903 69.68571 #> [265] 70.08976 71.19482 71.92053 71.76015 71.31869 70.19129 69.69997 69.49766 #>  #> $Canada1$isHole #> [1] FALSE #>  #>  #> $Canada2 #> $Canada2$x #>  [1] -86.56218 -85.77437 -84.85011 -82.31559 -80.60009 -80.74894 -78.77064 #>  [8] -77.82462 -75.60584 -74.22862 -74.09914 -72.24223 -71.20002 -68.78605 #> [15] -67.91497 -66.96903 -68.80512 -66.44987 -64.86231 -63.42493 -61.85198 #> [22] -62.16318 -63.91844 -65.14886 -66.72122 -68.01502 -68.14129 -67.08965 #> [29] -65.73208 -65.32017 -64.66941 -65.01380 -66.27504 -68.78319 -67.36968 #> [36] -66.32830 -66.16557 -68.87737 -71.02344 -72.23538 -71.88628 -73.37831 #> [43] -74.83442 -74.81850 -77.70998 -78.55595 -77.89728 -76.01827 -73.95980 #> [50] -74.29388 -73.94491 -72.65117 -72.92606 -73.31162 -74.84331 -76.86910 #> [57] -76.22865 -77.28737 -78.16863 -78.95724 -79.49246 -81.30547 -84.94471 #> [64] -87.06000 -88.68171 -89.51342 -88.46772 -89.88815 -90.20516 -89.43658 #> [71] -88.40824 -85.82615 -86.56218 #>  #> $Canada2$y #>  [1] 73.15745 72.53413 73.34028 73.75095 72.71654 72.06191 72.35217 72.74962 #>  [9] 72.24368 71.76714 71.33084 71.55692 70.92001 70.52502 70.12195 69.18609 #> [17] 68.72020 68.06716 67.84754 66.92847 66.86212 66.16025 64.99867 65.42603 #> [25] 66.38804 66.26273 65.68979 65.10846 64.64841 64.38274 63.39293 62.67419 #> [33] 62.94510 63.74567 62.88397 62.28007 61.93090 62.33015 62.91071 63.39784 #> [41] 63.67999 64.19396 64.67908 64.38909 64.22954 64.57291 65.30919 65.32697 #> [49] 65.45476 65.81177 66.31058 67.28458 67.72693 68.06944 68.55463 68.89474 #> [57] 69.14777 69.76954 69.82649 70.16688 69.87181 69.74319 69.96663 70.26000 #> [65] 70.41074 70.76204 71.21819 71.22255 72.23507 73.12946 73.53789 73.80382 #> [73] 73.15745 #>  #> $Canada2$isHole #> [1] FALSE #>  #>  #> $Canada3 #> $Canada3$x #>  [1] -68.50000 -65.82735 -63.68000 -61.85000 -61.89388 -64.33400 -66.75342 #>  [8] -67.65755 -65.48031 -67.84000 -69.46970 -71.18000 -73.24280 -73.88000 #> [15] -76.90773 -75.52924 -76.22046 -75.39345 -76.34354 -77.88851 -78.36269 #> [22] -79.75951 -79.61965 -77.91089 -77.88911 -80.56125 -83.17439 -86.11184 #> [29] -87.60000 -89.49068 -89.61610 -87.76739 -88.26000 -87.65000 -84.97634 #> [36] -86.34000 -87.96192 -87.15198 -85.37868 -85.09495 -86.50734 -86.93179 #> [43] -84.19844 -83.40870 -81.84823 -84.10000 -87.59895 -89.36663 -90.20000 #> [50] -91.36786 -91.58702 -90.10000 -88.93227 -86.97024 -85.50000 -84.26000 #> [57] -83.18000 -82.42000 -81.10000 -79.30664 -76.25000 -75.71878 -72.83153 #> [64] -70.66576 -68.50000 #>  #> $Canada3$y #>  [1] 83.10632 83.02801 82.90000 82.62860 82.36165 81.92775 81.72527 81.50141 #>  [9] 81.50657 80.90000 80.61683 79.80000 79.63415 79.43016 79.32309 79.19766 #> [17] 79.01907 78.52581 78.18296 77.89991 77.50859 77.20968 76.98336 77.02204 #> [25] 76.77796 76.17812 76.45403 76.29901 76.42000 76.47239 76.95213 77.17833 #> [33] 77.90000 77.97022 77.53873 78.18000 78.37181 78.75867 78.99690 79.34543 #> [41] 79.73624 80.25145 80.20836 80.10000 80.46442 80.58000 80.51627 80.85569 #> [49] 81.26000 81.55310 81.89429 82.08500 82.11751 82.27961 82.65227 82.60000 #> [57] 82.32000 82.86000 83.02000 83.13056 83.17206 83.06404 83.23324 83.16978 #> [65] 83.10632 #>  #> $Canada3$isHole #> [1] FALSE #>  #>  #> $Canada4 #> $Canada4$x #>  [1] -114.1672 -114.6663 -112.4410 -111.0504 -109.9203 -109.0065 -108.1883 #>  [8] -107.6860 -108.3964 -107.5165 -106.5226 -105.4025 -104.7748 -104.4648 #> [15] -102.7854 -100.9808 -101.0893 -102.7312 -102.0933 -102.4302 -104.2400 #> [22] -105.9600 -107.1225 -109.0000 -111.5341 -113.3132 -113.8550 -115.2200 #> [29] -116.1079 -117.3400 -116.6747 -115.1311 -113.7214 -112.4161 -114.3500 #> [36] -116.4868 -117.9048 -118.4324 -116.1131 -117.6557 -119.4020 -118.5627 #> [43] -117.8664 -115.1891 -114.1672 #>  #> $Canada4$y #>  [1] 73.12145 72.65277 72.95540 72.45040 72.96113 72.63335 71.65089 72.06548 #>  [9] 73.08953 73.23598 73.07601 72.67259 71.69840 70.99297 70.49776 70.02432 #> [17] 69.58447 69.50402 69.11962 68.75282 68.91000 69.18000 69.11922 68.78000 #> [25] 68.63006 68.53554 69.00744 69.28000 69.16821 69.96000 70.06655 70.23730 #> [33] 70.19237 70.36638 70.60000 70.52045 70.54056 70.90920 71.30918 71.29520 #> [41] 71.55859 72.30785 72.70594 73.31459 73.12145 #>  #> $Canada4$isHole #> [1] FALSE #>  #>  #> $Canada5 #> $Canada5$x #>  [1] -120.4600 -123.0922 -123.6200 -125.9289 -125.5000 -124.8073 -123.9400 #>  [8] -124.9177 -121.5379 -120.1098 -117.5556 -116.5844 -115.5108 -116.7679 #> [15] -119.2200 -120.4600 -120.4600 #>  #> $Canada5$y #>  [1] 71.38360 70.90164 71.34000 71.86869 72.29226 73.02256 73.68000 74.29275 #>  [9] 74.44893 74.24135 74.18577 73.89607 73.47519 73.22292 72.52000 71.82000 #> [17] 71.38360 #>  #> $Canada5$isHole #> [1] FALSE #>  #>  #> $Canada6 #> $Canada6$x #>  [1] -87.02000 -85.81435 -87.18756 -89.03535 -90.80436 -92.87669 -93.95116 #>  [8] -93.93574 -93.14524 -94.97400 -96.07614 -96.70972 -96.01644 -95.32345 #> [15] -94.29843 -94.73542 -92.40984 -91.13289 -89.45000 -87.81000 -87.02000 #>  #> $Canada6$y #>  [1] 79.66000 79.33690 79.03930 78.28723 78.21533 78.34333 78.75099 79.11373 #>  [9] 79.38010 79.37248 79.70502 80.15777 80.60233 80.90729 80.97727 81.20646 #> [17] 81.25739 80.72345 80.50932 80.32000 79.66000 #>  #> $Canada6$isHole #> [1] FALSE #>  #>  #> $Canada7 #> $Canada7$x #>  [1] -94.68409 -93.57392 -91.60502 -90.74185 -90.96966 -89.82224 -89.18708 #>  [8] -87.83828 -86.37919 -84.78963 -82.75344 -81.12853 -80.05751 -79.83393 #> [15] -80.45777 -81.94884 -83.22889 -86.09745 -88.15035 -89.76472 -92.42244 #> [22] -92.76829 -92.88991 -93.89382 -95.96246 -97.12138 -96.74512 -94.68409 #>  #> $Canada7$y #>  [1] 77.09788 76.77630 76.77852 76.44960 76.07401 75.84777 75.61017 75.56619 #>  [9] 75.48242 75.69920 75.78432 75.71398 75.33685 74.92313 74.65730 74.44246 #> [17] 74.56403 74.41003 74.39231 74.51556 74.83776 75.38682 75.88266 76.31924 #> [25] 76.44138 76.75108 77.16139 77.09788 #>  #> $Canada7$isHole #> [1] FALSE #>  #>  #> $Canada8 #> $Canada8$x #>  [1] -56.13404 -56.79588 -56.14311 -55.47149 -55.82240 -54.93514 -54.47378 #>  [8] -53.47655 -53.78601 -53.08613 -52.95865 -52.64810 -53.06916 -53.52146 #> [15] -54.17894 -53.96187 -54.24048 -55.40077 -55.99748 -55.29122 -56.25080 #> [22] -57.32523 -59.26602 -59.41949 -58.79659 -59.23162 -58.39180 -57.35869 #> [29] -56.73865 -55.87098 -55.40697 -55.60022 -56.13404 #>  #> $Canada8$y #>  [1] 50.68701 49.81231 50.15012 49.93582 49.58713 49.31301 49.55669 49.24914 #>  [9] 48.51678 48.68780 48.15716 47.53555 46.65550 46.61829 46.80707 47.62521 #> [17] 47.75228 46.88499 46.91972 47.38956 47.63255 47.57281 47.60335 47.89945 #> [25] 48.25153 48.52319 49.12558 50.71827 51.28744 51.63209 51.58827 51.31707 #> [33] 50.68701 #>  #> $Canada8$isHole #> [1] FALSE #>  #>  #> $Canada9 #> $Canada9$x #>  [1] -108.2114 -107.8194 -106.9289 -105.8810 -105.7050 -106.3135 -109.7000 #>  [8] -112.2231 -113.7438 -113.8713 -111.7942 -116.3122 -117.7104 -116.3460 #> [15] -115.4049 -112.5906 -110.8142 -109.0671 -110.4973 -109.5811 -108.5486 #> [22] -108.2114 #>  #> $Canada9$y #>  [1] 76.20168 75.84552 76.01282 75.96940 75.47951 75.00527 74.85000 74.41696 #>  [9] 74.39427 74.72029 75.16250 75.04343 75.22220 76.19903 76.47887 76.14134 #> [17] 75.54919 75.47321 76.42982 76.79417 76.67832 76.20168 #>  #> $Canada9$isHole #> [1] FALSE #>  #>  #> $Canada10 #> $Canada10$x #>  [1] -100.35642  -99.16387  -97.38000  -97.12000  -98.05359  -96.54000 #>  [7]  -96.72000  -98.35966  -99.32286 -100.01482 -102.50000 -102.48000 #> [13] -100.43836 -101.54000 -100.35642 #>  #> $Canada10$y #>  [1] 73.84389 73.63339 73.76000 73.47000 72.99052 72.56000 71.66000 71.27285 #>  [9] 71.35639 71.73827 72.51000 72.83000 72.70588 73.36000 73.84389 #>  #> $Canada10$isHole #> [1] FALSE #>  #>  #> $Canada11 #> $Canada11$x #>  [1] -85.16131 -84.97576 -84.46401 -83.88263 -82.78758 -81.64201 -81.55344 #>  [8] -80.81736 -80.10345 -80.99102 -82.54718 -83.10880 -84.10042 -85.52340 #> [15] -85.86677 -87.22198 -86.35276 -86.22489 -85.88385 -85.16131 #>  #> $Canada11$y #>  [1] 65.65728 65.21752 65.37177 65.10962 64.76669 64.45514 63.97961 64.05749 #>  [9] 63.72598 63.41125 63.65172 64.10188 63.56971 63.05238 63.63725 63.54124 #> [17] 64.03583 64.82292 65.73878 65.65728 #>  #> $Canada11$isHole #> [1] FALSE #>  #>  #> $Canada12 #> $Canada12$x #>  [1] -93.19630 -94.26905 -95.40986 -96.03375 -96.01827 -95.49579 -94.50366 #>  [8] -92.42001 -90.50979 -92.00397 -93.19630 #>  #> $Canada12$y #>  [1] 72.77199 72.02460 72.06188 72.94028 73.43743 73.86242 74.13491 74.10003 #>  [9] 73.85673 72.96624 72.77199 #>  #> $Canada12$isHole #> [1] FALSE #>  #>  #> $Canada13 #> $Canada13$x #>  [1]  -98.50000  -97.73558  -97.70442  -98.16000  -99.80874 -100.88366 #>  [7] -100.86292 -102.50209 -102.56552 -101.48973  -99.98349  -98.57699 #> [13]  -98.50000 #>  #> $Canada13$y #>  [1] 76.72000 76.25656 75.74344 75.00000 74.89744 75.05736 75.64075 75.56380 #>  [9] 76.33660 76.30537 76.64634 76.58859 76.72000 #>  #> $Canada13$isHole #> [1] FALSE #>  #>  #> $Canada14 #> $Canada14$x #>  [1] -116.1986 -116.3358 -117.1061 -118.0404 -119.8993 -121.5000 -122.8549 #>  [8] -122.8549 -121.1575 -119.1039 -117.5701 -116.1986 #>  #> $Canada14$y #>  [1] 77.64529 76.87696 76.53003 76.48117 76.05321 75.90002 76.11654 76.11654 #>  [9] 76.86451 77.51222 77.49832 77.64529 #>  #> $Canada14$isHole #> [1] FALSE #>  #>  #> $Canada15 #> $Canada15$x #>  [1] -123.5100 -124.0129 -125.6550 -125.9550 -126.8500 -127.0300 -128.0593 #>  [8] -128.4446 -128.3584 -127.3086 -126.6950 -125.7550 -125.4150 -124.9208 #> [15] -123.9225 -123.5100 #>  #> $Canada15$y #>  [1] 48.51001 48.37085 48.82500 49.18000 49.53000 49.81500 49.99496 50.53914 #>  [9] 50.77065 50.55257 50.40090 50.29502 49.95000 49.47527 49.06248 48.51001 #>  #> $Canada15$isHole #> [1] FALSE #>  #>  #> $Canada16 #> $Canada16$x #>  [1] -100.06019  -99.67094 -101.30394 -102.94981 -105.17613 -104.21043 #>  [7] -105.41958 -105.49229 -103.52928 -100.82516 -100.06019 #>  #> $Canada16$y #>  [1] 78.32475 77.90754 78.01898 78.34323 78.38033 78.67742 78.91834 79.30159 #>  [9] 79.16535 78.80046 78.32475 #>  #> $Canada16$isHole #> [1] FALSE #>  #>  #> $Canada17 #> $Canada17$x #>  [1] -76.34000 -76.25140 -77.31444 -78.39167 -79.48625 -79.77583 -80.87610 #>  [8] -80.83389 -80.35306 -78.06444 -76.34000 #>  #> $Canada17$y #>  [1] 73.10268 72.82639 72.85555 72.87666 72.74220 72.80290 73.33318 73.69318 #>  [9] 73.75972 73.65193 73.10268 #>  #> $Canada17$isHole #> [1] FALSE #>  #>  #> $Canada18 #> $Canada18$x #>  [1] -95.64768 -96.26952 -97.61740 -98.43180 -99.79740 -98.91740 -98.21826 #>  [8] -97.15740 -96.55740 -96.25740 -95.64768 #>  #> $Canada18$y #>  [1] 69.10769 68.75704 69.06003 68.95070 69.40003 69.71003 70.14354 69.86003 #>  [9] 69.68003 69.49003 69.10769 #>  #> $Canada18$isHole #> [1] FALSE #>  #>  #> $Canada19 #> $Canada19$x #> [1] -93.61276 -94.15691 -95.60868 -96.82093 -96.28859 -94.85082 -93.97775 #> [8] -93.61276 #>  #> $Canada19$y #> [1] 74.98000 74.59235 74.66686 74.92762 75.37783 75.64722 75.29649 74.98000 #>  #> $Canada19$isHole #> [1] FALSE #>  #>  #> $Canada20 #> $Canada20$x #> [1] -95.83029 -97.30984 -98.12429 -98.55287 -98.63198 -97.33723 -96.75440 #> [8] -95.55928 -95.83029 #>  #> $Canada20$y #> [1] 78.05694 77.85060 78.08286 78.45811 78.87193 78.83198 78.76581 78.41831 #> [9] 78.05694 #>  #> $Canada20$isHole #> [1] FALSE #>  #>  #> $Canada21 #> $Canada21$x #> [1] -75.86588 -76.98687 -77.23640 -76.81166 -75.89521 -75.11450 -75.10333 #> [8] -75.21597 -75.86588 #>  #> $Canada21$y #> [1] 67.14886 67.09873 67.58809 68.14856 68.28721 68.01036 67.58202 67.44425 #> [9] 67.14886 #>  #> $Canada21$isHole #> [1] FALSE #>  #>  #> $Canada22 #> $Canada22$x #> [1] -110.1869 -112.0512 -113.5343 -112.7246 -111.2644 -109.8545 -110.1869 #>  #> $Canada22$y #> [1] 77.69701 77.40923 77.73221 78.05105 78.15296 77.99632 77.69701 #>  #> $Canada22$isHole #> [1] FALSE #>  #>  #> $Canada23 #> $Canada23$x #>  [1] -132.7100 -132.7100 -132.7100 -132.7100 -131.7500 -132.0495 -131.1790 #>  [8] -131.5778 -132.1804 -132.5500 -133.0546 -133.2397 -133.1800 -132.7100 #>  #> $Canada23$y #>  [1] 54.04001 54.04001 54.04001 54.04001 54.12000 52.98462 52.18043 52.18237 #>  [9] 52.63971 53.10001 53.41147 53.85108 54.16998 54.04001 #>  #> $Canada23$isHole #> [1] FALSE #>  #>  #> $Canada24 #> $Canada24$x #> [1] -104.50 -105.38 -106.94 -106.60 -105.26 -104.50 #>  #> $Canada24$y #> [1] 73.42 72.76 73.46 73.60 73.64 73.42 #>  #> $Canada24$isHole #> [1] FALSE #>  #>  #> $Canada25 #> $Canada25$x #> [1] -81.89825 -83.06857 -83.77462 -83.99367 -83.25048 -81.87699 -81.89825 #>  #> $Canada25$y #> [1] 62.71080 62.15922 62.18231 62.45280 62.91409 62.90458 62.71080 #>  #> $Canada25$isHole #> [1] FALSE #>  #>  #> $Canada26 #> $Canada26$x #> [1] -61.80630 -62.29318 -63.58926 -64.51912 -64.17322 -62.85829 -61.83559 #> [8] -61.80630 #>  #> $Canada26$y #> [1] 49.10506 49.08717 49.40069 49.87304 49.95718 49.70641 49.28855 49.10506 #>  #> $Canada26$isHole #> [1] FALSE #>  #>  #> $Canada27 #> $Canada27$x #> [1] -63.66450 -62.93930 -62.01208 -62.50391 -62.87433 -64.14280 -64.39261 #> [8] -64.01486 -63.66450 #>  #> $Canada27$y #> [1] 46.55001 46.41587 46.44314 46.03339 45.96818 46.39265 46.72747 47.03601 #> [9] 46.55001 #>  #> $Canada27$isHole #> [1] FALSE #>  #>  #> $Canada28 #> $Canada28$x #> [1] -109.6631 -110.8813 -112.5421 -112.5259 -111.5000 -110.9637 -109.6631 #>  #> $Canada28$y #> [1] 78.60197 78.40692 78.40790 78.55055 78.84999 78.80444 78.60197 #>  #> $Canada28$isHole #> [1] FALSE #>  #>  #> $Canada29 #> $Canada29$x #> [1] -93.84000 -94.29561 -96.16965 -96.43630 -94.42258 -93.72066 -93.84000 #>  #> $Canada29$y #> [1] 77.52000 77.49134 77.55511 77.83463 77.82000 77.63433 77.52000 #>  #> $Canada29$isHole #> [1] FALSE #>  #>  #> $Canada30 #> $Canada30$x #> [1] -79.26582 -79.65752 -80.09956 -80.36215 -80.31539 -79.92939 -79.52002 #> [8] -79.26582 #>  #> $Canada30$y #> [1] 62.15867 61.63308 61.71810 62.01649 62.08557 62.38560 62.36371 62.15867 #>  #> $Canada30$isHole #> [1] FALSE #>  #>  #> $`United States1` #> $`United States1`$x #>   [1]  -94.81758  -94.64000  -94.32914  -93.63087  -92.61000  -91.64000 #>   [7]  -90.83000  -89.60000  -89.27292  -88.37811  -87.43979  -86.46199 #>  [13]  -85.65236  -84.87608  -84.77924  -84.54375  -84.60490  -84.33670 #>  [19]  -84.14212  -84.09185  -83.89077  -83.61613  -83.46955  -83.59285 #>  [25]  -82.55092  -82.33776  -82.13764  -82.43000  -82.90000  -83.12000 #>  [31]  -83.14200  -83.02981  -82.69009  -82.43928  -81.27775  -80.24745 #>  [37]  -78.93936  -78.92000  -79.01000  -79.17167  -78.72028  -77.73789 #>  [43]  -76.82003  -76.50000  -76.37500  -75.31821  -74.86700  -73.34783 #>  [49]  -71.50506  -71.40500  -71.08482  -70.66000  -70.30500  -69.99997 #>  [55]  -69.23722  -68.90500  -68.23444  -67.79046  -67.79134  -67.13741 #>  [61]  -66.96466  -68.03252  -69.06000  -70.11617  -70.64548  -70.81489 #>  [67]  -70.82500  -70.49500  -70.08000  -70.18500  -69.88497  -69.96503 #>  [73]  -70.64000  -71.12039  -71.86000  -72.29500  -72.87643  -73.71000 #>  [79]  -72.24126  -71.94500  -73.34500  -73.98200  -73.95232  -74.25671 #>  [85]  -73.96244  -74.17838  -74.90604  -74.98041  -75.20002  -75.52805 #>  [91]  -75.32000  -75.07183  -75.05673  -75.37747  -75.94023  -76.03127 #>  [97]  -75.72205  -76.23287  -76.35000  -76.54272  -76.32933  -76.99000 #> [103]  -76.30162  -76.25874  -75.97180  -75.86804  -75.72749  -76.36318 #> [109]  -77.39763  -78.05496  -78.55435  -79.06067  -79.20357  -80.30132 #> [115]  -80.86498  -81.33629  -81.49042  -81.31371  -80.98000  -80.53558 #> [121]  -80.53000  -80.05654  -80.08801  -80.13156  -80.38103  -80.68000 #> [127]  -81.17213  -81.33000  -81.71000  -82.24000  -82.70515  -82.85526 #> [133]  -82.65000  -82.93000  -83.70959  -84.10000  -85.10882  -85.28784 #> [139]  -85.77310  -86.40000  -87.53036  -88.41782  -89.18049  -89.59383 #> [145]  -89.41373  -89.43000  -89.21767  -89.40823  -89.77928  -90.15463 #> [151]  -90.88022  -91.62678  -92.49906  -93.22637  -93.84842  -94.69000 #> [157]  -95.60026  -96.59404  -97.14000  -97.37000  -97.38000  -97.33000 #> [163]  -97.14000  -97.53000  -98.24000  -99.02000  -99.30000  -99.52000 #> [169] -100.11000 -100.45584 -100.95760 -101.66240 -102.48000 -103.11000 #> [175] -103.94000 -104.45697 -104.70575 -105.03737 -105.63159 -106.14290 #> [181] -106.50759 -108.24000 -108.24194 -109.03500 -111.02361 -113.30498 #> [187] -114.81500 -114.72139 -115.99135 -117.12776 -117.29594 -117.94400 #> [193] -118.41060 -118.51989 -119.08100 -119.43884 -120.36778 -120.62286 #> [199] -120.74433 -121.71457 -122.54747 -122.51201 -122.95319 -123.72720 #> [205] -123.86517 -124.39807 -124.17886 -124.21370 -124.53284 -124.14214 #> [211] -124.02054 -123.89893 -124.07964 -124.39567 -124.68721 -124.56610 #> [217] -123.12000 -122.58736 -122.34000 -122.50000 -122.84000 -120.00000 #> [223] -117.03121 -116.04818 -113.00000 -110.05000 -107.05000 -104.04826 #> [229] -100.65000  -97.22872  -95.15907  -95.15609  -94.81758 #>  #> $`United States1`$y #>   [1] 49.38905 48.84000 48.67074 48.60926 48.45000 48.14000 48.27000 48.01000 #>   [9] 48.01981 48.30292 47.94000 47.55334 47.22022 46.90008 46.63710 46.53868 #>  [17] 46.43960 46.40877 46.51223 46.27542 46.11693 46.11693 45.99469 45.81689 #>  [25] 45.34752 44.44000 43.57109 42.98000 42.43000 42.08000 41.97568 41.83280 #>  [33] 41.67511 41.67511 42.20903 42.36620 42.86361 42.96500 43.27000 43.46634 #>  [41] 43.62509 43.62906 43.62878 44.01846 44.09631 44.81645 45.00048 45.00738 #>  [49] 45.00820 45.25500 45.30524 45.46000 45.91500 46.69307 47.44778 47.18500 #>  [57] 47.35486 47.06636 45.70281 45.13753 44.80970 44.32520 43.98000 43.68405 #>  [65] 43.09024 42.86530 42.33500 41.80500 41.78000 42.14500 41.92283 41.63717 #>  [73] 41.47500 41.49445 41.32000 41.27000 41.22065 40.93110 41.11948 40.93000 #>  [81] 40.63000 40.62800 40.75075 40.47351 40.42763 39.70926 38.93954 39.19640 #>  [89] 39.24845 39.49850 38.96000 38.78203 38.40412 38.01551 37.21689 37.25660 #>  [97] 37.93705 38.31922 39.15000 38.71762 38.08326 38.23999 37.91794 36.96640 #> [105] 36.89726 36.55125 35.55074 34.80854 34.51201 33.92547 33.86133 33.49395 #> [113] 33.15839 32.50936 32.03330 31.44049 30.72999 30.03552 29.18000 28.47213 #> [121] 28.04000 26.88000 26.20577 25.81678 25.20616 25.08000 25.20126 25.64000 #> [129] 25.87000 26.73000 27.49504 27.88624 28.55000 29.10000 29.93656 30.09000 #> [137] 29.63615 29.68612 30.15261 30.40000 30.27433 30.38490 30.31598 30.15999 #> [145] 29.89419 29.48864 29.29108 29.15961 29.30714 29.11743 29.14854 29.67700 #> [153] 29.55230 29.78375 29.71363 29.48000 28.73863 28.30748 27.83000 27.38000 #> [161] 26.69000 26.21000 25.87000 25.84000 26.06000 26.37000 26.84000 27.54000 #> [169] 28.11000 28.69612 29.38071 29.77930 29.76000 28.97000 29.27000 29.57196 #> [177] 30.12173 30.64402 31.08383 31.39995 31.75452 31.75485 31.34222 31.34194 #> [185] 31.33472 32.03914 32.52528 32.72083 32.61239 32.53534 33.04622 33.62124 #> [193] 33.74091 34.02778 34.07800 34.34848 34.44711 34.60855 35.15686 36.16153 #> [201] 37.55176 37.78339 38.11371 38.95166 39.76699 40.31320 41.14202 41.99964 #> [209] 42.76599 43.70838 44.61589 45.52341 46.86475 47.72017 48.18443 48.37971 #> [217] 48.04000 47.09600 47.36000 48.18000 49.00000 49.00000 49.00000 49.00000 #> [225] 49.00000 49.00000 49.00000 48.99986 49.00000 49.00070 49.00000 49.38425 #> [233] 49.38905 #>  #> $`United States1`$isHole #> [1] FALSE #>  #>  #> $`United States2` #> $`United States2`$x #>   [1] -155.0678 -154.3442 -153.9000 -152.2100 -152.2700 -150.7400 -149.7200 #>   [8] -147.6134 -145.6900 -144.9200 -143.5894 -142.0725 -140.9860 -140.9860 #>  [15] -140.9925 -140.9978 -140.0130 -139.0390 -138.3409 -137.4525 -136.4797 #>  [22] -135.4758 -134.9450 -134.2711 -133.3555 -132.7304 -131.7078 -130.0078 #>  [29] -129.9800 -130.5361 -131.0858 -131.9672 -132.2500 -133.5392 -134.0781 #>  [36] -135.0382 -136.6281 -137.8000 -139.8678 -140.8253 -142.5744 -143.9589 #>  [43] -145.9256 -147.1144 -148.2243 -148.0181 -148.5708 -149.7279 -150.6082 #>  [50] -151.7164 -151.8594 -151.4097 -150.3469 -150.6211 -151.8958 -152.5783 #>  [57] -154.0192 -153.2875 -154.2325 -155.3075 -156.3083 -156.5561 -158.1172 #>  [64] -158.4333 -159.6033 -160.2897 -161.2230 -162.2378 -163.0694 -164.7856 #>  [71] -164.9422 -163.8483 -162.8700 -161.8042 -160.5636 -160.0706 -158.6844 #>  [78] -158.4611 -157.7228 -157.5503 -157.0417 -158.1947 -158.5172 -159.0586 #>  [85] -159.7117 -159.9813 -160.3553 -161.3550 -161.9689 -162.0550 -161.8742 #>  [92] -162.5181 -163.8183 -164.6622 -165.3464 -165.3508 -166.1214 -165.7345 #>  [99] -164.9192 -164.5625 -163.7533 -163.0672 -162.2606 -161.5344 -160.7725 #> [106] -160.9583 -161.5181 -160.7778 -161.3919 -162.4531 -162.7578 -163.5464 #> [113] -164.9608 -166.4253 -166.8450 -168.1106 -166.7053 -164.4747 -163.6525 #> [120] -163.7886 -161.6778 -162.4897 -163.7197 -164.4310 -165.3903 -166.7644 #> [127] -166.2047 -164.4308 -163.1686 -162.9306 -161.9089 -160.9348 -159.0392 #> [134] -158.1197 -156.5808 -155.0678 #>  #> $`United States2`$y #>   [1] 71.14778 70.69641 70.88999 70.82999 70.60001 70.43002 70.53001 70.21403 #>   [9] 70.12001 69.98999 70.15251 69.85194 69.71200 69.71200 66.00003 60.30640 #>  [17] 60.27684 60.00001 59.56211 58.90500 59.46389 59.78778 59.27056 58.86111 #>  [25] 58.41029 57.69289 56.55212 55.91583 55.28500 54.80275 55.17891 55.49778 #>  [33] 56.37000 57.17889 58.12307 58.18771 58.21221 58.50000 59.53776 59.72752 #>  [41] 60.08445 59.99918 60.45861 60.88466 60.67299 59.97833 59.91417 59.70566 #>  [49] 59.36821 59.15582 59.74498 60.72580 61.03359 61.28442 60.72720 60.06166 #>  [57] 59.35028 58.86473 58.14637 57.72779 57.42277 56.97998 56.46361 55.99415 #>  [65] 55.56669 55.64358 55.36473 55.02419 54.68974 54.40417 54.57222 55.03943 #>  [73] 55.34804 55.89499 56.00805 56.41806 57.01668 57.21692 57.57000 58.32833 #>  [81] 58.91888 58.61580 58.78778 58.42419 58.93139 58.57255 59.07112 58.67084 #>  [89] 58.67166 59.26693 59.63362 59.98972 59.79806 60.26748 60.50750 61.07390 #>  [97] 61.50002 62.07500 62.63308 63.14638 63.21945 63.05946 63.54194 63.45582 #> [105] 63.76611 64.22280 64.40279 64.78860 64.77724 64.55944 64.33861 64.55916 #> [113] 64.44695 64.68667 65.08890 65.67000 66.08832 66.57666 66.57666 66.07721 #> [121] 66.11612 66.73557 67.11639 67.61634 68.04277 68.35888 68.88303 68.91554 #> [129] 69.37111 69.85806 70.33333 70.44769 70.89164 70.82472 71.35776 71.14778 #>  #> $`United States2`$isHole #> [1] FALSE #>  #>  #> $`United States3` #> $`United States3`$x #> [1] -153.0063 -154.0051 -154.5164 -154.6710 -153.7628 -153.2287 -152.5648 #> [8] -152.1411 -153.0063 #>  #> $`United States3`$y #> [1] 57.11584 56.73468 56.99275 57.46120 57.81657 57.96897 57.90143 57.59106 #> [9] 57.11584 #>  #> $`United States3`$isHole #> [1] FALSE #>  #>  #> $`United States4` #> $`United States4`$x #>  [1] -171.7317 -171.1144 -170.4911 -169.6825 -168.6894 -168.7719 -169.5294 #>  [8] -170.2906 -170.6714 -171.5531 -171.7911 -171.7317 #>  #> $`United States4`$y #>  [1] 63.78252 63.59219 63.69498 63.43112 63.29751 63.18860 62.97693 63.19444 #>  [9] 63.37582 63.31779 63.40585 63.78252 #>  #> $`United States4`$isHole #> [1] FALSE #>  #>  #> $`United States5` #> $`United States5`$x #>  [1] -155.5421 -155.6882 -155.9366 -155.9081 -156.0735 -156.0237 -155.8501 #>  [8] -155.9191 -155.8611 -155.7850 -155.4021 -155.2245 -155.0623 -154.8074 #> [15] -154.8315 -155.2222 -155.5421 #>  #> $`United States5`$y #>  [1] 19.08348 18.91619 19.05939 19.33888 19.70294 19.81422 19.97729 20.17395 #>  [9] 20.26721 20.24870 20.07975 19.99302 19.85910 19.50871 19.45328 19.23972 #> [17] 19.08348 #>  #> $`United States5`$isHole #> [1] FALSE #>  #>  #> $`United States6` #> $`United States6`$x #> [1] -165.5792 -166.1928 -166.8483 -167.4553 -166.4678 -165.6744 -165.5792 #>  #> $`United States6`$y #> [1] 59.90999 59.75444 59.94141 60.21307 60.38417 60.29361 59.90999 #>  #> $`United States6`$isHole #> [1] FALSE #>  #>  #> $`United States7` #> $`United States7`$x #> [1] -156.0793 -156.4145 -156.5867 -156.7017 -156.7105 -156.6126 -156.2571 #> [8] -155.9957 -156.0793 #>  #> $`United States7`$y #> [1] 20.64397 20.57241 20.78300 20.86430 20.92676 21.01249 20.91745 20.76404 #> [9] 20.64397 #>  #> $`United States7`$isHole #> [1] FALSE #>  #>  #> $`United States8` #> $`United States8`$x #> [1] -157.6528 -157.7070 -157.7786 -158.1267 -158.2538 -158.2927 -158.0252 #> [8] -157.9416 -157.6528 #>  #> $`United States8`$y #> [1] 21.32217 21.26442 21.27729 21.31244 21.53919 21.57912 21.71696 21.65272 #> [9] 21.32217 #>  #> $`United States8`$isHole #> [1] FALSE #>  #>  #> $`United States9` #> $`United States9`$x #> [1] -159.3451 -159.4637 -159.8005 -159.7488 -159.5962 -159.3657 -159.3451 #>  #> $`United States9`$y #> [1] 21.98200 21.88299 22.06533 22.13820 22.23618 22.21494 21.98200 #>  #> $`United States9`$isHole #> [1] FALSE #>  #>  #> $`United States10` #> $`United States10`$x #> [1] -156.7582 -156.7893 -157.3252 -157.2503 -156.7582 #>  #> $`United States10`$y #> [1] 21.17684 21.06873 21.09777 21.21958 21.17684 #>  #> $`United States10`$isHole #> [1] FALSE #>  #>  #> $China1 #> $China1$x #>   [1] 127.65741 129.39782 130.58229 130.98728 132.50667 133.37360 135.02631 #>   [8] 134.50081 134.11236 133.76964 133.09713 131.88345 131.02521 131.28856 #>  [15] 131.14469 130.63387 130.64002 129.99427 129.59667 128.05222 128.20843 #>  [22] 127.34378 126.86908 126.18205 125.07994 124.26562 122.86757 122.13139 #>  [29] 121.05455 121.58599 121.37676 122.16860 121.64036 120.76863 119.63960 #>  [36] 119.02346 118.04275 117.53270 118.05970 118.87815 118.91164 119.70280 #>  [43] 120.82346 121.71126 122.35794 122.51999 121.10416 120.63701 119.66456 #>  [50] 119.15121 120.22752 120.62037 121.22901 121.90815 121.89192 121.26426 #>  [57] 121.50352 122.09211 121.93843 121.68444 121.12566 120.39547 119.58550 #>  [64] 118.65687 117.28161 115.89074 114.76383 114.15255 113.80678 113.24108 #>  [71] 111.84359 110.78547 110.44404 109.88986 109.62766 109.86449 108.52281 #>  [78] 108.05018 107.04342 106.56727 106.72540 105.81125 105.32921 104.47686 #>  [85] 103.50451 102.70699 102.17044 101.65202 101.80312 101.27003 101.18001 #>  [92] 101.15003 100.41654  99.98349  99.24090  99.53199  98.89875  98.66026 #>  [99]  97.60472  97.72461  98.67184  98.71209  98.68269  98.24623  97.91199 #> [106]  97.32711  96.24883  96.58659  96.11768  95.40480  94.56599  93.41335 #> [113]  92.50312  91.69666  91.25885  90.73051  90.01583  89.47581  88.81425 #> [120]  88.73033  88.12044  86.95452  85.82332  85.01164  84.23458  83.89899 #> [127]  83.33712  82.32751  81.52580  81.11126  79.72137  78.73889  78.45845 #> [134]  79.17613  79.20889  78.81109  78.91227  77.83745  76.19285  75.89690 #> [141]  75.15803  74.98000  74.82999  74.86482  74.25751  73.92885  73.67538 #> [148]  73.96001  73.82224  74.77686  75.46783  76.52637  76.90448  78.18720 #> [155]  78.54366  80.11943  80.25999  80.18015  80.86621  79.96611  81.94707 #> [162]  82.45893  83.18048  85.16429  85.72048  85.76823  86.59878  87.35997 #> [169]  87.75126  88.01383  88.85430  90.28083  90.97081  90.58577  90.94554 #> [176]  92.13389  93.48073  94.68893  95.30688  95.76245  96.34940  97.45176 #> [183]  99.51582 100.84587 101.83304 103.31228 104.52228 104.96499 106.12932 #> [190] 107.74477 109.24360 110.41210 111.12968 111.82959 111.66774 111.34838 #> [197] 111.87331 112.43606 113.46391 114.46033 115.98510 116.71787 117.42170 #> [204] 118.87433 119.66327 119.77282 118.86657 118.06414 117.29551 116.30895 #> [211] 115.74284 115.48528 116.19180 116.67880 117.87924 119.28846 119.27937 #> [218] 120.18205 120.73819 120.72579 120.17709 121.00308 122.24575 123.57151 #> [225] 125.06821 125.94635 126.56440 126.93916 127.28746 127.65741 #>  #> $China1$y #>   [1] 49.76027 49.44060 48.72969 47.79013 47.78897 48.18344 48.47823 47.57844 #>   [9] 47.21247 46.11693 45.14407 45.32116 44.96795 44.11152 42.92999 42.90301 #>  [17] 42.39501 42.98539 42.42498 41.99428 41.46677 41.50315 41.81657 41.10734 #>  [25] 40.56982 39.92849 39.63779 39.17045 38.89747 39.36085 39.75026 40.42244 #>  [33] 40.94639 40.59339 39.89806 39.25233 39.20427 38.73764 38.06148 37.89733 #>  [41] 37.44846 37.15639 37.87043 37.48112 37.45448 36.93061 36.65133 36.11144 #>  [49] 35.60979 34.90986 34.36033 33.37672 32.46032 31.69217 30.94935 30.67627 #>  [57] 30.14291 29.83252 29.01802 28.22551 28.13567 27.05321 25.74078 24.54739 #>  [65] 23.62450 22.78287 22.66807 22.22376 22.54834 22.05137 21.55049 21.39714 #>  [73] 20.34103 20.28246 21.00823 21.39505 21.71521 21.55238 21.81190 22.21820 #>  [81] 22.79427 22.97689 23.35206 22.81915 22.70376 22.70880 22.46475 22.31820 #>  [89] 21.17437 21.20165 21.43657 21.84998 21.55884 21.74294 22.11831 22.94904 #>  [97] 23.14272 24.06329 23.89740 25.08364 25.91870 26.74354 27.50881 27.74722 #> [105] 28.33595 28.26158 28.41103 28.83098 29.45280 29.03172 29.27744 28.64063 #> [113] 27.89688 27.77174 28.04061 28.06495 28.29644 28.04276 27.29932 28.08686 #> [121] 27.87654 27.97426 28.20358 28.64277 28.83989 29.32023 29.46373 30.11527 #> [129] 30.42272 30.18348 30.88271 31.51591 32.61816 32.48378 32.99439 33.50620 #> [137] 34.32194 35.49401 35.89840 36.66681 37.13303 37.41999 37.99001 38.37885 #> [145] 38.60651 38.50582 39.43124 39.66001 39.89397 40.36643 40.56207 40.42795 #> [153] 41.06649 41.18532 41.58224 42.12394 42.35000 42.92007 43.18036 44.91752 #> [161] 45.31703 45.53965 47.33003 47.00096 47.45297 48.45575 48.54918 49.21498 #> [169] 49.29720 48.59946 48.06908 47.69355 46.88815 45.71972 45.28607 45.11508 #> [177] 44.97547 44.35233 44.24133 43.31945 42.72564 42.74889 42.52469 42.66380 #> [185] 42.51487 41.90747 41.90835 41.59741 42.13433 42.48152 42.51945 42.87123 #> [193] 43.40683 43.74312 44.07318 44.45744 45.10208 45.01165 44.80889 45.33982 #> [201] 45.72724 46.38820 46.67273 46.80541 46.69268 47.04806 47.74706 48.06673 #> [209] 47.69771 47.85341 47.72654 48.13538 49.13460 49.88853 49.51098 50.14288 #> [217] 50.58291 51.64357 51.96412 52.51623 52.75389 53.25140 53.43173 53.45880 #> [225] 53.16104 52.79280 51.78426 51.35389 50.73980 49.76027 #>  #> $China1$isHole #> [1] FALSE #>  #>  #> $China2 #> $China2$x #>  [1] 110.3392 109.4752 108.6552 108.6262 109.1191 110.2116 110.7866 111.0101 #>  [9] 110.5706 110.3392 #>  #> $China2$y #>  [1] 18.67840 18.19770 18.50768 19.36789 19.82104 20.10125 20.07753 19.69593 #>  [9] 19.25588 18.67840 #>  #> $China2$isHole #> [1] FALSE #>  #>  #> $Brazil #> $Brazil$x #>   [1] -57.62513 -56.29090 -55.16229 -54.49073 -53.64874 -53.62835 -54.13005 #>   [8] -54.62529 -54.42895 -54.29348 -54.29296 -54.65283 -55.02790 -55.40075 #>  [15] -55.51764 -55.61068 -55.79796 -56.47332 -56.88151 -57.93716 -57.87067 #>  [22] -58.16639 -57.85380 -57.95000 -57.67601 -57.49837 -57.73456 -58.28080 #>  [29] -58.38806 -58.24122 -60.15839 -60.54297 -60.25115 -60.26433 -60.45920 #>  [36] -60.50330 -61.08412 -61.71320 -62.12708 -62.80306 -63.19650 -64.31635 #>  [43] -65.40228 -65.32190 -65.44484 -65.33844 -66.64691 -67.17380 -68.04819 #>  [50] -68.27125 -68.78616 -69.52968 -70.09375 -70.54869 -70.48189 -71.30241 #>  [57] -72.18489 -72.56303 -73.22671 -73.01538 -73.57106 -73.98724 -73.72340 #>  [64] -73.72449 -73.12003 -73.21971 -72.96451 -72.89193 -71.74841 -70.92884 #>  [71] -70.79477 -69.89364 -69.44410 -69.42049 -69.57707 -70.02066 -70.01557 #>  [78] -69.45240 -69.25243 -69.21864 -69.80460 -69.81697 -67.86857 -67.53781 #>  [85] -67.26000 -67.06505 -66.87633 -66.32577 -65.54827 -65.35471 -64.61101 #>  [92] -64.19931 -64.08309 -63.36879 -63.42287 -64.27000 -64.40883 -64.36849 #>  [99] -64.81606 -64.62866 -63.88834 -63.09320 -62.80453 -62.08543 -60.96689 #> [106] -60.60118 -60.73357 -60.21368 -59.98096 -60.11100 -59.76741 -59.53804 #> [113] -59.81541 -59.97452 -59.71855 -59.64604 -59.03086 -58.54001 -58.42948 #> [120] -58.11345 -57.66097 -57.33582 -56.78270 -56.53939 -55.99570 -55.90560 #> [127] -56.07334 -55.97332 -55.56976 -55.09759 -54.52475 -54.08806 -53.77852 #> [134] -53.55484 -53.41847 -52.93966 -52.55642 -52.24934 -51.65780 -51.31715 #> [141] -51.06977 -50.50888 -49.97408 -49.94710 -50.69925 -50.38821 -48.62057 #> [148] -48.58450 -47.82496 -46.56658 -44.90570 -44.41762 -44.58159 -43.41879 #> [155] -41.47266 -39.97867 -38.50038 -37.22325 -36.45294 -35.59780 -35.23539 #> [162] -34.89603 -34.72999 -35.12821 -35.63697 -37.04652 -37.68361 -38.42388 #> [169] -38.67389 -38.95328 -38.88230 -39.16109 -39.26734 -39.58352 -39.76082 #> [176] -40.77474 -40.94476 -41.75416 -41.98828 -43.07470 -44.64781 -45.35214 #> [183] -46.47209 -47.64897 -48.49546 -48.64100 -48.47474 -48.66152 -48.88846 #> [190] -49.58733 -50.69687 -51.57623 -52.25608 -52.71210 -53.37366 -53.65054 #> [197] -53.20959 -53.78795 -54.57245 -55.60151 -55.97324 -56.97603 -57.62513 #>  #> $Brazil$y #>   [1] -30.21629485 -28.85276051 -27.88191538 -27.47475677 -26.92347259 #>   [6] -26.12486500 -25.54763926 -25.73925547 -25.16218475 -24.57079966 #>  [11] -24.02101409 -23.83957814 -24.00127370 -23.95693532 -23.57199757 #>  [16] -22.65561940 -22.35692962 -22.08630014 -22.28215382 -22.09017588 #>  [21] -20.73268768 -20.17670094 -19.96999521 -19.40000416 -18.96183969 #>  [26] -18.17418751 -17.55246836 -17.27171030 -16.87710906 -16.29957326 #>  [31] -16.25828379 -15.09391041 -15.07721893 -14.64597910 -14.35400726 #>  [36] -13.77595469 -13.47938364 -13.48920216 -13.19878061 -13.00065317 #>  [41] -12.62703257 -12.46197804 -11.56627044 -10.89587208 -10.51145110 #>  [46]  -9.76198781  -9.93133148 -10.30681243 -10.71205901 -11.01452117 #>  [51] -11.03638030 -10.95173431 -11.12397186 -11.00914682  -9.49011810 #>  [56] -10.07943613 -10.05359791  -9.52019378  -9.46221282  -9.03283335 #>  [61]  -8.42444671  -7.52382985  -7.34099863  -6.91859547  -6.62993092 #>  [66]  -6.08918873  -5.74125132  -5.27456146  -4.59398284  -4.40159149 #>  [71]  -4.25126474  -4.29818694  -1.55628712  -1.12261850  -0.54999196 #>  [76]  -0.18515635   0.54141429   0.70615876   0.60265087   0.98567658 #>  [81]   1.08908112   1.71480520   1.69245515   2.03716279   1.71999868 #>  [86]   1.13011221   1.25336050   0.72445222   0.78925446   1.09528229 #>  [91]   1.32873058   1.49285493   1.91636913   2.20089956   2.41106761 #>  [96]   2.49700552   3.12678620   3.79721039   4.05644522   4.14848094 #> [101]   4.02053010   3.77057119   4.00696503   4.16212352   4.53646760 #> [106]   4.91809805   5.20027721   5.24448640   5.01406118   4.57496654 #> [111]   4.42350292   3.95880260   3.60649852   2.75523265   2.24963044 #> [116]   1.78689383   1.31769766   1.26808828   1.46394196   1.50719514 #> [121]   1.68258495   1.94853771   1.86371084   1.89952261   1.81766714 #> [126]   2.02199575   2.22079499   2.51036388   2.42150625   2.52374807 #> [131]   2.31184886   2.10555655   2.37670279   2.33489655   2.05338919 #> [136]   2.12485769   2.50470531   3.24109447   4.15623241   4.20349051 #> [141]   3.65039765   1.90156383   1.73648347   1.04618968   0.22298412 #> [146]  -0.07844451  -0.23548919  -1.23780527  -0.58161793  -0.94102752 #> [151]  -1.55173960  -2.13775034  -2.69130828  -2.38311004  -2.91201832 #> [156]  -2.87305429  -3.70065236  -4.82094573  -5.10940358  -5.14950449 #> [161]  -5.46493743  -6.73819305  -7.34322072  -8.99640146  -9.64928151 #> [166] -11.04072112 -12.17119476 -13.03811858 -13.05765228 -13.79336964 #> [171] -15.66705372 -17.20840667 -17.86774627 -18.26229583 -19.59911346 #> [176] -20.90451181 -21.93731699 -22.37067555 -22.97007049 -22.96769337 #> [181] -23.35195932 -23.79684173 -24.08896860 -24.88519907 -25.87702483 #> [186] -26.62369761 -27.17591196 -28.18613454 -28.67411509 -29.22446909 #> [191] -30.98446502 -31.77769826 -32.24536997 -33.19657806 -33.76837778 #> [196] -33.20200408 -32.72766611 -32.04724253 -31.49451141 -30.85387868 #> [201] -30.88307586 -30.10968637 -30.21629485 #>  #> $Brazil$isHole #> [1] FALSE #>  #>  #> $Australia1 #> $Australia1$x #>   [1] 143.5618 143.9221 144.5637 144.8949 145.3747 145.2720 145.4853 145.6370 #>   [9] 145.8889 146.1603 146.0637 146.3875 147.4711 148.1776 148.8484 148.7175 #>  [17] 149.2894 149.6783 150.0774 150.4829 150.7273 150.8996 151.6092 152.0735 #>  [25] 152.8552 153.1362 153.1619 153.0929 153.5695 153.5121 153.3391 153.0692 #>  [33] 153.0896 152.8916 152.4500 151.7091 151.3440 151.0106 150.7141 150.3282 #>  [41] 150.0752 149.9461 149.9973 149.4239 148.3046 147.3817 146.9221 146.3179 #>  [49] 145.4897 144.8770 145.0322 144.4857 143.6100 142.7454 142.1783 141.6066 #>  [57] 140.6386 139.9922 139.8066 139.5741 139.0828 138.1207 138.4495 138.2076 #>  [65] 137.7192 136.8294 137.3524 137.5039 137.8901 137.8103 136.9968 136.3721 #>  [73] 135.9890 135.2082 135.2392 134.6134 134.0859 134.2739 132.9908 132.2881 #>  [81] 131.3263 129.5358 128.2409 127.1029 126.1487 125.0886 124.2216 124.0289 #>  [89] 123.6597 122.8110 122.1831 121.2992 120.5803 119.8937 119.2989 119.0073 #>  [97] 118.5057 118.0250 117.2955 116.6251 115.5643 115.0268 115.0486 115.5451 #> [105] 115.7147 115.6794 115.8016 115.6896 115.1609 114.9970 115.0400 114.6420 #> [113] 114.6165 114.1736 114.0489 113.4775 113.3390 113.7784 113.4410 113.9369 #> [121] 114.2329 114.2162 113.7213 113.6253 113.3935 113.5020 113.7070 113.8434 #> [129] 113.7366 114.1498 114.2253 114.6478 115.4602 115.9474 116.7116 117.1663 #> [137] 117.4415 118.2296 118.8361 118.9878 119.2525 119.8052 120.8562 121.3999 #> [145] 121.6551 122.2417 122.2866 122.3128 123.0126 123.4338 123.8593 123.5032 #> [153] 123.8171 124.2583 124.3797 124.9262 125.1673 125.6701 125.6858 126.1251 #> [161] 126.1428 126.5826 127.0659 127.8046 128.3597 128.9855 129.6215 129.4096 #> [169] 129.8886 130.3395 130.1835 130.6178 131.2235 131.7351 132.5753 132.5572 #> [177] 131.8247 132.3572 133.0196 133.5508 134.3931 134.6786 135.2985 135.8827 #> [185] 136.2584 136.4925 136.9516 136.6851 136.3054 135.9618 136.0776 135.7838 #> [193] 135.4287 135.5002 136.2952 137.0654 137.5805 138.3032 138.5852 139.1085 #> [201] 139.2606 140.2152 140.8755 141.0711 141.2741 141.3982 141.7022 141.5634 #> [209] 141.6355 141.5199 141.6509 141.8427 141.6870 141.9286 142.1185 142.1437 #> [217] 142.5153 142.7973 142.8668 143.1159 143.1586 143.5221 143.5972 143.5618 #>  #> $Australia1$y #>   [1] -13.76366 -14.54831 -14.17118 -14.59446 -14.98498 -15.42821 -16.28567 #>   [8] -16.78492 -16.90693 -17.76165 -18.28007 -18.95827 -19.48072 -19.95594 #>  [15] -20.39121 -20.63347 -21.26051 -22.34251 -22.12278 -22.55614 -22.40240 #>  [22] -23.46224 -24.07626 -24.45789 -25.26750 -26.07117 -26.64132 -27.26030 #>  [29] -28.11007 -28.99508 -29.45820 -30.35024 -30.92364 -31.64045 -32.55000 #>  [36] -33.04134 -33.81602 -34.31036 -35.17346 -35.67188 -36.42021 -37.10905 #>  [43] -37.42526 -37.77268 -37.80906 -38.21922 -38.60653 -39.03576 -38.59377 #>  [50] -38.41745 -37.89619 -38.08532 -38.80947 -38.53827 -38.38003 -38.30851 #>  [57] -38.01933 -37.40294 -36.64360 -36.13836 -35.73275 -35.61230 -35.12726 #>  [64] -34.38472 -35.07683 -35.26053 -34.70734 -34.13027 -33.64048 -32.90001 #>  [71] -33.75277 -34.09477 -34.89012 -34.47867 -33.94795 -33.22278 -32.84807 #>  [78] -32.61723 -32.01122 -31.98265 -31.49580 -31.59042 -31.94849 -32.28227 #>  [85] -32.21597 -32.72875 -32.95949 -33.48385 -33.89018 -33.91447 -34.00340 #>  [92] -33.82104 -33.93018 -33.97607 -34.50937 -34.46415 -34.74682 -35.06473 #>  [99] -35.02546 -35.02510 -34.38643 -34.19652 -33.62343 -33.48726 -33.25957 #> [106] -32.90037 -32.20506 -31.61244 -30.60159 -30.03072 -29.46110 -28.81023 #> [113] -28.51640 -28.11808 -27.33477 -26.54313 -26.11655 -26.54903 -25.62128 #> [120] -25.91123 -26.29845 -25.78628 -24.99894 -24.68397 -24.38476 -23.80635 #> [127] -23.56022 -23.05999 -22.47548 -21.75588 -22.51749 -21.82952 -21.49517 #> [134] -21.06869 -20.70168 -20.62360 -20.74690 -20.37421 -20.26331 -20.04420 #> [141] -19.95294 -19.97651 -19.68371 -19.23976 -18.70532 -18.19765 -17.79860 #> [148] -17.25497 -16.40520 -17.26856 -17.06904 -16.59651 -16.11132 -16.32794 #> [155] -15.56706 -15.07510 -14.68040 -14.51007 -14.23066 -14.34734 -14.09599 #> [162] -13.95279 -13.81797 -14.27691 -14.86917 -14.87599 -14.96978 -14.42067 #> [169] -13.61870 -13.35738 -13.10752 -12.53639 -12.18365 -12.30245 -12.11404 #> [176] -11.60301 -11.27378 -11.12852 -11.37641 -11.78652 -12.04237 -11.94118 #> [183] -12.24861 -11.96227 -12.04934 -11.85721 -12.35196 -12.88722 -13.29123 #> [190] -13.32451 -13.72428 -14.22399 -14.71543 -14.99774 -15.55026 -15.87076 #> [197] -16.21508 -16.80760 -16.80662 -17.06268 -17.37160 -17.71080 -17.36907 #> [204] -16.83205 -16.38887 -15.84053 -15.04492 -14.56133 -14.27039 -13.69808 #> [211] -12.94469 -12.74155 -12.40761 -11.87747 -11.32804 -11.04274 -10.66819 #> [218] -11.15735 -11.78471 -11.90563 -12.32566 -12.83436 -13.40042 -13.76366 #>  #> $Australia1$isHole #> [1] FALSE #>  #>  #> $Australia2 #> $Australia2$x #>  [1] 145.3980 146.3641 146.9086 147.6893 148.2891 148.3599 148.0173 147.9141 #>  [9] 147.5646 146.8703 146.6633 146.0484 145.4319 145.2951 144.7181 144.7438 #> [17] 145.3980 #>  #> $Australia2$y #>  [1] -40.79255 -41.13770 -41.00055 -40.80826 -40.87544 -42.06245 -42.40702 #>  [8] -43.21152 -42.93769 -43.63460 -43.58085 -43.54974 -42.69378 -42.03361 #> [15] -41.16255 -40.70398 -40.79255 #>  #> $Australia2$isHole #> [1] FALSE #>  #>  #> $Greenland #> $Greenland$x #>   [1] -46.76379 -43.40644 -39.89753 -38.62214 -35.08787 -27.10046 -20.84539 #>   [8] -22.69182 -26.51753 -31.90000 -31.39646 -27.85666 -24.84448 -22.90328 #>  [15] -22.07175 -23.16961 -20.62363 -15.76818 -12.77018 -12.20855 -16.28533 #>  [22] -16.85000 -20.04624 -17.73035 -18.90000 -19.70499 -19.67353 -18.47285 #>  [29] -20.03503 -21.67944 -19.83407 -19.59896 -20.66818 -19.37281 -21.59422 #>  [36] -20.43454 -20.76234 -22.17221 -23.56593 -22.31311 -22.29954 -24.27834 #>  [43] -24.79296 -23.44296 -22.13281 -21.75356 -23.53603 -24.30702 -25.54341 #>  [50] -25.20135 -26.36276 -23.72742 -22.34902 -25.02927 -27.74737 -30.67371 #>  [57] -31.77665 -32.81105 -34.20196 -36.35284 -37.04378 -38.37505 -39.81222 #>  [64] -40.66899 -40.68281 -41.18870 -42.81938 -42.41666 -42.86619 -43.37840 #>  [71] -44.78750 -46.26364 -48.26294 -49.23308 -49.90039 -51.63325 -52.14014 #>  [78] -52.27659 -53.66166 -53.30161 -53.96911 -52.98040 -51.47536 -51.08041 #>  [85] -50.87122 -52.01358 -52.55792 -53.45629 -54.68336 -54.75001 -54.35884 #>  [92] -53.43132 -51.39014 -53.10937 -54.00422 -55.00000 -55.83468 -54.71819 #>  [99] -55.32634 -56.12003 -57.32363 -58.59679 -58.58516 -61.26861 -63.39165 #> [106] -66.06427 -68.50438 -69.66485 -71.40257 -68.77671 -66.76397 -71.04293 #> [113] -73.29700 -73.15938 -69.37345 -65.71070 -65.32390 -68.02298 -67.15129 #> [120] -63.68925 -62.23444 -62.65116 -60.28249 -57.20744 -54.13442 -53.04328 #> [127] -50.39061 -48.00386 -46.59984 -44.52300 -46.90070 -46.76379 #>  #> $Greenland$y #>   [1] 82.62796 83.22516 83.18018 83.54905 83.64513 83.51966 82.72669 82.34165 #>   [9] 82.29765 82.20000 82.02154 82.13178 81.78697 82.09317 81.73449 81.15271 #>  [17] 81.52462 81.91245 81.71885 81.29154 80.58004 80.35000 80.17708 80.12912 #>  [25] 79.40000 78.75128 77.63859 76.98565 76.94434 76.62795 76.09808 75.24838 #>  [33] 75.15585 74.29561 74.22382 73.81713 73.46436 73.30955 73.30663 72.62928 #>  [41] 72.18409 72.59788 72.33020 72.08016 71.46898 70.66369 70.47100 70.85649 #>  [49] 71.43094 70.75226 70.22646 70.18401 70.12946 69.25880 68.47046 68.12503 #>  [57] 68.12078 67.73547 66.67974 65.97890 65.93768 65.69213 65.45848 64.83997 #>  [65] 64.13902 63.48246 62.68233 61.90093 61.07404 60.09772 60.03676 60.85328 #>  [73] 60.85843 61.40681 62.38336 63.62691 64.27842 65.17670 66.09957 66.83650 #>  [81] 67.18899 68.35759 68.72958 69.14781 69.92910 69.57492 69.42616 69.28363 #>  [89] 69.61003 70.28932 70.82132 70.83576 70.56978 71.20485 71.54719 71.40654 #>  [97] 71.65444 72.58625 72.95861 73.64977 74.71026 75.09861 75.51727 76.10238 #> [105] 76.17520 76.13486 76.06141 76.37975 77.00857 77.32312 77.37595 77.63595 #> [113] 78.04419 78.43271 78.91388 79.39436 79.75814 80.11721 80.51582 81.21396 #> [121] 81.32110 81.77042 82.03363 82.19074 82.19962 81.88833 82.43883 82.06481 #> [129] 81.98595 81.66070 82.19979 82.62796 #>  #> $Greenland$isHole #> [1] FALSE #>  #>  #> $Kazakhstan #> $Kazakhstan$x #>   [1] 70.96231 70.38896 69.07003 68.63248 68.25990 67.98586 66.71405 66.51065 #>   [9] 66.02339 66.09801 64.90082 63.18579 62.01330 61.05832 60.23997 58.68999 #>  [17] 58.50313 55.92892 55.96819 55.45525 54.75535 54.07942 52.94429 52.50246 #>  [25] 52.44634 52.69211 52.50143 51.34243 50.89129 50.33913 50.30564 51.27850 #>  [33] 51.31690 52.16739 53.04088 53.22087 53.04274 52.04202 51.19195 50.03408 #>  [41] 49.10116 48.59324 48.69473 48.05725 47.31523 46.46645 47.04367 46.75160 #>  [49] 47.54948 48.57784 48.70238 50.76665 52.32872 54.53288 55.71694 56.77796 #>  [57] 58.36329 59.64228 59.93281 61.33742 61.58800 59.96753 60.92727 60.73999 #>  [65] 61.69999 60.97807 61.43659 65.17853 65.66688 68.16910 69.06817 70.86527 #>  [73] 71.18013 72.22415 73.50852 73.42568 74.38485 76.89110 76.52518 77.80092 #>  [81] 80.03556 80.56845 81.94599 83.38300 83.93511 84.41638 85.11556 85.54127 #>  [89] 86.82936 87.35997 86.59878 85.76823 85.72048 85.16429 83.18048 82.45893 #>  [97] 81.94707 79.96611 80.86621 80.18015 80.25999 79.64365 79.14218 77.65839 #> [105] 76.00035 75.63696 74.21287 73.64530 73.48976 71.84464 71.18628 70.96231 #>  #> $Kazakhstan$y #>   [1] 42.26615 42.08131 41.38424 40.66868 40.66232 41.13599 41.16844 41.98764 #>   [9] 41.99465 42.99766 43.72808 43.65007 43.50448 44.40582 44.78404 45.50001 #>  [17] 45.58680 44.99586 41.30864 41.25986 42.04397 42.32411 42.11603 41.78332 #>  [25] 42.02715 42.44390 42.79230 43.13297 44.03103 44.28402 44.60984 44.51485 #>  [33] 45.24600 45.40839 45.25905 46.23465 46.85301 46.80464 47.04870 46.60899 #>  [41] 46.39933 46.56103 47.07563 47.74375 47.71585 48.39415 49.15204 49.35601 #>  [49] 50.45470 49.87476 50.60513 51.69276 51.71865 51.02624 50.62172 51.04355 #>  [57] 51.06365 50.54544 50.84219 50.79907 51.27266 51.96042 52.44755 52.71999 #>  [65] 52.98000 53.66499 54.00626 54.35423 54.60127 54.97039 55.38525 55.16973 #>  [73] 54.13329 54.37666 54.03562 53.48981 53.54686 54.49052 54.17700 53.40441 #>  [81] 50.86475 51.38834 50.81220 51.06918 50.88925 50.31140 50.11730 49.69286 #>  [89] 49.82667 49.21498 48.54918 48.45575 47.45297 47.00096 47.33003 45.53965 #>  [97] 45.31703 44.91752 43.18036 42.92007 42.35000 42.49668 42.85609 42.96069 #> [105] 42.98802 42.87790 43.29834 43.09127 42.50089 42.84540 42.70429 42.26615 #>  #> $Kazakhstan$isHole #> [1] FALSE #>  #>  #> $Argentina1 #> $Argentina1$x #>   [1] -64.96489 -64.37702 -63.98684 -62.84647 -62.68506 -60.84656 -60.02897 #>   [8] -58.80713 -57.77722 -57.63366 -58.61817 -57.60976 -56.48670 -55.69585 #>  [15] -54.78879 -54.62529 -54.13005 -53.62835 -53.64874 -54.49073 -55.16229 #>  [22] -56.29090 -57.62513 -57.87494 -58.14244 -58.13265 -58.34961 -58.42707 #>  [29] -58.49544 -57.22583 -57.36236 -56.73749 -56.78829 -57.74916 -59.23186 #>  [36] -61.23745 -62.33596 -62.12576 -62.33053 -62.14599 -62.74580 -63.77049 #>  [43] -64.73209 -65.11804 -64.97856 -64.30341 -63.75595 -63.45806 -64.37880 #>  [50] -65.18180 -65.32882 -65.56527 -66.50997 -67.29379 -67.58055 -66.59707 #>  [57] -65.64103 -65.98509 -67.16618 -67.81609 -68.72875 -69.13854 -68.81556 #>  [64] -68.14999 -68.57155 -69.49836 -71.91480 -72.32940 -72.30997 -72.97575 #>  [71] -73.32805 -73.41544 -72.64825 -72.33116 -72.44736 -71.91726 -71.55201 #>  [78] -71.65932 -71.22278 -71.32980 -71.79362 -71.46406 -71.91542 -72.14890 #>  [85] -71.74680 -71.91573 -71.68076 -71.41352 -70.81466 -71.11863 -71.12188 #>  [92] -70.36477 -70.38805 -69.81731 -69.81478 -70.07440 -70.53507 -69.91901 #>  [99] -70.01355 -69.65613 -69.00123 -68.29554 -68.59480 -68.38600 -68.41765 #> [106] -67.32844 -66.98523 -67.10667 -66.27334 -64.96489 #>  #> $Argentina1$y #>   [1] -22.07586 -22.79809 -21.99364 -22.03499 -22.24903 -23.88071 -24.03280 #>   [8] -24.77146 -25.16234 -25.60366 -27.12372 -27.39590 -27.54850 -27.38784 #>  [15] -26.62179 -25.73926 -25.54764 -26.12487 -26.92347 -27.47476 -27.88192 #>  [22] -28.85276 -30.21629 -31.01656 -32.04450 -33.04057 -33.26319 -33.90945 #>  [29] -34.43149 -35.28803 -35.97739 -36.41313 -36.90157 -38.18387 -38.72022 #>  [36] -38.92842 -38.82771 -39.42410 -40.17259 -40.67690 -41.02876 -41.16679 #>  [43] -40.80268 -41.06431 -42.05800 -42.35902 -42.04369 -42.56314 -42.87356 #>  [50] -43.49538 -44.50137 -45.03679 -45.03963 -45.55190 -46.30177 -47.03392 #>  [57] -47.23613 -48.13329 -48.69734 -49.86967 -50.26422 -50.73251 -51.77110 #>  [64] -52.34998 -52.29944 -52.14276 -52.00902 -51.42596 -50.67701 -50.74145 #>  [71] -50.37879 -49.31844 -48.87862 -48.24424 -47.73853 -46.88484 -45.56073 #>  [78] -44.97369 -44.78424 -44.40752 -44.20717 -43.78761 -43.40856 -42.25489 #>  [85] -42.05139 -40.83234 -39.80816 -38.91602 -38.55300 -37.57683 -36.65812 #>  [92] -36.00509 -35.16969 -34.19357 -33.27389 -33.09121 -31.36501 -30.33634 #>  [99] -29.36792 -28.45914 -27.52121 -26.89934 -26.50691 -26.18502 -24.51855 #> [106] -24.02530 -22.98635 -22.73592 -21.83231 -22.07586 #>  #> $Argentina1$isHole #> [1] FALSE #>  #>  #> $Argentina2 #> $Argentina2$x #>  [1] -65.50000 -66.45000 -66.95992 -67.56244 -68.63335 -68.63401 -68.25000 #>  [8] -67.75000 -66.45000 -65.05000 -65.50000 #>  #> $Argentina2$y #>  [1] -55.20000 -55.25000 -54.89681 -54.87001 -54.86950 -52.63637 -53.10000 #>  [8] -53.85000 -54.45000 -54.70000 -55.20000 #>  #> $Argentina2$isHole #> [1] FALSE #>  #>  #> $India #> $India$x #>   [1] 77.83745 78.91227 78.81109 79.20889 79.17613 78.45845 78.73889 79.72137 #>   [9] 81.11126 80.47672 80.08842 81.05720 81.99999 83.30425 84.67502 85.25178 #>  [17] 86.02439 87.22747 88.06024 88.17480 88.04313 88.12044 88.73033 88.81425 #>  [25] 88.83564 89.74453 90.37327 91.21751 92.03348 92.10371 91.69666 92.50312 #>  [33] 93.41335 94.56599 95.40480 96.11768 96.58659 96.24883 97.32711 97.40256 #>  [41] 97.05199 97.13400 96.41937 95.12477 95.15515 94.60325 94.55266 94.10674 #>  [49] 93.32519 93.28633 93.06029 93.16613 92.67272 92.14603 91.86993 91.70648 #>  [57] 91.15896 91.46773 91.91509 92.37620 91.79960 90.87221 89.92069 89.83248 #>  [65] 89.35509 88.56305 88.20979 88.93155 88.30637 88.08442 88.69994 88.52977 #>  [73] 88.87631 89.03196 88.88877 88.20850 86.97570 87.03317 86.49935 85.06027 #>  [81] 83.94101 83.18922 82.19279 82.19124 81.69272 80.79200 80.32490 80.02507 #>  [89] 80.23327 80.28629 79.86255 79.85800 79.34051 78.88535 79.18972 78.27794 #>  [97] 77.94117 77.53990 76.59298 76.13006 75.74647 75.39610 74.86482 74.61672 #> [105] 74.44386 73.53420 73.11991 72.82091 72.82448 72.63053 71.17527 70.47046 #> [113] 69.16413 69.64493 69.34960 68.17665 68.84260 71.04324 70.84470 70.28287 #> [121] 70.16893 69.51439 70.61650 71.77767 72.82375 73.45064 74.42138 74.40593 #> [129] 75.25864 74.45156 74.10429 73.74995 74.24020 75.75706 76.87172 77.83745 #>  #> $India$y #>   [1] 35.494010 34.321936 33.506198 32.994395 32.483780 32.618164 31.515906 #>   [8] 30.882715 30.183481 29.729865 28.794470 28.416095 27.925479 27.364506 #>  [15] 27.234901 26.726198 26.630985 26.397898 26.414615 26.810405 27.445819 #>  [22] 27.876542 28.086865 27.299316 27.098966 26.719403 26.875724 26.808648 #>  [29] 26.838310 27.452614 27.771742 27.896876 28.640629 29.277438 29.031717 #>  [36] 29.452802 28.830980 28.411031 28.261583 27.882536 27.699059 27.083774 #>  [43] 27.264589 26.573572 26.001307 25.162495 24.675238 23.850741 24.078556 #>  [50] 23.043658 22.703111 22.278460 22.041239 23.627499 23.624346 22.985264 #>  [57] 23.503527 24.072639 24.130414 24.976693 25.147432 25.132601 25.269750 #>  [64] 25.965082 26.014407 26.446526 25.768066 25.238692 24.866079 24.501657 #>  [71] 24.233715 23.631142 22.879146 22.055708 21.690588 21.703172 21.495562 #>  [78] 20.743308 20.151638 19.478579 18.302010 17.671221 17.016636 16.556664 #>  [85] 16.310219 15.951972 15.899185 15.136415 13.835771 13.006261 12.056215 #>  [92] 10.357275 10.308854  9.546136  9.216544  8.933047  8.252959  7.965535 #>  [99]  8.899276 10.299630 11.308251 11.781245 12.741936 13.992583 14.617222 #> [106] 15.990652 17.928570 19.208234 20.419503 21.356009 20.757441 20.877331 #> [113] 22.089298 22.450775 22.843180 23.691965 24.359134 24.356524 25.215102 #> [120] 25.722229 26.491872 26.940966 27.989196 27.913180 28.961592 29.976413 #> [127] 30.979815 31.692639 32.271105 32.764900 33.441473 34.317699 34.748887 #> [134] 34.504923 34.653544 35.494010 #>  #> $India$isHole #> [1] FALSE #>  #>  #> $Algeria #> $Algeria$x #>  [1] 11.9995056  8.5728931  5.6775660  4.2674195  3.1581332  3.1466610 #>  [7]  2.6835885  2.0609908  1.8232276 -1.5500549 -4.9233374 -8.6843998 #> [13] -8.6651245 -8.6655896 -8.6741162 -7.0592277 -6.0606323 -5.2421293 #> [19] -4.8596462 -3.6904410 -3.6474979 -3.0689803 -2.6166048 -1.3078991 #> [25] -1.1245512 -1.3880493 -1.7334546 -1.7929858 -2.1699137 -1.2086029 #> [31] -0.1274544  0.5038766  1.4669186  3.1616988  4.8157581  5.3201201 #> [37]  6.2618197  7.3303850  7.7370785  8.4209644  8.2178243  8.3763676 #> [43]  8.1409815  7.5244816  7.6126416  8.4304729  8.4391028  9.0556027 #> [49]  9.4821399  9.8056344  9.8599980  9.6838847  9.7561284  9.6290560 #> [55]  9.7162858  9.3194108  9.9106926  9.9482613 10.3038469 10.7713636 #> [61] 11.5606694 11.9995056 #>  #> $Algeria$y #>  [1] 23.47167 21.56566 19.60121 19.15527 19.05736 19.69358 19.85623 20.14223 #>  [9] 20.61081 22.79267 24.97457 27.39574 27.58948 27.65643 28.84129 29.57923 #> [17] 29.73170 30.00044 30.50119 30.89695 31.63729 31.72450 32.09435 32.26289 #> [25] 32.65152 32.86402 33.91971 34.52792 35.16840 35.71485 35.88866 36.30127 #> [33] 36.60565 36.78390 36.86504 36.71652 37.11066 37.11838 36.88571 36.94643 #> [41] 36.43318 35.47988 34.65515 34.09738 33.34411 32.74834 32.50628 32.10269 #> [49] 30.30756 29.42464 28.95999 28.14417 27.68826 27.14095 26.51221 26.09432 #> [57] 25.36545 24.93695 24.37931 24.56253 24.09791 23.47167 #>  #> $Algeria$isHole #> [1] FALSE #>  #>  #> $`Congo (Kinshasa)` #> $`Congo (Kinshasa)`$x #>   [1] 30.83386 30.77335 31.17415 30.85267 30.46851 30.08615 29.87578 29.81950 #>   [9] 29.58784 29.57947 29.29189 29.25483 29.11748 29.02493 29.27638 29.34000 #>  [17] 29.51999 29.41999 29.62003 30.20000 30.74002 30.34609 29.00291 28.73487 #>  [25] 28.44987 28.67368 28.49607 28.37225 28.64242 29.34155 29.61600 29.69961 #>  [33] 28.93429 28.52356 28.15511 27.38880 27.16442 26.55309 25.75231 25.41812 #>  [41] 24.78317 24.31452 24.25716 23.91222 23.45679 22.83735 22.40280 22.15527 #>  [49] 22.20875 21.87518 21.80180 21.94913 21.74646 21.72811 20.51475 20.60182 #>  [57] 20.09162 20.03772 19.41750 19.16661 19.01675 18.46418 18.13422 17.47297 #>  [65] 17.09000 16.86019 16.57318 16.32653 13.37560 13.02487 12.73517 12.32243 #>  [73] 12.18234 12.43669 12.46800 12.63161 12.99552 13.25824 13.60023 14.14496 #>  [81] 14.20903 14.58260 15.17099 15.75354 16.00629 15.97280 16.40709 16.86531 #>  [89] 17.52372 17.63864 17.66355 17.82654 17.77419 17.89884 18.09428 18.39379 #>  [97] 18.45307 18.54298 18.93231 19.46778 20.29068 20.92759 21.65912 22.40512 #> [105] 22.70412 22.84148 23.29721 24.41053 24.80503 25.12883 25.27880 25.65046 #> [113] 26.40276 27.04407 27.37423 27.97998 28.42899 28.69668 29.15908 29.71600 #> [121] 29.95350 30.83386 #>  #> $`Congo (Kinshasa)`$y #>   [1]   3.5091660   2.3398833   2.2044652   1.8493965   1.5838054   1.0623127 #>   [7]   0.5973799  -0.2053102  -0.5874057  -1.3413132  -1.6200558  -2.2151100 #>  [13]  -2.2922112  -2.8392579  -3.2939072  -4.4999834  -5.4199789  -5.9399989 #>  [19]  -6.5200152  -7.0799810  -8.3400074  -8.2382565  -8.4070318  -8.5265593 #>  [25]  -9.1649183  -9.6059250 -10.7898837 -11.7936467 -11.9715687 -12.3607439 #>  [31] -12.1788945 -13.2572267 -13.2489584 -12.6986044 -12.2724806 -12.1327475 #>  [37] -11.6087485 -11.9244398 -11.7849651 -11.3309360 -11.2386935 -11.2628264 #>  [43] -10.9519927 -10.9268263 -10.8678635 -11.0176218 -10.9930755 -11.0848011 #>  [49]  -9.8947962  -9.5237078  -8.9087066  -8.3059010  -7.9200847  -7.2908725 #>  [55]  -7.2996058  -6.9393177  -6.9430901  -7.1163612  -7.1554286  -7.7381837 #>  [61]  -7.9882459  -7.8470143  -7.9876775  -8.0685511  -7.5456890  -7.2222979 #>  [67]  -6.6226445  -5.8774704  -5.8642412  -5.9843889  -5.9656821  -6.1000925 #>  [73]  -5.7899305  -5.6843039  -5.2483615  -4.9912713  -4.7811032  -4.8829575 #>  [79]  -4.5001384  -4.5100086  -4.7930921  -4.9702389  -4.3435072  -3.8551649 #>  [85]  -3.5351327  -2.7123923  -1.7409270  -1.2258163  -0.7438303  -0.4248316 #>  [91]  -0.0580840   0.2889232   0.8556587   1.7418320   2.3657215   2.9004434 #>  [97]   3.5043859   4.2017852   4.7095061   5.0315278   4.6916778   4.3227855 #> [103]   4.2243419   4.0291601   4.6330508   4.7101262   4.6096931   5.1087841 #> [109]   4.8972466   4.9272448   5.1704082   5.2560878   5.1508745   5.1278527 #> [115]   5.2339444   4.4084134   4.2871546   4.4550772   4.3892673   4.6008048 #> [121]   4.1736990   3.5091660 #>  #> $`Congo (Kinshasa)`$isHole #> [1] FALSE #>  #>  #> $Mongolia #> $Mongolia$x #>  [1]  87.75126  88.80557  90.71367  92.23471  93.10422  94.14757  94.81595 #>  [8]  95.81403  97.25973  98.23176  97.82574  98.86149  99.98173 100.88948 #> [15] 102.06522 102.25591 103.67655 104.62155 105.88659 106.88880 107.86818 #> [22] 108.47517 109.40245 110.66201 111.58123 112.89774 114.36246 114.96211 #> [29] 115.48570 116.67880 116.19180 115.48528 115.74284 116.30895 117.29551 #> [36] 118.06414 118.86657 119.77282 119.66327 118.87433 117.42170 116.71787 #> [43] 115.98510 114.46033 113.46391 112.43606 111.87331 111.34838 111.66774 #> [50] 111.82959 111.12968 110.41210 109.24360 107.74477 106.12932 104.96499 #> [57] 104.52228 103.31228 101.83304 100.84587  99.51582  97.45176  96.34940 #> [64]  95.76245  95.30688  94.68893  93.48073  92.13389  90.94554  90.58577 #> [71]  90.97081  90.28083  88.85430  88.01383  87.75126 #>  #> $Mongolia$y #>  [1] 49.29720 49.47052 50.33181 50.80217 50.49529 50.48054 50.01343 49.97747 #>  [9] 49.72606 50.42240 51.01100 52.04737 51.63401 51.51686 51.25992 50.51056 #> [17] 50.08997 50.27533 50.40602 50.27430 49.79371 49.28255 49.29296 49.13013 #> [25] 49.37797 49.54357 50.24830 50.14025 49.80518 49.88853 49.13460 48.13538 #> [33] 47.72654 47.85341 47.69771 48.06673 47.74706 47.04806 46.69268 46.80541 #> [41] 46.67273 46.38820 45.72724 45.33982 44.80889 45.01165 45.10208 44.45744 #> [49] 44.07318 43.74312 43.40683 42.87123 42.51945 42.48152 42.13433 41.59741 #> [57] 41.90835 41.90747 42.51487 42.66380 42.52469 42.74889 42.72564 43.31945 #> [65] 44.24133 44.35233 44.97547 45.11508 45.28607 45.71972 46.88815 47.69355 #> [73] 48.06908 48.59946 49.29720 #>  #> $Mongolia$isHole #> [1] FALSE #>  #>  #> $Mexico #> $Mexico$x #>   [1]  -97.14001  -97.52807  -97.70295  -97.77604  -97.87237  -97.69904 #>   [7]  -97.38896  -97.18933  -96.52558  -96.29213  -95.90088  -94.83906 #>  [13]  -94.42573  -93.54865  -92.78611  -92.03735  -91.40790  -90.77187 #>  [19]  -90.53359  -90.45148  -90.27862  -89.60132  -88.54387  -87.65842 #>  [25]  -87.05189  -86.81198  -86.84591  -87.38329  -87.62105  -87.43675 #>  [31]  -87.58656  -87.83719  -88.09066  -88.30003  -88.49012  -88.84834 #>  [37]  -89.02986  -89.15091  -89.14308  -90.06793  -91.00152  -91.00227 #>  [43]  -91.45392  -91.08167  -90.71182  -90.60085  -90.43887  -90.46447 #>  [49]  -91.74796  -92.22925  -92.08722  -92.20323  -92.22775  -93.35946 #>  [55]  -93.87517  -94.69166  -95.25023  -96.05338  -96.55743  -97.26359 #>  [61]  -98.01303  -98.94768  -99.69740 -100.82950 -101.66609 -101.91853 #>  [67] -102.47813 -103.50099 -103.91753 -104.99201 -105.49304 -105.73140 #>  [73] -105.39777 -105.50066 -105.27075 -105.26582 -105.60316 -105.69341 #>  [79] -106.02872 -106.90998 -107.91545 -108.40190 -109.26020 -109.44409 #>  [85] -109.29164 -109.80146 -110.39173 -110.64102 -111.17892 -111.75961 #>  [91] -112.22823 -112.27182 -112.80959 -113.16381 -113.14867 -113.87188 #>  [97] -114.20574 -114.77645 -114.93670 -114.77123 -114.67390 -114.33097 #> [103] -113.58888 -113.42405 -113.27197 -113.14004 -112.96230 -112.76159 #> [109] -112.45791 -112.24495 -111.61649 -111.28467 -110.98782 -110.71001 #> [115] -110.65505 -110.17286 -109.77185 -109.40910 -109.43339 -109.85422 #> [121] -110.03139 -110.29507 -110.94950 -111.67057 -112.18204 -112.14899 #> [127] -112.30071 -112.77730 -113.46467 -113.59673 -113.84894 -114.46575 #> [133] -115.05514 -114.98225 -114.57037 -114.19933 -114.16202 -114.93184 #> [139] -115.51865 -115.88737 -116.25835 -116.72153 -117.12776 -115.99135 #> [145] -114.72139 -114.81500 -113.30498 -111.02361 -109.03500 -108.24194 #> [151] -108.24000 -106.50759 -106.14290 -105.63159 -105.03737 -104.70575 #> [157] -104.45697 -103.94000 -103.11000 -102.48000 -101.66240 -100.95760 #> [163] -100.45584 -100.11000  -99.52000  -99.30000  -99.02000  -98.24000 #> [169]  -97.53000  -97.14001 #>  #> $Mexico$y #>   [1] 25.87000 24.99214 24.27234 22.93258 22.44421 21.89869 21.41102 20.63543 #>   [9] 19.89093 19.32037 18.82802 18.56272 18.14437 18.42384 18.52484 18.70457 #>  [17] 18.87608 19.28412 19.86742 20.70752 20.99986 21.26173 21.49368 21.45885 #>  [25] 21.54354 21.33151 20.84986 20.25540 19.64655 19.47240 19.04013 18.25982 #>  [33] 18.51665 18.49998 18.48683 17.88320 18.00151 17.95547 17.80832 17.81933 #>  [41] 17.81759 17.25466 17.25218 16.91848 16.68748 16.47078 16.41011 16.06956 #>  [49] 16.06656 15.25145 15.06458 14.83010 14.53883 15.61543 15.94016 16.20098 #>  [57] 16.12832 15.75209 15.65352 15.91706 16.10731 16.56604 16.70616 17.17107 #>  [65] 17.64903 17.91609 17.97575 18.29229 18.74857 19.31613 19.94677 20.43410 #>  [73] 20.53172 20.81690 21.07628 21.42210 21.87115 22.26908 22.77375 23.76777 #>  [81] 24.54892 25.17231 25.58061 25.82488 26.44293 26.67618 27.16211 27.85988 #>  [89] 27.94124 28.46795 28.95441 29.26684 30.02111 30.78688 31.17097 31.56761 #>  [97] 31.52405 31.79953 31.39348 30.91362 30.16268 29.75043 29.06161 28.82617 #> [105] 28.75478 28.41129 28.42519 27.78022 27.52581 27.17173 26.66282 25.73259 #> [113] 25.29461 24.82600 24.29859 24.26555 23.81118 23.36467 23.18559 22.81827 #> [121] 22.82308 23.43097 24.00096 24.48442 24.73841 25.47013 26.01200 26.32196 #> [129] 26.76819 26.63946 26.90006 27.14209 27.72273 27.79820 27.74149 28.11500 #> [137] 28.56611 29.27948 29.55636 30.18079 30.83646 31.63574 32.53534 32.61239 #> [145] 32.72083 32.52528 32.03914 31.33472 31.34194 31.34222 31.75485 31.75452 #> [153] 31.39995 31.08383 30.64402 30.12173 29.57196 29.27000 28.97000 29.76000 #> [161] 29.77930 29.38071 28.69612 28.11000 27.54000 26.84000 26.37000 26.06000 #> [169] 25.84000 25.87000 #>  #> $Mexico$isHole #> [1] FALSE #>  #>  #> $`Saudi Arabia` #> $`Saudi Arabia`$x #>  [1] 42.77933 42.64957 42.34799 42.27089 41.75438 41.22139 40.93934 40.24765 #>  [9] 39.80168 39.13940 39.02370 39.06633 38.49277 38.02386 37.48363 37.15482 #> [17] 37.20949 36.93163 36.63960 36.24914 35.64018 35.13019 34.63234 34.78778 #> [25] 34.83222 34.95604 36.06894 36.50121 36.74053 37.50358 37.66812 37.99885 #> [33] 37.00217 39.00489 39.19547 40.39999 41.88998 44.70950 46.56871 47.45982 #> [41] 47.70885 48.41609 48.80759 49.29955 49.47091 50.15242 50.21294 50.11330 #> [49] 50.23986 50.52739 50.66056 50.81011 51.11242 51.38961 51.57952 51.61771 #> [57] 52.00073 55.00680 55.20834 55.66666 54.99998 52.00001 49.11667 48.18334 #> [65] 47.46669 47.00000 46.74999 46.36666 45.40000 45.21665 44.06261 43.79152 #> [73] 43.38079 43.11580 43.21838 42.77933 #>  #> $`Saudi Arabia`$y #>  [1] 16.34789 16.77464 17.07581 17.47472 17.83305 18.67160 19.48649 20.17463 #>  [9] 20.33886 21.29190 21.98688 22.57966 23.68845 24.07869 24.28549 24.85848 #> [17] 25.08454 25.60296 25.82623 26.57014 27.37652 28.06335 28.05855 28.60743 #> [25] 28.95748 29.35655 29.19749 29.50525 29.86528 30.00378 30.33867 30.50850 #> [33] 31.50841 32.01022 32.16101 31.88999 31.19001 29.17889 29.09903 29.00252 #> [41] 28.52606 28.55200 27.68963 27.46122 27.11000 26.68966 26.27703 25.94397 #> [49] 25.60805 25.32781 24.99990 24.75474 24.55633 24.62739 24.24550 24.01422 #> [57] 23.00115 22.49695 22.70833 22.00000 19.99999 19.00000 18.61667 18.16667 #> [65] 17.11668 16.95000 17.28334 17.23332 17.33334 17.43333 17.41036 17.31998 #> [73] 17.57999 17.08844 16.66689 16.34789 #>  #> $`Saudi Arabia`$isHole #> [1] FALSE #>  #>  #> $Sudan #> $Sudan$x #>  [1] 33.96339 33.82496 33.84213 33.72196 33.20694 33.08677 33.20694 32.74342 #>  [9] 32.67475 32.07389 32.31423 32.40007 31.85072 31.35286 30.83784 29.99664 #> [17] 29.61896 29.51595 29.00093 28.96660 27.97089 27.83355 27.11252 26.75201 #> [25] 26.47733 25.96231 25.79063 25.06960 24.79493 24.53742 24.19407 23.88698 #> [33] 23.80581 23.45901 23.39478 23.55725 23.55430 22.97754 22.86417 22.87622 #> [41] 22.50869 22.49762 22.28801 21.93681 22.03759 22.29658 22.18329 22.51202 #> [49] 22.30351 22.56795 23.02459 23.88689 23.83766 23.85000 25.00000 25.00000 #> [57] 29.02000 32.90000 36.86623 37.18872 36.96941 37.11470 37.48179 37.86276 #> [65] 38.41009 37.90400 37.16747 36.85253 36.75389 36.32322 36.42951 36.27022 #> [73] 35.86363 35.26049 34.83163 34.73115 34.25745 33.96162 33.96339 #>  #> $Sudan$y #>  [1]  9.464285  9.484061  9.981915 10.325262 10.720112 11.441141 12.179338 #>  [8] 12.248008 12.024832 11.973330 11.681484 11.080626 10.531271  9.810241 #> [15]  9.707237 10.290927 10.084919  9.793074  9.604232  9.398224  9.398224 #> [22]  9.604232  9.638567  9.466893  9.552730 10.136421 10.411099 10.273760 #> [29]  9.810241  8.917538  8.728696  8.619730  8.666319  8.954286  9.265068 #> [36]  9.681218 10.089255 10.714463 11.142395 11.384610 11.679360 12.260240 #> [43] 12.646050 12.588180 12.955460 13.372320 13.786480 14.093180 14.326820 #> [50] 14.944290 15.680720 15.610840 19.580470 20.000000 20.003040 22.000000 #> [57] 22.000000 22.000000 22.000000 21.018850 20.837440 19.807960 18.614090 #> [64] 18.367860 17.998307 17.427540 17.263140 16.956550 16.291860 14.822490 #> [71] 14.422110 13.563330 12.578280 12.082860 11.318960 10.910170 10.630090 #> [78]  9.583580  9.464285 #>  #> $Sudan$isHole #> [1] FALSE #>  #>  #> $Iran #> $Iran$x #>  [1] 53.92160 54.80030 55.51158 56.18037 56.61937 57.33043 58.43615 59.23476 #>  [9] 60.37764 61.12307 61.21082 60.80319 60.52843 60.96370 60.53608 60.86365 #> [17] 60.94194 61.69931 61.78122 60.87425 61.36931 61.77187 62.72783 62.75543 #> [25] 63.23390 63.31663 61.87419 61.49736 59.61613 58.52576 57.39725 56.97077 #> [33] 56.49214 55.72371 54.71509 53.49310 52.48360 51.52076 50.85295 50.11501 #> [41] 49.57685 48.94133 48.56797 48.01457 48.00470 47.68529 47.84920 47.33466 #> [49] 46.10936 45.41669 45.64846 46.15179 46.07634 45.42062 44.77267 44.22576 #> [57] 44.42140 44.10923 44.79399 44.95269 45.45772 46.14362 46.50572 47.68508 #> [65] 48.06010 48.35553 48.01074 48.63438 48.88325 49.19961 50.14777 50.84235 #> [73] 52.26402 53.82579 53.92160 #>  #> $Iran$y #>  [1] 37.19892 37.39242 37.96412 37.93513 38.12139 38.02923 37.52231 37.41299 #>  [9] 36.52738 36.49160 35.65007 34.40410 33.67645 33.52883 32.98127 32.18292 #> [17] 31.54807 31.37951 30.73585 29.82924 29.30328 28.69933 28.25964 27.37892 #> [25] 27.21705 26.75653 26.23997 25.07824 25.38016 25.60996 25.73990 26.96611 #> [33] 27.14330 26.96463 26.48066 26.81237 27.58085 27.86569 28.81452 30.14777 #> [41] 29.98572 30.31709 29.92678 30.45246 30.98514 30.98485 31.70918 32.46916 #> [49] 33.01729 33.96780 34.74814 35.09326 35.67738 35.97755 37.17045 37.97158 #> [57] 38.28128 39.42814 39.71300 39.33576 38.87414 38.74120 38.77061 39.50836 #> [65] 39.58224 39.28876 38.79401 38.27038 38.32025 37.58287 37.37457 36.87281 #> [73] 36.70042 36.96503 37.19892 #>  #> $Iran$isHole #> [1] FALSE #>  #>  #> $Libya #> $Libya$x #>  [1] 14.851300 14.143871 13.581425 11.999506 11.560669 10.771364 10.303847 #>  [8]  9.948261  9.910693  9.319411  9.716286  9.629056  9.756128  9.683885 #> [15]  9.859998  9.805634  9.482140  9.970017 10.056575  9.950225 10.636901 #> [22] 10.944790 11.432253 11.488787 12.663310 13.083260 13.918680 15.245630 #> [29] 15.713940 16.611620 18.021090 19.086410 19.574040 20.053350 19.820330 #> [36] 20.133970 20.854520 21.542980 22.895760 23.236800 23.609130 23.927500 #> [43] 24.921140 25.164820 24.802870 24.957620 24.700070 25.000000 25.000000 #> [50] 25.000000 25.000000 23.850000 23.837660 19.849260 15.860850 14.851300 #>  #> $Libya$y #>  [1] 22.86295 22.49129 23.04051 23.47167 24.09791 24.56253 24.37931 24.93695 #>  [9] 25.36545 26.09432 26.51221 27.14095 27.68826 28.14417 28.95999 29.42464 #> [17] 30.30756 30.53932 30.96183 31.37607 31.76142 32.08181 32.36890 33.13700 #> [25] 32.79278 32.87882 32.71196 32.26508 31.37626 31.18218 30.76357 30.26639 #> [33] 30.52582 30.98576 31.75179 32.23820 32.70680 32.84320 32.63858 32.19149 #> [41] 32.18726 32.01667 31.89936 31.56915 31.08929 30.66160 30.04419 29.23865 #> [49] 25.68250 22.00000 20.00304 20.00000 19.58047 21.49509 23.40972 22.86295 #>  #> $Libya$isHole #> [1] FALSE #>  #>  #> $Indonesia1 #> $Indonesia1$x #>  [1] 117.8756 118.9967 117.8119 117.4783 117.5216 116.5600 116.5338 116.1481 #>  [9] 116.0009 114.8648 114.4687 113.7557 113.2570 112.0681 111.7033 111.0482 #> [17] 110.2238 110.0709 109.5719 109.0919 108.9527 109.0691 109.6633 109.8302 #> [25] 110.5141 111.1591 111.7975 112.3803 112.8598 113.8058 114.6214 115.1340 #> [33] 115.5191 115.8655 117.0152 117.8820 117.3132 118.0483 117.8756 #>  #> $Indonesia1$y #>  [1]  1.8276407  0.9022191  0.7842418  0.1024747 -0.8037232 -1.4876608 #>  [7] -2.4835173 -4.0127263 -3.6570374 -4.1069841 -3.4957036 -3.4391696 #> [13] -3.1187757 -3.4783920 -2.9944422 -3.0494260 -2.9340325 -1.5928740 #> [19] -1.3149065 -0.4595065  0.4153755  1.3419339  2.0064670  1.3381357 #> [25]  0.7731314  0.9764782  0.9044412  1.4101210  1.4977900  1.2175487 #> [31]  1.4306882  2.8214818  3.1692384  4.3065591  4.3060941  4.1375514 #> [37]  3.2344282  2.2876901  1.8276407 #>  #> $Indonesia1$isHole #> [1] FALSE #>  #>  #> $Indonesia2 #> $Indonesia2$x #>  [1] 105.81766 104.71038 103.86821 102.58426 102.15617 101.39911 100.90250 #>  [8] 100.14198  99.26374  98.97001  98.60135  97.69960  97.17694  96.42402 #> [15]  95.38088  95.29303  95.93686  97.48488  98.36917  99.14256  99.69400 #> [22] 100.64143 101.65801 102.49827 103.07684 103.83840 103.43765 104.01079 #> [29] 104.36999 104.53949 104.88789 105.62211 106.10859 105.85745 105.81766 #>  #> $Indonesia2$y #>  [1] -5.8523556 -5.8732846 -5.0373150 -4.2202589 -3.6141460 -2.7997771 #>  [7] -2.0502621 -0.6503476  0.1831416  1.0428824  1.8235066  2.4531839 #> [13]  3.3087906  3.8688598  4.9707822  5.4798209  5.4395133  5.2463209 #> [19]  4.2683703  3.5903496  3.1743285  2.0993812  2.0836974  1.3987005 #> [25]  0.5613614  0.1045417 -0.7119459 -1.0592115 -1.0848430 -1.7823715 #> [31] -2.3404253 -2.4288437 -3.0617766 -4.3055250 -5.8523556 #>  #> $Indonesia2$isHole #> [1] FALSE #>  #>  #> $Indonesia3 #> $Indonesia3$x #>  [1] 134.1434 134.4226 135.4576 136.2933 137.4407 138.3297 139.1849 139.9267 #>  [9] 141.0002 141.0171 141.0339 140.1434 139.1278 138.8815 137.6145 138.0391 #> [17] 138.6686 138.4079 137.9278 135.9893 135.1646 133.6629 133.3677 132.9840 #> [25] 132.7569 132.7538 131.9898 133.0668 133.7800 133.6962 132.2324 131.8362 #> [33] 130.9428 130.5196 131.8675 132.3801 133.9855 134.1434 #>  #> $Indonesia3$y #>  [1] -1.1518674 -2.7691847 -3.3677528 -2.3070423 -1.7035133 -1.7026865 #>  [7] -2.0512957 -2.4090516 -2.6001511 -5.8590219 -9.1178928 -8.2971677 #> [13] -8.0960430 -8.3809352 -8.4116826 -7.5978822 -7.3202247 -6.2328492 #> [19] -5.3933656 -4.5465439 -4.4629314 -3.5388534 -4.0248186 -4.1129786 #> [25] -3.7462826 -3.3117872 -2.8205510 -2.4604180 -2.4798483 -2.2145415 #> [31] -2.2125261 -1.6171620 -1.4325221 -0.9377202 -0.6954611 -0.3695379 #> [37] -0.7802105 -1.1518674 #>  #> $Indonesia3$isHole #> [1] FALSE #>  #>  #> $Indonesia4 #> $Indonesia4$x #>  [1] 125.2405 124.4370 123.6855 122.7231 121.0567 120.1831 120.0409 120.9359 #>  [9] 121.4758 123.3406 123.2584 122.8227 122.3885 121.5083 122.4546 122.2719 #> [17] 123.1710 123.1623 122.6285 122.2364 122.7196 121.7382 121.4895 121.6192 #> [25] 120.8982 120.9724 120.3055 120.3900 120.4307 119.7965 119.3669 119.6536 #> [33] 119.4988 119.0783 118.7678 119.1810 119.3234 119.8260 120.0357 120.8858 #> [41] 121.6668 122.9276 124.0775 125.0660 125.2405 #>  #> $Indonesia4$y #>  [1]  1.4198361  0.4278812  0.2355932  0.4311368  0.3812174  0.2372468 #>  [7] -0.5196579 -1.4089059 -0.9559620 -0.6156727 -1.0762131 -0.9309506 #> [13] -1.5168580 -1.9044829 -3.1860584 -3.5295000 -4.6836931 -5.3406039 #> [19] -5.6345912 -5.2829330 -4.4641716 -4.8513315 -4.5745525 -4.1884779 #> [25] -3.6021054 -2.6276429 -2.9316037 -4.0975790 -5.5282411 -5.6734002 #> [31] -5.3798780 -4.4594174 -3.4944117 -3.4870220 -2.8019992 -2.1471038 #> [37] -1.3531471  0.1542545  0.5664774  1.3092227  1.0139436  0.8751924 #> [43]  0.9171020  1.6432592  1.4198361 #>  #> $Indonesia4$isHole #> [1] FALSE #>  #>  #> $Indonesia5 #> $Indonesia5$x #>  [1] 108.6235 110.5392 110.7596 112.6148 112.9788 114.4789 115.7055 114.5645 #>  [9] 113.4647 112.5597 111.5221 110.5861 109.4277 108.6937 108.2778 106.4541 #> [17] 106.2806 105.3655 106.0516 107.2650 108.0721 108.4868 108.6235 #>  #> $Indonesia5$y #>  [1] -6.777674 -6.877358 -6.465186 -6.946036 -7.594213 -7.776528 -8.370807 #>  [8] -8.751817 -8.348947 -8.376181 -8.302129 -8.122605 -7.740664 -7.641600 #> [15] -7.766657 -7.354900 -6.924900 -6.851416 -5.895919 -5.954985 -6.345762 #> [22] -6.421985 -6.777674 #>  #> $Indonesia5$isHole #> [1] FALSE #>  #>  #> $Indonesia6 #> $Indonesia6$x #>  [1] 128.6882 128.6360 128.1202 127.9680 128.3800 128.1000 127.6965 127.3995 #>  [9] 127.6005 127.9324 128.0042 128.5946 128.6882 #>  #> $Indonesia6$y #>  [1]  1.1323860  0.2584858  0.3564127 -0.2520773 -0.7800038 -0.8999964 #>  [7] -0.2665984  1.0117215  1.8106908  2.1745963  1.6285314  1.5408107 #> [13]  1.1323860 #>  #> $Indonesia6$isHole #> [1] FALSE #>  #>  #> $Indonesia7 #> $Indonesia7$x #> [1] 130.4713 130.8348 129.9905 129.1552 128.5907 127.8989 128.1359 129.3710 #> [9] 130.4713 #>  #> $Indonesia7$y #> [1] -3.093764 -3.858472 -3.446301 -3.362637 -3.428679 -3.393436 -2.843650 #> [8] -2.802154 -3.093764 #>  #> $Indonesia7$isHole #> [1] FALSE #>  #>  #> $Indonesia8 #> $Indonesia8$x #> [1] 122.9035 122.7570 121.2545 119.9244 119.9209 120.7151 121.3417 122.0074 #> [9] 122.9035 #>  #> $Indonesia8$y #> [1] -8.094234 -8.649808 -8.933666 -8.810418 -8.444859 -8.236965 -8.536740 #> [8] -8.460620 -8.094234 #>  #> $Indonesia8$isHole #> [1] FALSE #>  #>  #> $Indonesia9 #> $Indonesia9$x #> [1] 124.4360 123.5800 123.4600 123.5500 123.9800 124.9687 125.0700 125.0885 #> [9] 124.4360 #>  #> $Indonesia9$y #> [1] -10.140001 -10.359987 -10.239995  -9.900016  -9.290027  -8.892790  -9.089987 #> [8]  -9.393173 -10.140001 #>  #> $Indonesia9$isHole #> [1] FALSE #>  #>  #> $Indonesia10 #> $Indonesia10$x #>  [1] 117.9000 118.2606 118.8785 119.1265 117.9704 117.2777 116.7401 117.0837 #>  [9] 117.6320 117.9000 #>  #> $Indonesia10$y #>  [1] -8.095681 -8.362383 -8.280683 -8.705825 -8.906639 -9.040895 -9.032937 #>  [8] -8.457158 -8.449303 -8.095681 #>  #> $Indonesia10$isHole #> [1] FALSE #>  #>  #> $Indonesia11 #> $Indonesia11$x #> [1] 120.7156 120.2950 118.9678 119.9003 120.4258 120.7755 120.7156 #>  #> $Indonesia11$y #> [1] -10.239581 -10.258650  -9.557969  -9.361340  -9.665921  -9.969675 -10.239581 #>  #> $Indonesia11$isHole #> [1] FALSE #>  #>  #> $Indonesia12 #> $Indonesia12$x #> [1] 127.2492 126.8749 126.1838 125.9890 127.0007 127.2492 #>  #> $Indonesia12$y #> [1] -3.459065 -3.790983 -3.607376 -3.177273 -3.129318 -3.459065 #>  #> $Indonesia12$isHole #> [1] FALSE #>  #>  #> $Indonesia13 #> $Indonesia13$x #> [1] 134.7246 134.2101 134.1128 134.2903 134.4996 134.7270 134.7246 #>  #> $Indonesia13$y #> [1] -6.214401 -6.895238 -6.142467 -5.783058 -5.445042 -5.737582 -6.214401 #>  #> $Indonesia13$isHole #> [1] FALSE #>  #>  #> $`South Africa1` #> $`South Africa1`$x #>  [1] 31.52100 31.32556 30.90176 30.62281 30.05572 28.92555 28.21976 27.46461 #>  [9] 26.41945 25.90966 25.78063 25.17286 24.67785 23.59404 22.98819 22.57416 #> [17] 21.54280 20.68905 20.07126 19.61641 19.19328 18.85531 18.42464 18.37741 #> [25] 18.24450 18.25008 17.92519 18.24791 18.22176 17.56692 17.06442 17.06292 #> [33] 16.34498 16.82402 17.21893 17.38750 17.83615 18.46490 19.00213 19.89473 #> [41] 19.89577 20.16573 20.75861 20.66647 20.88961 21.60590 22.10597 22.57953 #> [49] 22.82427 23.31210 23.73357 24.21127 25.02517 25.66467 25.76585 25.94165 #> [57] 26.48575 26.78641 27.11941 28.01724 29.43219 29.83904 30.32288 30.65987 #> [65] 31.19141 31.67040 31.93059 31.75241 31.83778 31.33316 31.04408 30.94967 #> [73] 30.67661 30.68596 31.28277 31.86806 32.07167 32.83012 32.58026 32.46213 #> [81] 32.20339 31.52100 #>  #> $`South Africa1`$y #>  [1] -29.25739 -29.40198 -29.90996 -30.42378 -31.14027 -32.17204 -32.77195 #>  [8] -33.22696 -33.61495 -33.66704 -33.94465 -33.79685 -33.98718 -33.79447 #> [15] -33.91643 -33.86408 -34.25884 -34.41718 -34.79514 -34.81917 -34.46260 #> [22] -34.44431 -33.99787 -34.13652 -33.86775 -33.28143 -32.61129 -32.42913 #> [29] -31.66163 -30.72572 -29.87864 -29.87595 -28.57671 -28.08216 -28.35594 #> [36] -28.78351 -28.85638 -29.04546 -28.97244 -28.46110 -24.76779 -24.91796 #> [43] -25.86814 -26.47745 -26.82854 -26.72653 -26.28026 -25.97945 -25.50046 #> [50] -25.26869 -25.39013 -25.67022 -25.71967 -25.48682 -25.17485 -24.69637 #> [57] -24.61633 -24.24069 -23.57432 -22.82775 -22.09131 -22.10222 -22.27161 #> [64] -22.15157 -22.25151 -23.65897 -24.36942 -25.48428 -25.84333 -25.66019 #> [71] -25.73145 -26.02265 -26.39808 -26.74385 -27.28588 -27.17793 -26.73382 #> [78] -26.74219 -27.47016 -28.30101 -28.75240 -29.25739 #>  #> $`South Africa1`$isHole #> [1] FALSE #>  #>  #> $`South Africa2` #> $`South Africa2`$x #>  [1] 28.97826 28.54170 28.07434 27.53251 26.99926 27.74940 28.10720 28.29107 #>  [9] 28.84840 29.01842 29.32517 28.97826 #>  #> $`South Africa2`$y #>  [1] -28.95560 -28.64750 -28.85147 -29.24271 -29.87595 -30.64511 -30.54573 #>  [8] -30.22622 -30.07005 -29.74377 -29.25739 -28.95560 #>  #> $`South Africa2`$isHole #> [1] TRUE #>  #>  #> $Peru #> $Peru$x #>  [1] -69.59042 -69.85844 -70.37257 -71.37525 -71.46204 -73.44453 -75.23788 #>  [8] -76.00921 -76.42347 -76.25924 -77.10619 -78.09215 -79.03695 -79.44592 #> [15] -79.76058 -80.53748 -81.25000 -80.92635 -81.41094 -81.09967 -80.30256 #> [22] -80.18401 -80.46929 -80.44224 -80.02891 -79.62498 -79.20529 -78.63990 #> [29] -78.45068 -77.83790 -76.63539 -75.54500 -75.23372 -75.37322 -75.10662 #> [36] -74.44160 -74.12240 -73.65950 -73.07039 -72.32579 -71.77476 -71.41365 #> [43] -70.81348 -70.04771 -70.69268 -70.39404 -69.89364 -70.79477 -70.92884 #> [50] -71.74841 -72.89193 -72.96451 -73.21971 -73.12003 -73.72449 -73.72340 #> [57] -73.98724 -73.57106 -73.01538 -73.22671 -72.56303 -72.18489 -71.30241 #> [64] -70.48189 -70.54869 -70.09375 -69.52968 -68.66508 -68.88008 -68.92922 #> [71] -68.94889 -69.33953 -69.16035 -69.38976 -68.95964 -69.59042 #>  #> $Peru$y #>  [1] -17.5800119 -18.0926938 -18.3479754 -17.7737985 -17.3634876 -16.3593629 #>  [7] -15.2656829 -14.6492864 -13.8231869 -13.5350392 -12.2227162 -10.3777125 #> [13]  -8.3865679  -7.9308334  -7.1943409  -6.5416676  -6.1368344  -5.6905567 #> [19]  -4.7367648  -4.0363941  -3.4048565  -3.8211618  -4.0592868  -4.4257244 #> [25]  -4.3460910  -4.4541981  -4.9591285  -4.5477841  -3.8730966  -3.0030205 #> [31]  -2.6086777  -1.5616098  -0.9114169  -0.1520318  -0.0572055  -0.5308200 #> [37]  -1.0028325  -1.2604912  -2.3089544  -2.4342180  -2.1697897  -2.3428024 #> [43]  -2.2568645  -2.7251563  -3.7428720  -3.7665915  -4.2981869  -4.2512647 #> [49]  -4.4015915  -4.5939828  -5.2745615  -5.7412513  -6.0891887  -6.6299309 #> [55]  -6.9185955  -7.3409986  -7.5238298  -8.4244467  -9.0328333  -9.4622128 #> [61]  -9.5201938 -10.0535979 -10.0794361  -9.4901181 -11.0091468 -11.1239719 #> [67] -10.9517343 -12.5613001 -12.8997291 -13.6026836 -14.4536394 -14.9531955 #> [73] -15.3239739 -15.6601291 -16.5006979 -17.5800119 #>  #> $Peru$isHole #> [1] FALSE #>  #>  #> $Chad #> $Chad$x #>  [1] 14.49579 14.59578 13.95448 13.95670 13.54039 13.97217 15.24773 15.30044 #>  [9] 15.68574 15.90325 15.48715 15.47106 15.09689 14.85130 15.86085 19.84926 #> [17] 23.83766 23.88689 23.02459 22.56795 22.30351 22.51202 22.18329 22.29658 #> [25] 22.03759 21.93681 22.28801 22.49762 22.50869 22.87622 22.86417 22.23113 #> [33] 21.72382 21.00087 20.05969 19.09401 18.81201 18.91102 18.38955 17.96493 #> [41] 16.70599 16.45618 16.29056 16.10623 15.27946 15.43609 15.12087 14.98000 #> [49] 14.54447 13.95422 14.17147 14.62720 14.90935 15.46787 14.92356 14.96015 #> [57] 14.89336 14.49579 #>  #> $Chad$y #>  [1] 12.859396 13.330427 13.353449 13.996691 14.367134 15.684370 16.627306 #>  [8] 17.927950 19.957180 20.387619 20.730415 21.048450 21.308519 22.862950 #> [15] 23.409720 21.495090 19.580470 15.610840 15.680720 14.944290 14.326820 #> [22] 14.093180 13.786480 13.372320 12.955460 12.588180 12.646050 12.260240 #> [29] 11.679360 11.384610 11.142395 10.971889 10.567056  9.475985  9.012706 #> [36]  9.074847  8.982915  8.630895  8.281304  7.890914  7.508328  7.734774 #> [43]  7.754307  7.497088  7.421925  7.692812  8.382150  8.796104  8.965861 #> [50]  9.549495 10.021378  9.920919  9.992129  9.982337 10.891325 11.555574 #> [57] 12.219050 12.859396 #>  #> $Chad$isHole #> [1] FALSE #>  #>  #> $Mali #> $Mali$x #>  [1] -12.1707503 -11.8342075 -11.6660783 -11.3490950 -10.6507914 -10.0868465 #>  [7]  -9.7002551  -9.5502384  -5.5377443  -5.3152773  -5.4885225  -5.9711287 #> [13]  -6.4537866  -4.9233374  -1.5500549   1.8232276   2.0609908   2.6835885 #> [19]   3.1466610   3.1581332   4.2674195   4.2702100   3.7234217   3.6382589 #> [25]   2.7499927   1.3855282   1.0157833   0.3748922  -0.2662573  -0.5158545 #> [31]  -1.0663635  -2.0010351  -2.1918245  -2.9676945  -3.1037068  -3.5228027 #> [37]  -4.0063908  -4.2804050  -4.4271661  -5.2209419  -5.1978426  -5.4705649 #> [43]  -5.4043416  -5.8169262  -6.0504520  -6.2052229  -6.4939650  -6.6664609 #> [49]  -6.8505066  -7.6227592  -7.8995898  -8.0299436  -8.3353772  -8.2823571 #> [55]  -8.4073108  -8.6203210  -8.5813053  -8.3763049  -8.7860990  -8.9052649 #> [61]  -9.1274735  -9.3276163  -9.5679117  -9.8909928 -10.1652138 -10.5932238 #> [67] -10.8708296 -11.0365560 -11.2975736 -11.4561686 -11.5139428 -11.4678991 #> [73] -11.5533978 -11.9277160 -12.1248875 -12.1707503 #>  #> $Mali$y #>  [1] 14.61683 14.79910 15.38821 15.41126 15.13275 15.33049 15.26411 15.48650 #>  [9] 15.50169 16.20185 16.32510 20.64083 24.95659 24.97457 22.79267 20.61081 #> [17] 20.14223 19.85623 19.69358 19.05736 19.15527 16.85223 16.18428 15.56812 #> [25] 15.40952 15.32356 14.96818 14.92891 14.92431 15.11616 14.97382 14.55901 #> [33] 14.24642 13.79815 13.54127 13.33766 13.47249 13.22844 12.54265 11.71386 #> [41] 11.37515 10.95127 10.37074 10.22255 10.09636 10.52406 10.41130 10.43081 #> [49] 10.13899 10.14724 10.29738 10.20653 10.49481 10.79260 10.90926 10.81089 #> [57] 11.13625 11.39365 11.81256 12.08836 12.30806 12.33429 12.19424 12.06048 #> [65] 11.84408 11.92398 12.17789 12.21124 12.07797 12.07683 12.44299 12.75452 #> [73] 13.14121 13.42208 13.99473 14.61683 #>  #> $Mali$isHole #> [1] FALSE #>  #>  #> $Angola1 #> $Angola1$x #>  [1] 16.32653 16.57318 16.86019 17.09000 17.47297 18.13422 18.46418 19.01675 #>  [9] 19.16661 19.41750 20.03772 20.09162 20.60182 20.51475 21.72811 21.74646 #> [17] 21.94913 21.80180 21.87518 22.20875 22.15527 22.40280 22.83735 23.45679 #> [25] 23.91222 24.01789 23.90415 24.07991 23.93092 24.01614 21.93389 21.88784 #> [33] 22.56248 23.21505 21.37718 18.95619 18.26331 14.20971 14.05850 13.46236 #> [41] 12.81408 12.21546 11.73420 11.64010 11.77854 12.12358 12.17562 12.50010 #> [49] 12.73848 13.31291 13.63372 13.73873 13.68638 13.38733 13.12099 12.87537 #> [57] 12.92906 13.23643 12.93304 12.72830 12.22735 12.32243 12.73517 13.02487 #> [65] 13.37560 16.32653 #>  #> $Angola1$y #>  [1]  -5.877470  -6.622645  -7.222298  -7.545689  -8.068551  -7.987678 #>  [7]  -7.847014  -7.988246  -7.738184  -7.155429  -7.116361  -6.943090 #> [13]  -6.939318  -7.299606  -7.290872  -7.920085  -8.305901  -8.908707 #> [19]  -9.523708  -9.894796 -11.084801 -10.993075 -11.017622 -10.867863 #> [25] -10.926826 -11.237298 -11.722282 -12.191297 -12.565848 -12.911046 #> [31] -12.898437 -16.080310 -16.898451 -17.523116 -17.930636 -17.789095 #> [37] -17.309951 -17.353101 -17.423381 -16.971212 -16.941343 -17.111668 #> [43] -17.301889 -16.673142 -15.793816 -14.878316 -14.449144 -13.547700 #> [49] -13.137906 -12.483630 -12.038645 -11.297863 -10.731076 -10.373578 #> [55]  -9.766897  -9.166934  -8.959091  -8.562629  -7.596539  -6.927122 #> [61]  -6.294448  -6.100092  -5.965682  -5.984389  -5.864241  -5.877470 #>  #> $Angola1$isHole #> [1] FALSE #>  #>  #> $Angola2 #> $Angola2$x #> [1] 12.43669 12.18234 11.91496 12.31861 12.62076 12.99552 12.63161 12.46800 #> [9] 12.43669 #>  #> $Angola2$y #> [1] -5.684304 -5.789931 -5.037987 -4.606230 -4.438023 -4.781103 -4.991271 #> [8] -5.248362 -5.684304 #>  #> $Angola2$isHole #> [1] FALSE #>  #>  #> $Niger #> $Niger$x #>  [1]  2.1544735  2.1771078  1.0241032  0.9930457  0.4299276  0.2956464 #>  [7]  0.3748922  1.0157833  1.3855282  2.7499927  3.6382589  3.7234217 #> [13]  4.2702100  4.2674195  5.6775660  8.5728931 11.9995056 13.5814246 #> [19] 14.1438709 14.8513000 15.0968876 15.4710767 15.4871481 15.9032467 #> [25] 15.6857406 15.3004411 15.2477312 13.9722018 13.5403935 13.9566988 #> [31] 13.9544768 14.5957813 14.4957874 14.2135307 14.1813363 13.9953528 #> [37] 13.3187016 13.0839873 12.3020712 11.5278032 10.9895931 10.7010319 #> [43] 10.1148145  9.5249280  9.0149333  7.8046713  7.3307467  6.8204419 #> [49]  6.4454261  5.4430583  4.3683435  4.1079460  3.9672827  3.6806336 #> [55]  3.6111805  2.8486430  2.4901636  2.1544735 #>  #> $Niger$y #>  [1] 11.94015 12.62502 12.85183 13.33575 13.98873 14.44423 14.92891 14.96818 #>  [9] 15.32356 15.40952 15.56812 16.18428 16.85223 19.15527 19.60121 21.56566 #> [17] 23.47167 23.04051 22.49129 22.86295 21.30852 21.04846 20.73041 20.38762 #> [25] 19.95718 17.92795 16.62731 15.68437 14.36713 13.99669 13.35345 13.33043 #> [33] 12.85940 12.80204 12.48366 12.46157 13.55636 13.59615 13.03719 13.32898 #> [41] 13.38732 13.24692 13.27725 12.85110 12.82666 13.34353 13.09804 13.11509 #> [49] 13.49277 13.86592 13.74748 13.53122 12.95611 12.55290 11.66017 12.23564 #> [57] 12.23305 11.94015 #>  #> $Niger$isHole #> [1] FALSE #>  #>  #> $Colombia #> $Colombia$x #>   [1] -75.37322 -75.80147 -76.29231 -76.57638 -77.42498 -77.66861 -77.85506 #>   [8] -78.85526 -78.99094 -78.61783 -78.66212 -78.42761 -77.93154 -77.51043 #>  [15] -77.12769 -77.49627 -77.30760 -77.53322 -77.31882 -77.47666 -77.88157 #>  [22] -77.75341 -77.43111 -77.24257 -77.47472 -77.35336 -76.83667 -76.08638 #>  [29] -75.67460 -75.66470 -75.48043 -74.90690 -74.27675 -74.19722 -73.41476 #>  [36] -72.62784 -72.23819 -71.75409 -71.39982 -71.13746 -71.33158 -71.97392 #>  [43] -72.22758 -72.61466 -72.90529 -73.02760 -73.30495 -72.78873 -72.66049 #>  [50] -72.43986 -72.36090 -72.47968 -72.44449 -72.19835 -71.96018 -70.67423 #>  [57] -70.09331 -69.38948 -68.98532 -68.26505 -67.69509 -67.34144 -67.52153 #>  [64] -67.74470 -67.82301 -67.62184 -67.33756 -67.30317 -67.80994 -67.44709 #>  [71] -67.18129 -66.87633 -67.06505 -67.26000 -67.53781 -67.86857 -69.81697 #>  [78] -69.80460 -69.21864 -69.25243 -69.45240 -70.01557 -70.02066 -69.57707 #>  [85] -69.42049 -69.44410 -69.89364 -70.39404 -70.69268 -70.04771 -70.81348 #>  [92] -71.41365 -71.77476 -72.32579 -73.07039 -73.65950 -74.12240 -74.44160 #>  [99] -75.10662 -75.37322 #>  #> $Colombia$y #>   [1] -0.15203175  0.08480134  0.41604727  0.25693553  0.39568675  0.82589305 #>   [7]  0.80992503  1.38092377  1.69136994  1.76640412  2.26735545  2.62955557 #>  [13]  2.69660574  3.32501699  3.84963614  4.08760611  4.66798412  5.58281200 #>  [19]  5.84535411  6.69111644  7.22377127  7.70983979  7.63806122  7.93527823 #>  [25]  8.52428620  8.67050467  8.63874950  9.33682058  9.44324820  9.77400320 #>  [31] 10.61899038 11.08304475 11.10203583 11.31047272 11.22701529 11.73197154 #>  [37] 11.95554963 12.43730317 12.37604076 12.11298188 11.77628408 11.60867158 #>  [43] 11.10870209 10.82197541 10.45034435  9.73677033  9.15199982  9.08502717 #>  [49]  8.62528779  8.40527538  8.00263845  7.63250601  7.42378490  7.34043081 #>  [55]  6.99161490  7.08778474  6.96037649  6.09986054  6.20680492  6.15326813 #>  [61]  6.26731802  6.09546804  5.55687043  5.22112865  4.50393728  3.83948172 #>  [67]  3.54234223  3.31845409  2.82065502  2.60028087  2.25063813  1.25336050 #>  [73]  1.13011221  1.71999868  2.03716279  1.69245515  1.71480520  1.08908112 #>  [79]  0.98567658  0.60265087  0.70615876  0.54141429 -0.18515635 -0.54999196 #>  [85] -1.12261850 -1.55628712 -4.29818694 -3.76659149 -3.74287200 -2.72515635 #>  [91] -2.25686452 -2.34280242 -2.16978973 -2.43421803 -2.30895436 -1.26049122 #>  [97] -1.00283253 -0.53082000 -0.05720550 -0.15203175 #>  #> $Colombia$isHole #> [1] FALSE #>  #>  #> $Ethiopia #> $Ethiopia$x #>  [1] 37.90607 38.51295 39.09940 39.34061 40.02625 40.89660 41.15520 41.59856 #>  [9] 42.00975 42.35156 42.00000 41.66176 41.73959 41.75557 42.31414 42.55493 #> [17] 42.77685 42.55876 42.92812 43.29699 43.67875 46.94834 47.78942 44.96360 #> [25] 43.66087 42.76967 42.12861 41.85508 41.17180 40.76848 39.85494 39.55938 #> [33] 38.89251 38.67114 38.43697 38.12092 36.85509 36.15908 35.81745 35.81745 #> [41] 35.29801 34.70702 34.25032 34.07510 33.56829 32.95418 33.29480 33.82550 #> [49] 33.97498 33.96162 34.25745 34.73115 34.83163 35.26049 35.86363 36.27022 #> [57] 36.42951 37.59377 37.90607 #>  #> $Ethiopia$y #>  [1] 14.959430 14.505470 14.740640 14.531550 14.519590 14.118640 13.773330 #>  [8] 13.452090 12.865820 12.542230 12.100000 11.631200 11.355110 11.050910 #> [15] 11.034200 11.105110 10.926879 10.572580 10.021940  9.540480  9.183580 #> [22]  7.996880  8.003000  5.001620  4.957550  4.252590  4.234130  3.918912 #> [29]  3.919090  4.257020  3.838790  3.422060  3.500740  3.616070  3.588510 #> [36]  3.598605  4.447864  4.447864  4.776966  5.338232  5.506000  6.594220 #> [43]  6.826070  7.225950  7.713340  7.784970  8.354580  8.379160  8.684560 #> [50]  9.583580 10.630090 10.910170 11.318960 12.082860 12.578280 13.563330 #> [57] 14.422110 14.213100 14.959430 #>  #> $Ethiopia$isHole #> [1] FALSE #>  #>  #> $Bolivia #> $Bolivia$x #>  [1] -62.84647 -63.98684 -64.37702 -64.96489 -66.27334 -67.10667 -67.82818 #>  [8] -68.21991 -68.75717 -68.44223 -68.96682 -69.10025 -69.59042 -68.95964 #> [15] -69.38976 -69.16035 -69.33953 -68.94889 -68.92922 -68.88008 -68.66508 #> [22] -69.52968 -68.78616 -68.27125 -68.04819 -67.17380 -66.64691 -65.33844 #> [29] -65.44484 -65.32190 -65.40228 -64.31635 -63.19650 -62.80306 -62.12708 #> [36] -61.71320 -61.08412 -60.50330 -60.45920 -60.26433 -60.25115 -60.54297 #> [43] -60.15839 -58.24122 -58.38806 -58.28080 -57.73456 -57.49837 -57.67601 #> [50] -57.95000 -57.85380 -58.16639 -58.18347 -59.11504 -60.04356 -61.78633 #> [57] -62.26596 -62.29118 -62.68506 -62.84647 #>  #> $Bolivia$y #>  [1] -22.034985 -21.993644 -22.798091 -22.075862 -21.832310 -22.735925 #>  [7] -22.872919 -21.494347 -20.372658 -19.405068 -18.981683 -18.260125 #> [13] -17.580012 -16.500698 -15.660129 -15.323974 -14.953195 -14.453639 #> [19] -13.602684 -12.899729 -12.561300 -10.951734 -11.036380 -11.014521 #> [25] -10.712059 -10.306812  -9.931331  -9.761988 -10.511451 -10.895872 #> [31] -11.566270 -12.461978 -12.627033 -13.000653 -13.198781 -13.489202 #> [37] -13.479384 -13.775955 -14.354007 -14.645979 -15.077219 -15.093910 #> [43] -16.258284 -16.299573 -16.877109 -17.271710 -17.552468 -18.174188 #> [49] -18.961840 -19.400004 -19.969995 -20.176701 -19.868399 -19.356906 #> [55] -19.342747 -19.633737 -20.513735 -21.051635 -22.249029 -22.034985 #>  #> $Bolivia$isHole #> [1] FALSE #>  #>  #> $Mauritania #> $Mauritania$x #>  [1] -12.170750 -12.830658 -13.435738 -14.099521 -14.577348 -15.135737 #>  [7] -15.623666 -16.120690 -16.463098 -16.549708 -16.270552 -16.146347 #> [13] -16.256883 -16.377651 -16.277838 -16.536324 -17.063423 -16.845194 #> [19] -12.929102 -13.118754 -12.874222 -11.937224 -11.969419  -8.687294 #> [25]  -8.684400  -4.923337  -6.453787  -5.971129  -5.488523  -5.315277 #> [31]  -5.537744  -9.550238  -9.700255 -10.086846 -10.650791 -11.349095 #> [37] -11.666078 -11.834208 -12.170750 #>  #> $Mauritania$y #>  [1] 14.61683 15.30369 16.03938 16.30430 16.59826 16.58728 16.36934 16.45566 #>  [9] 16.13504 16.67389 17.16696 18.10848 19.09672 19.59382 20.09252 20.56787 #> [17] 20.99975 21.33332 21.32707 22.77122 23.28483 23.37459 25.93335 25.88106 #> [25] 27.39574 24.97457 24.95659 20.64083 16.32510 16.20185 15.50169 15.48650 #> [33] 15.26411 15.33049 15.13275 15.41126 15.38821 14.79910 14.61683 #>  #> $Mauritania$isHole #> [1] FALSE #>  #>  #> $Norway1 #> $Norway1$x #>  [1] 28.165547 31.293418 30.005435 31.101079 29.399581 28.591930 29.015573 #>  [8] 27.732292 26.179622 25.689213 24.735679 23.662050 22.356238 21.244936 #> [15] 20.645593 20.025269 19.878560 17.993868 17.729182 16.768879 16.108712 #> [22] 15.108411 13.555690 13.919905 13.571916 12.579935 11.930569 11.992064 #> [29] 12.631147 12.300366 11.468272 11.027369 10.356557  8.382000  7.048748 #> [36]  5.665835  5.308234  4.992078  5.912900  8.553411 10.527709 12.358347 #> [43] 14.761146 16.435927 19.184028 21.378416 23.023742 24.546543 26.370050 #> [50] 28.165547 #>  #> $Norway1$y #>  [1] 71.18547 70.45379 70.18626 69.55808 69.15692 69.06478 69.76649 70.16419 #>  [9] 69.82530 69.09211 68.64956 68.89125 68.84174 69.37044 69.10625 69.06514 #> [17] 68.40719 68.56739 68.01055 68.01394 67.30246 66.19387 64.78703 64.44542 #> [25] 64.04911 64.06622 63.12832 61.80036 61.29357 60.11793 59.43239 58.85615 #> [33] 59.46981 58.31329 58.07888 58.58816 59.66323 61.97100 62.61447 63.45401 #> [41] 64.48604 65.87973 67.81064 68.56321 69.81744 70.25517 70.20207 71.03050 #> [49] 70.98626 71.18547 #>  #> $Norway1$isHole #> [1] FALSE #>  #>  #> $Norway2 #> $Norway2$x #>  [1] 18.25183 21.54383 19.02737 18.47172 17.59441 17.11820 15.91315 13.76259 #>  [9] 14.66956 13.17060 11.22231 10.44453 13.17077 13.71852 15.14282 15.52255 #> [17] 16.99085 18.25183 #>  #> $Norway2$y #>  [1] 79.70175 78.95611 78.56260 77.82669 77.63796 76.80941 76.77045 77.38035 #>  [9] 77.73565 78.02493 78.86930 79.65239 80.01046 79.66039 79.67431 80.01608 #> [17] 80.05086 79.70175 #>  #> $Norway2$isHole #> [1] FALSE #>  #>  #> $Norway3 #> $Norway3$x #>  [1] 25.44763 27.40751 25.92465 23.02447 20.07519 19.89727 18.46226 17.36802 #>  [9] 20.45599 21.90794 22.91925 25.44763 #>  #> $Norway3$y #>  [1] 80.40734 80.05641 79.51783 79.40001 79.56682 79.84236 79.85988 80.31890 #>  [9] 80.59816 80.35768 80.65714 80.40734 #>  #> $Norway3$isHole #> [1] FALSE #>  #>  #> $Norway4 #> $Norway4$x #> [1] 24.72412 22.49032 20.72601 21.41611 20.81190 22.88426 23.28134 24.72412 #>  #> $Norway4$y #> [1] 77.85385 77.44493 77.67704 77.93504 78.25463 78.45494 78.07954 77.85385 #>  #> $Norway4$isHole #> [1] FALSE #>  #>  #> $Egypt #> $Egypt$x #>  [1] 34.92260 34.64174 34.42655 34.15451 33.92136 33.58811 33.13676 32.42323 #>  [9] 32.32046 32.73482 33.34876 34.10455 34.47387 34.79507 35.69241 35.49372 #> [17] 35.52598 36.69069 36.86623 32.90000 29.02000 25.00000 25.00000 25.00000 #> [25] 24.70007 24.95762 24.80287 25.16482 26.49533 27.45762 28.45048 28.91353 #> [33] 29.68342 30.09503 30.97693 31.68796 31.96041 32.19247 32.99392 33.77340 #> [41] 34.26544 34.92260 #>  #> $Egypt$y #>  [1] 29.50133 29.09942 28.34399 27.82330 27.64870 27.97136 28.41765 29.85108 #>  [9] 29.76043 28.70523 27.69989 26.14227 25.59856 25.03375 23.92671 23.75237 #> [17] 23.10244 22.20485 22.00000 22.00000 22.00000 22.00000 25.68250 29.23865 #> [25] 30.04419 30.66160 31.08929 31.56915 31.58568 31.32126 31.02577 30.87005 #> [33] 31.18686 31.47340 31.55586 31.42960 30.93360 31.26034 31.02407 30.96746 #> [41] 31.21936 29.50133 #>  #> $Egypt$isHole #> [1] FALSE #>  #>  #> $Chile1 #> $Chile1$x #>  [1] -68.21991 -67.82818 -67.10667 -66.98523 -67.32844 -68.41765 -68.38600 #>  [8] -68.59480 -68.29554 -69.00123 -69.65613 -70.01355 -69.91901 -70.53507 #> [15] -70.07440 -69.81478 -69.81731 -70.38805 -70.36477 -71.12188 -71.11863 #> [22] -70.81466 -71.41352 -71.68076 -71.91573 -71.74680 -72.14890 -71.91542 #> [29] -71.46406 -71.79362 -71.32980 -71.22278 -71.65932 -71.55201 -71.91726 #> [36] -72.44736 -72.33116 -72.64825 -73.41544 -73.32805 -72.97575 -72.30997 #> [43] -72.32940 -71.91480 -69.49836 -68.57155 -69.46128 -69.94278 -70.84510 #> [50] -71.00633 -71.42979 -72.55794 -73.70276 -73.70276 -74.94676 -75.26003 #> [57] -74.97663 -75.47975 -75.60802 -75.18277 -74.12658 -75.64440 -74.69215 #> [64] -74.35171 -73.24036 -72.71780 -73.38890 -73.70134 -74.33194 -74.01796 #> [71] -73.67710 -73.21759 -73.50556 -73.58806 -73.16672 -72.55314 -71.86173 #> [78] -71.43845 -71.66872 -71.37008 -71.48989 -70.90512 -70.72495 -70.40397 #> [85] -70.09125 -70.16442 -70.37257 -69.85844 -69.59042 -69.10025 -68.96682 #> [92] -68.44223 -68.75717 -68.21991 #>  #> $Chile1$y #>  [1] -21.49435 -22.87292 -22.73592 -22.98635 -24.02530 -24.51855 -26.18502 #>  [8] -26.50691 -26.89934 -27.52121 -28.45914 -29.36792 -30.33634 -31.36501 #> [15] -33.09121 -33.27389 -34.19357 -35.16969 -36.00509 -36.65812 -37.57683 #> [22] -38.55300 -38.91602 -39.80816 -40.83234 -42.05139 -42.25489 -43.40856 #> [29] -43.78761 -44.20717 -44.40752 -44.78424 -44.97369 -45.56073 -46.88484 #> [36] -47.73853 -48.24424 -48.87862 -49.31844 -50.37879 -50.74145 -50.67701 #> [43] -51.42596 -52.00902 -52.14276 -52.29944 -52.29195 -52.53793 -52.89920 #> [50] -53.83325 -53.85645 -53.53141 -52.83507 -52.83507 -52.26275 -51.62935 #> [57] -51.04340 -50.37837 -48.67377 -47.71192 -46.93925 -46.64764 -45.76398 #> [64] -44.10304 -44.45496 -42.38336 -42.11753 -43.36578 -43.22496 -41.79481 #> [71] -39.94221 -39.25869 -38.28288 -37.15628 -37.12378 -35.50884 -33.90909 #> [78] -32.41890 -30.92064 -30.09568 -28.86144 -27.64038 -25.70592 -23.62900 #> [85] -21.39332 -19.75647 -18.34798 -18.09269 -17.58001 -18.26013 -18.98168 #> [92] -19.40507 -20.37266 -21.49435 #>  #> $Chile1$isHole #> [1] FALSE #>  #>  #> $Chile2 #> $Chile2$x #>  [1] -68.63401 -68.63335 -67.56244 -66.95992 -67.29103 -68.14863 -68.63999 #>  [8] -69.23210 -69.95809 -71.00568 -72.26390 -73.28520 -74.66253 -73.83810 #> [15] -72.43418 -71.10773 -70.59178 -70.26748 -69.34565 -68.63401 #>  #> $Chile2$y #>  [1] -52.63637 -54.86950 -54.87001 -54.89681 -55.30124 -55.61183 -55.58002 #>  [8] -55.49906 -55.19843 -55.05383 -54.49514 -53.95752 -52.83749 -53.04743 #> [15] -53.71540 -54.07433 -53.61583 -52.93123 -52.51830 -52.63637 #>  #> $Chile2$isHole #> [1] FALSE #>  #>  #> $Turkey1 #> $Turkey1$x #>  [1] 36.91313 38.34766 39.51261 40.37343 41.55408 42.61955 43.58275 43.75266 #>  [9] 43.65644 44.40001 44.79399 44.10923 44.42140 44.22576 44.77270 44.29345 #> [17] 43.94226 42.77913 42.34959 41.21209 40.67326 39.52258 38.69989 38.16773 #> [25] 37.06676 36.73949 36.68539 36.41755 36.14976 35.78208 36.16082 35.55094 #> [33] 34.71455 34.02689 32.50916 31.69960 30.62162 30.39110 29.69998 28.73290 #> [41] 27.64119 27.04877 26.31822 26.80470 26.17079 27.28002 28.81998 29.24000 #> [49] 31.14593 32.34798 33.51328 35.16770 36.91313 #>  #> $Turkey1$y #>  [1] 41.33536 40.94859 41.10276 41.01367 41.53566 41.58317 41.09214 40.74020 #>  [9] 40.25356 40.00500 39.71300 39.42814 38.28128 37.97158 37.17044 37.00151 #> [17] 37.25623 37.38526 37.22987 37.07435 37.09128 36.71605 36.71293 36.90121 #> [25] 36.62304 36.81752 36.25970 36.04062 35.82153 36.27500 36.65061 36.56544 #> [33] 36.79553 36.21996 36.10756 36.64428 36.67786 36.26298 36.14436 36.67683 #> [41] 36.65882 37.65336 38.20813 38.98576 39.46361 40.42001 40.46001 41.21999 #> [49] 41.08762 41.73626 42.01896 42.04022 41.33536 #>  #> $Turkey1$isHole #> [1] FALSE #>  #>  #> $Turkey2 #> $Turkey2$x #>  [1] 27.19238 26.35801 26.04335 26.05694 26.29460 26.60420 26.11704 27.13574 #>  [9] 27.99672 28.11552 28.98844 28.80644 27.61902 27.19238 #>  #> $Turkey2$y #>  [1] 40.69057 40.15199 40.61775 40.82412 40.93626 41.56211 41.82690 42.14148 #>  [9] 42.00736 41.62289 41.29993 41.05496 40.99982 40.69057 #>  #> $Turkey2$isHole #> [1] FALSE #>  #>  #> $Pakistan #> $Pakistan$x #>  [1] 75.15803 75.89690 76.19285 77.83745 76.87172 75.75706 74.24020 73.74995 #>  [9] 74.10429 74.45156 75.25864 74.40593 74.42138 73.45064 72.82375 71.77767 #> [17] 70.61650 69.51439 70.16893 70.28287 70.84470 71.04324 68.84260 68.17665 #> [25] 67.44367 67.14544 66.37283 64.53041 62.90570 61.49736 61.87419 63.31663 #> [33] 63.23390 62.75543 62.72783 61.77187 61.36931 60.87425 62.54986 63.55026 #> [41] 64.14800 64.35042 65.04686 66.34647 66.38146 66.93889 67.68339 67.79269 #> [49] 68.55693 68.92668 69.31776 69.26252 69.68715 70.32359 69.93054 70.88180 #> [57] 71.15677 71.11502 71.61308 71.49877 71.26235 71.84629 72.92002 74.06755 #> [65] 74.57589 75.15803 #>  #> $Pakistan$y #>  [1] 37.13303 36.66681 35.89840 35.49401 34.65354 34.50492 34.74889 34.31770 #>  [9] 33.44147 32.76490 32.27111 31.69264 30.97981 29.97641 28.96159 27.91318 #> [17] 27.98920 26.94097 26.49187 25.72223 25.21510 24.35652 24.35913 23.69197 #> [25] 23.94484 24.66361 25.42514 25.23704 25.21841 25.07824 26.23997 26.75653 #> [33] 27.21705 27.37892 28.25964 28.69933 29.30328 29.82924 29.31857 29.46833 #> [41] 29.34082 29.56003 29.47218 29.88794 30.73890 31.30491 31.30315 31.58293 #> [49] 31.71331 31.62019 31.90141 32.50194 33.10550 33.35853 34.02012 33.98886 #> [57] 34.34891 34.73313 35.15320 35.65056 36.07439 36.50994 36.72001 36.83618 #> [65] 37.02084 37.13303 #>  #> $Pakistan$isHole #> [1] FALSE #>  #>  #> $Sweden #> $Sweden$x #>  [1] 22.18317 21.21352 21.36963 19.77888 17.84778 17.11955 17.83135 18.78772 #>  [9] 17.86922 16.82919 16.44771 15.87979 14.66668 14.10072 12.94291 12.62510 #> [17] 11.78794 11.02737 11.46827 12.30037 12.63115 11.99206 11.93057 12.57994 #> [25] 13.57192 13.91991 13.55569 15.10841 16.10871 16.76888 17.72918 17.99387 #> [33] 19.87856 20.02527 20.64559 21.97853 23.53947 23.56588 23.90338 22.18317 #>  #> $Sweden$y #>  [1] 65.72374 65.02601 64.41359 63.60955 62.74940 61.34117 60.63658 60.08191 #>  [9] 58.95377 58.71983 57.04112 56.10430 56.20089 55.40778 55.36174 56.30708 #> [17] 57.44182 58.85615 59.43239 60.11793 61.29357 61.80036 63.12832 64.06622 #> [25] 64.04911 64.44542 64.78703 66.19387 67.30246 68.01394 68.01055 68.56739 #> [33] 68.40719 69.06514 69.10625 68.61685 67.93601 66.39605 66.00693 65.72374 #>  #> $Sweden$isHole #> [1] FALSE #>  #>  #> $Tanzania #> $Tanzania$x #>  [1] 33.90371 34.07262 37.69869 37.76690 39.20222 38.74054 38.79977 39.44000 #>  [9] 39.47000 39.19469 39.25203 39.18652 39.53574 39.94960 40.31659 39.52100 #> [17] 38.42756 37.82764 37.47129 36.77515 36.51408 35.31240 34.55999 34.28000 #> [25] 33.94084 33.73972 32.75938 32.19186 31.55635 31.15775 30.74000 30.20000 #> [33] 29.62000 29.41999 29.51999 29.34000 29.75351 30.11632 30.50554 30.75224 #> [41] 30.74301 30.52766 30.46967 30.75831 30.81613 30.41910 30.76986 31.86617 #> [49] 33.90371 #>  #> $Tanzania$y #>  [1]  -0.950000  -1.059820  -3.096990  -3.677120  -4.676770  -5.908950 #>  [7]  -6.475660  -6.840000  -7.100000  -7.703900  -8.007810  -8.485510 #> [13]  -9.112370 -10.098400 -10.317100 -10.896880 -11.285202 -11.268790 #> [19] -11.568760 -11.594537 -11.720938 -11.439146 -11.520020 -10.160000 #> [25]  -9.693674  -9.417150  -9.230599  -8.930359  -8.762049  -8.594579 #> [31]  -8.340000  -7.080000  -6.520000  -5.939999  -5.419979  -4.499983 #> [37]  -4.452389  -4.090120  -3.568580  -3.359310  -3.034310  -2.807620 #> [43]  -2.413830  -2.287250  -1.698914  -1.134659  -1.014550  -1.027360 #> [49]  -0.950000 #>  #> $Tanzania$isHole #> [1] FALSE #>  #>  #> $Nigeria #> $Nigeria$x #>  [1]  8.500288  7.462108  7.082596  6.698072  5.898173  5.362805  5.033574 #>  [8]  4.325607  3.574180  2.691702  2.749063  2.723793  2.912308  3.220352 #> [15]  3.705438  3.600070  3.797112  3.572216  3.611180  3.680634  3.967283 #> [22]  4.107946  4.368344  5.443058  6.445426  6.820442  7.330747  7.804671 #> [29]  9.014933  9.524928 10.114814 10.701032 10.989593 11.527803 12.302071 #> [36] 13.083987 13.318702 13.995353 14.181336 14.577178 14.468192 14.415379 #> [43] 13.572950 13.308676 13.167600 12.955468 12.753672 12.218872 12.063946 #> [50] 11.839309 11.745774 11.058788 10.497375 10.118277  9.522706  9.233163 #> [57]  8.757533  8.500288 #>  #> $Nigeria$y #>  [1]  4.771983  4.412108  4.464689  4.240594  4.262453  4.887971  5.611802 #>  [8]  6.270651  6.258300  6.258817  7.870734  8.506845  9.137608  9.444153 #> [15] 10.063210 10.332186 10.734746 11.327939 11.660167 12.552903 12.956109 #> [22] 13.531216 13.747482 13.865924 13.492768 13.115091 13.098038 13.343527 #> [29] 12.826659 12.851102 13.277252 13.246918 13.387323 13.328980 13.037189 #> [36] 13.596147 13.556356 12.461565 12.483657 12.085361 11.904752 11.572369 #> [43] 10.798566 10.160362  9.640626  9.417772  8.717763  8.305824  7.799808 #> [50]  7.397042  6.981383  6.644427  7.055358  7.038770  6.453482  6.444491 #> [57]  5.479666  4.771983 #>  #> $Nigeria$isHole #> [1] FALSE #>  #>  #> $Venezuela #> $Venezuela$x #>  [1] -71.33158 -71.36001 -71.94705 -71.62087 -71.63306 -72.07417 -71.69564 #>  [8] -71.26456 -71.04000 -71.35008 -71.40062 -70.15530 -70.29384 -69.94324 #> [15] -69.58430 -68.88300 -68.23327 -68.19413 -67.29625 -66.22786 -65.65524 #> [22] -64.89045 -64.32948 -64.31801 -63.07932 -61.88095 -62.73012 -62.38851 #> [29] -61.58877 -60.83060 -60.67125 -60.15010 -59.75828 -60.55059 -60.63797 #> [36] -60.29567 -60.54400 -61.15934 -61.13942 -61.41030 -60.73357 -60.60118 #> [43] -60.96689 -62.08543 -62.80453 -63.09320 -63.88834 -64.62866 -64.81606 #> [50] -64.36849 -64.40883 -64.27000 -63.42287 -63.36879 -64.08309 -64.19931 #> [57] -64.61101 -65.35471 -65.54827 -66.32577 -66.87633 -67.18129 -67.44709 #> [64] -67.80994 -67.30317 -67.33756 -67.62184 -67.82301 -67.74470 -67.52153 #> [71] -67.34144 -67.69509 -68.26505 -68.98532 -69.38948 -70.09331 -70.67423 #> [78] -71.96018 -72.19835 -72.44449 -72.47968 -72.36090 -72.43986 -72.66049 #> [85] -72.78873 -73.30495 -73.02760 -72.90529 -72.61466 -72.22758 -71.97392 #> [92] -71.33158 #>  #> $Venezuela$y #>  [1] 11.7762841 11.5399936 11.4232824 10.9694599 10.4464945  9.8656514 #>  [7]  9.0722631  9.1371945  9.8599928 10.2119351 10.9689690 11.3754817 #> [13] 11.8468224 12.1623070 11.4596109 11.4433845 10.8857441 10.5546532 #> [19] 10.5458682 10.6486268 10.2007989 10.0772147 10.3895987 10.6414180 #> [25] 10.7017244 10.7156253 10.4202687  9.9482045  9.8730669  9.3813398 #> [31]  8.5801743  8.6027569  8.3670348  7.7796030  7.4149999  7.0439114 #> [37]  6.8565844  6.6960774  6.2342968  5.9590681  5.2002772  4.9180980 #> [43]  4.5364676  4.1621235  4.0069650  3.7705712  4.0205301  4.1484809 #> [49]  4.0564452  3.7972104  3.1267862  2.4970055  2.4110676  2.2008996 #> [55]  1.9163691  1.4928549  1.3287306  1.0952823  0.7892545  0.7244522 #> [61]  1.2533605  2.2506381  2.6002809  2.8206550  3.3184541  3.5423422 #> [67]  3.8394817  4.5039373  5.2211286  5.5568704  6.0954680  6.2673180 #> [73]  6.1532681  6.2068049  6.0998605  6.9603765  7.0877847  6.9916149 #> [79]  7.3404308  7.4237849  7.6325060  8.0026385  8.4052754  8.6252878 #> [85]  9.0850272  9.1519998  9.7367703 10.4503443 10.8219754 11.1087021 #> [91] 11.6086716 11.7762841 #>  #> $Venezuela$isHole #> [1] FALSE #>  #>  #> $Ukraine #> $Ukraine$x #>  [1] 31.78600 32.15941 32.41206 32.71576 33.75270 34.39173 34.14198 34.22482 #>  [9] 35.02218 35.37792 35.35612 36.62617 37.39346 38.01063 38.59499 40.06906 #> [17] 40.08079 39.67466 39.89563 39.73828 38.77058 38.25511 38.22354 37.42514 #> [25] 36.75985 35.82368 34.96234 35.02079 35.51001 36.53000 36.33471 35.24000 #> [33] 33.88251 33.32642 33.54692 32.45417 32.63080 33.58816 33.29857 31.74414 #> [41] 31.67531 30.74875 30.37761 29.60329 29.14972 28.67978 28.23355 28.48527 #> [49] 28.65999 28.93372 28.86297 29.07211 29.17065 29.75997 30.02466 29.83821 #> [57] 29.90885 29.55967 29.41514 29.05087 29.12270 28.67089 28.25955 27.52254 #> [65] 26.85782 26.61934 26.19745 25.94594 25.20774 24.86632 24.40206 23.76096 #> [73] 23.14224 22.71053 22.64082 22.08561 22.28084 22.55814 22.77642 22.51845 #> [81] 23.42651 23.92276 24.02999 23.52707 24.00508 24.55311 25.32779 26.33796 #> [89] 27.45407 28.24162 28.61761 28.99284 29.25494 30.15736 30.55512 30.61945 #> [97] 30.92755 31.78600 #>  #> $Ukraine$y #>  [1] 52.10168 52.06127 52.28869 52.23847 52.33507 51.76888 51.56641 51.25599 #>  [9] 51.20757 50.77396 50.57720 50.22559 50.38395 49.91566 49.92646 49.60106 #> [17] 49.30743 48.78382 48.23241 47.89894 47.82561 47.54640 47.10219 47.02222 #> [25] 46.69870 46.64596 46.27320 45.65122 45.40999 45.46999 45.11322 44.94000 #> [33] 44.36148 44.56488 45.03477 45.32747 45.51919 45.85157 46.08060 46.33335 #> [41] 46.70625 46.58310 46.03241 45.29331 45.46493 45.30403 45.48828 45.59691 #> [49] 45.93999 46.25883 46.43789 46.51768 46.37926 46.34999 46.42394 46.52533 #> [57] 46.67436 46.92858 47.34665 47.51023 47.84910 48.11815 48.15556 48.46712 #> [65] 48.36821 48.22073 48.22088 47.98715 47.89106 47.73753 47.98188 47.98560 #> [73] 48.09634 47.88219 48.15024 48.42226 48.82539 49.08574 49.02740 49.47677 #> [81] 50.30851 50.42488 50.70541 51.57845 51.61744 51.88846 51.91066 51.83229 #> [89] 51.59230 51.57223 51.42771 51.60204 51.36823 51.41614 51.31950 51.82281 #> [97] 52.04235 52.10168 #>  #> $Ukraine$isHole #> [1] FALSE #>  #>  #> $Namibia #> $Namibia$x #>  [1] 16.34498 15.60182 15.21047 14.98971 14.74321 14.40814 14.38572 14.25771 #>  [9] 13.86864 13.35250 12.82685 12.60856 11.79492 11.73420 12.21546 12.81408 #> [17] 13.46236 14.05850 14.20971 18.26331 18.95619 21.37718 23.21505 24.03386 #> [25] 24.68235 25.07695 25.08444 24.52071 24.21736 23.57901 23.19686 21.65504 #> [33] 20.91064 20.88113 19.89546 19.89577 19.89473 19.00213 18.46490 17.83615 #> [41] 17.38750 17.21893 16.82402 16.34498 #>  #> $Namibia$y #>  [1] -28.57671 -27.82125 -27.09096 -26.11737 -25.39292 -23.85301 -22.65665 #>  [8] -22.11121 -21.69904 -20.87283 -19.67317 -19.04535 -18.06913 -17.30189 #> [15] -17.11167 -16.94134 -16.97121 -17.42338 -17.35310 -17.30995 -17.78909 #> [22] -17.93064 -17.52312 -17.29584 -17.35341 -17.57882 -17.66182 -17.88712 #> [29] -17.88935 -18.28126 -17.86904 -18.21915 -18.25222 -21.81433 -21.84916 #> [36] -24.76779 -28.46110 -28.97244 -29.04546 -28.85638 -28.78351 -28.35594 #> [43] -28.08216 -28.57671 #>  #> $Namibia$isHole #> [1] FALSE #>  #>  #> $Mozambique #> $Mozambique$x #>  [1] 34.55999 35.31240 36.51408 36.77515 37.47128 37.82764 38.42756 39.52103 #>  [9] 40.31659 40.47839 40.43725 40.56081 40.59962 40.77548 40.47725 40.08926 #> [17] 39.45256 38.53835 37.41113 36.28128 35.89650 35.19840 34.78638 34.70189 #> [25] 35.17613 35.37343 35.38585 35.56255 35.53393 35.37177 35.60747 35.45875 #> [33] 35.04073 34.21582 33.01321 32.57463 32.66036 32.91596 32.83012 32.07167 #> [41] 31.98578 31.83778 31.75241 31.93059 31.67040 31.19141 32.24499 32.50869 #> [49] 32.65974 32.77271 32.61199 32.65489 32.84986 32.84764 32.32824 31.85204 #> [57] 31.63650 31.17306 30.33895 30.27426 30.17948 33.21402 33.78970 34.06483 #> [65] 34.45963 34.51767 34.30729 34.38129 35.03381 35.33906 35.77190 35.68685 #> [73] 35.26796 34.90715 34.55999 34.28001 34.55999 #>  #> $Mozambique$y #>  [1] -11.52002 -11.43915 -11.72094 -11.59454 -11.56875 -11.26877 -11.28520 #>  [8] -10.89685 -10.31710 -10.76544 -11.76171 -12.63918 -14.20198 -14.69176 #> [15] -15.40629 -16.10077 -16.72089 -17.10102 -17.58637 -18.65969 -18.84226 #> [22] -19.55281 -19.78401 -20.49704 -21.25436 -21.84084 -22.14000 -22.09000 #> [29] -23.07079 -23.53536 -23.70656 -24.12261 -24.47835 -24.81631 -25.35757 #> [36] -25.72732 -26.14858 -26.21587 -26.74219 -26.73382 -26.29178 -25.84333 #> [43] -25.48428 -24.36942 -23.65897 -22.25151 -21.11649 -20.39529 -20.30429 #> [50] -19.71559 -19.41938 -18.67209 -17.97906 -16.71340 -16.39207 -16.31942 #> [57] -16.07199 -15.86094 -15.88084 -15.50779 -14.79610 -13.97186 -14.45183 #> [64] -14.35995 -14.61301 -15.01371 -15.47864 -16.18356 -16.80130 -16.10744 #> [71] -15.89686 -14.61105 -13.88783 -13.56542 -13.58000 -12.28003 -11.52002 #>  #> $Mozambique$isHole #> [1] FALSE #>  #>  #> $France1 #> $France1$x #>  [1]  3.5881844  4.2860230  4.7992216  5.6740520  5.8977592  6.1863204 #>  [7]  6.6582296  8.0992786  7.5936764  7.4667591  7.1922022  6.7365711 #> [13]  6.7687138  6.0373890  6.0226095  6.5000997  6.8435930  6.8023552 #> [19]  7.0966525  6.7499553  7.0075623  7.5495964  7.4351848  6.5292452 #> [25]  4.5569625  3.1004106  2.9859990  1.8267932  0.7015906  0.3380469 #> [31] -1.5027710 -1.9013513 -1.3842252 -1.1937976 -2.2257242 -2.9632761 #> [37] -4.4915549 -4.5923498 -3.2958140 -1.6165108 -1.9334940 -0.9894690 #> [43]  1.3387610  1.6390011  2.5135730  2.6584221  3.1232516  3.5881844 #>  #> $France1$y #>  [1] 50.37899 49.90750 49.98537 49.52948 49.44267 49.46380 49.20196 49.01778 #>  [9] 48.33302 47.62058 47.44977 47.54180 47.28771 46.72578 46.27299 46.42967 #> [17] 45.99115 45.70858 45.33310 45.02852 44.25477 44.12790 43.69384 43.12889 #> [25] 43.39965 43.07520 42.47302 42.34338 42.79573 42.57955 43.03401 43.42280 #> [33] 44.02261 46.01492 47.06436 47.57033 47.95495 48.68416 48.90169 48.64442 #> [41] 49.77634 49.34738 50.12717 50.94661 51.14851 50.79685 50.78036 50.37899 #>  #> $France1$isHole #> [1] FALSE #>  #>  #> $France2 #> $France2$x #> [1] 9.560016 9.229752 8.775723 8.544213 8.746009 9.390001 9.560016 #>  #> $France2$y #> [1] 42.15249 41.38001 41.58361 42.25652 42.62812 43.00998 42.15249 #>  #> $France2$isHole #> [1] FALSE #>  #>  #> $Finland #> $Finland$x #>  [1] 28.59193 28.44594 29.97743 29.05459 30.21765 29.54443 30.44468 30.03587 #>  [9] 31.51609 31.13999 30.21111 28.07000 26.25517 24.49662 22.86969 22.29076 #> [17] 21.32224 21.54487 21.05921 21.53603 22.44274 24.73051 25.39807 25.29404 #> [25] 23.90338 23.56588 23.53947 21.97853 20.64559 21.24494 22.35624 23.66205 #> [33] 24.73568 25.68921 26.17962 27.73229 29.01557 28.59193 #>  #> $Finland$y #>  [1] 69.06478 68.36461 67.69830 66.94429 65.80598 64.94867 64.20445 63.55281 #>  [9] 62.86769 62.35769 61.78003 60.50352 60.42396 60.05732 59.84637 60.39192 #> [17] 60.72017 61.70533 62.60739 63.18974 63.81781 64.90234 65.11143 65.53435 #> [25] 66.00693 66.39605 67.93601 68.61685 69.10625 69.37044 68.84174 68.89125 #> [33] 68.64956 69.09211 69.82530 70.16419 69.76649 69.06478 #>  #> $Finland$isHole #> [1] FALSE #>  #>  #> $Afghanistan #> $Afghanistan$x #>  [1] 61.21082 62.23065 62.98466 63.19354 63.98290 64.54648 64.74611 65.58895 #>  [9] 65.74563 66.21738 66.51861 67.07578 67.83000 68.13556 68.85945 69.19627 #> [17] 69.51879 70.11658 70.27057 70.37630 70.80682 71.34813 71.23940 71.54192 #> [25] 71.44869 71.84464 72.19304 72.63689 73.26006 73.94870 74.98000 75.15803 #> [33] 74.57589 74.06755 72.92002 71.84629 71.26235 71.49877 71.61308 71.11502 #> [41] 71.15677 70.88180 69.93054 70.32359 69.68715 69.26252 69.31776 68.92668 #> [49] 68.55693 67.79269 67.68339 66.93889 66.38146 66.34647 65.04686 64.35042 #> [57] 64.14800 63.55026 62.54986 60.87425 61.78122 61.69931 60.94194 60.86365 #> [65] 60.53608 60.96370 60.52843 60.80319 61.21082 #>  #> $Afghanistan$y #>  [1] 35.65007 35.27066 35.40404 35.85717 36.00796 36.31207 37.11182 37.30522 #>  [9] 37.66116 37.39379 37.36278 37.35614 37.14499 37.02312 37.34434 37.15114 #> [17] 37.60900 37.58822 37.73516 38.13840 38.48628 38.25891 37.95327 37.90577 #> [25] 37.06564 36.73817 36.94829 37.04756 37.49526 37.42157 37.41999 37.13303 #> [33] 37.02084 36.83618 36.72001 36.50994 36.07439 35.65056 35.15320 34.73313 #> [41] 34.34891 33.98886 34.02012 33.35853 33.10550 32.50194 31.90141 31.62019 #> [49] 31.71331 31.58293 31.30315 31.30491 30.73890 29.88794 29.47218 29.56003 #> [57] 29.34082 29.46833 29.31857 29.82924 30.73585 31.37951 31.54807 32.18292 #> [65] 32.98127 33.52883 33.67645 34.40410 35.65007 #>  #> $Afghanistan$isHole #> [1] FALSE #>  #>  #> $Zambia #> $Zambia$x #>  [1] 32.75938 33.23139 33.48569 33.31531 33.11429 33.30642 32.99176 32.68817 #>  [9] 33.21402 30.17948 30.27426 29.51683 28.94746 28.82587 28.46791 27.59824 #> [17] 27.04443 26.70677 26.38194 25.26423 25.08444 25.07695 24.68235 24.03386 #> [25] 23.21505 22.56248 21.88784 21.93389 24.01614 23.93092 24.07991 23.90415 #> [33] 24.01789 23.91222 24.25716 24.31452 24.78317 25.41812 25.75231 26.55309 #> [41] 27.16442 27.38880 28.15511 28.52356 28.93429 29.69961 29.61600 29.34155 #> [49] 28.64242 28.37225 28.49607 28.67368 28.44987 28.73487 29.00291 30.34609 #> [57] 30.74002 31.15775 31.55635 32.19186 32.75938 #>  #> $Zambia$y #>  [1]  -9.230599  -9.676722 -10.525559 -10.796550 -11.607198 -12.435778 #>  [7] -12.783871 -13.712858 -13.971860 -14.796099 -15.507787 -15.644678 #> [13] -16.043051 -16.389749 -16.468400 -17.290831 -17.938026 -17.961229 #> [19] -17.846042 -17.736540 -17.661816 -17.578823 -17.353411 -17.295843 #> [25] -17.523116 -16.898451 -16.080310 -12.898437 -12.911046 -12.565848 #> [31] -12.191297 -11.722282 -11.237298 -10.926826 -10.951993 -11.262826 #> [37] -11.238694 -11.330936 -11.784965 -11.924440 -11.608748 -12.132747 #> [43] -12.272481 -12.698604 -13.248958 -13.257227 -12.178895 -12.360744 #> [49] -11.971569 -11.793647 -10.789884  -9.605925  -9.164918  -8.526559 #> [55]  -8.407032  -8.238257  -8.340007  -8.594579  -8.762049  -8.930359 #> [61]  -9.230599 #>  #> $Zambia$isHole #> [1] FALSE #>  #>  #> $Myanmar #> $Myanmar$x #>  [1]  99.54331  98.95968  98.25372  97.79778  97.37590  97.85912  98.49376 #>  [8]  98.90335  98.53738  98.19207  98.43082  99.09776  99.21201  99.19635 #> [15]  99.58729  99.03812  98.55355  98.45717  98.76455  98.42834  98.50957 #> [22]  98.10360  97.77773  97.59707  97.16454  96.50577  95.36935  94.80840 #> [29]  94.18880  94.53349  94.32482  93.54099  93.66325  93.07828  92.36855 #> [36]  92.30323  92.65226  92.67272  93.16613  93.06029  93.28633  93.32519 #> [43]  94.10674  94.55266  94.60325  95.15515  95.12477  96.41937  97.13400 #> [50]  97.05199  97.40256  97.32711  97.91199  98.24623  98.68269  98.71209 #> [57]  98.67184  97.72461  97.60472  98.66026  98.89875  99.53199  99.24090 #> [64]  99.98349 100.41654 101.15003 101.18001 100.32910 100.11599  99.54331 #>  #> $Myanmar$y #>  [1] 20.18660 19.75298 19.70820 18.62708 18.44544 17.56795 16.83784 16.17782 #>  [9] 15.30850 15.12370 14.62203 13.82750 13.26929 12.80475 11.89276 10.96055 #> [17]  9.93296 10.67527 11.44129 12.03299 13.12238 13.64046 14.83729 16.10057 #> [25] 16.92873 16.42724 15.71439 15.80345 16.03794 17.27724 18.21351 19.36649 #> [33] 19.72696 19.85514 20.67088 21.47549 21.32405 22.04124 22.27846 22.70311 #> [41] 23.04366 24.07856 23.85074 24.67524 25.16250 26.00131 26.57357 27.26459 #> [49] 27.08377 27.69906 27.88254 28.26158 28.33595 27.74722 27.50881 26.74354 #> [57] 25.91870 25.08364 23.89740 24.06329 23.14272 22.94904 22.11831 21.74294 #> [65] 21.55884 21.84998 21.43657 20.78612 20.41785 20.18660 #>  #> $Myanmar$isHole #> [1] FALSE #>  #>  #> $Morocco #> $Morocco$x #>  [1]  -5.193863  -4.591006  -3.640057  -2.604306  -2.169914  -1.792986 #>  [7]  -1.733455  -1.388049  -1.124551  -1.307899  -2.616605  -3.068980 #> [13]  -3.647498  -3.690441  -4.859646  -5.242129  -6.060632  -7.059228 #> [19]  -8.674116  -8.670000 -13.166000 -12.618837 -11.688919 -10.900957 #> [25] -10.399592  -9.564811  -9.814718  -9.434793  -9.300693  -8.657476 #> [31]  -7.654178  -6.912544  -6.244342  -5.929994  -5.193863 #>  #> $Morocco$y #>  [1] 35.75518 35.33071 35.39986 35.17909 35.16840 34.52792 33.91971 32.86402 #>  [9] 32.65152 32.26289 32.09435 31.72450 31.63729 30.89695 30.50119 30.00044 #> [17] 29.73170 29.57923 28.84129 27.66900 27.68200 28.03819 28.14864 28.83214 #> [25] 29.09859 29.93357 31.17774 32.03810 32.56468 33.24025 33.69706 34.11048 #> [33] 35.14587 35.75999 35.75518 #>  #> $Morocco$isHole #> [1] FALSE #>  #>  #> $Spain #> $Spain$x #>  [1] -9.0348177 -8.9844332 -9.3928837 -7.9781897 -6.7544917 -5.4118864 #>  [7] -4.3478428 -3.5175317 -1.9013513 -1.5027710  0.3380469  0.7015906 #> [13]  1.8267932  2.9859990  3.0394841  2.0918417  0.8105245  0.7213310 #> [19]  0.1066915 -0.2787113  0.1112907 -0.4671236 -0.6833895 -1.4383821 #> [25] -2.1464526 -3.4157808 -4.3689009 -4.9952193 -5.3771598 -5.8664323 #> [31] -6.2366939 -6.5201908 -7.4537256 -7.5371055 -7.1665079 -7.0292812 #> [37] -7.3740922 -7.0980367 -7.4986324 -7.0665916 -7.0264131 -6.8640199 #> [43] -6.8511267 -6.3890877 -6.6686055 -7.2513090 -7.4225130 -8.0131746 #> [49] -8.2638570 -8.6719458 -9.0348177 #>  #> $Spain$y #>  [1] 41.88057 42.59278 43.02662 43.74834 43.56791 43.57424 43.40345 43.45590 #>  [9] 43.42280 43.03401 42.57955 42.79573 42.34338 42.47302 41.89212 41.22609 #> [17] 41.01473 40.67832 40.12393 39.30998 38.73851 38.29237 37.64235 37.44306 #> [25] 36.67414 36.65890 36.67784 36.32471 35.94685 36.02982 36.36768 36.94291 #> [33] 37.09779 37.42890 37.80389 38.07576 38.37306 39.03007 39.62957 39.71189 #> [41] 40.18452 40.33087 41.11108 41.38182 41.88339 41.91835 41.79207 41.79089 #> [49] 42.28047 42.13469 41.88057 #>  #> $Spain$isHole #> [1] FALSE #>  #>  #> $Botswana #> $Botswana$x #>  [1] 25.64916 25.85039 26.16479 27.29650 27.72475 27.72723 28.02137 28.79466 #>  [9] 29.43219 28.01724 27.11941 26.78641 26.48575 25.94165 25.76585 25.66467 #> [17] 25.02517 24.21127 23.73357 23.31210 22.82427 22.57953 22.10597 21.60590 #> [25] 20.88961 20.66647 20.75861 20.16573 19.89577 19.89546 20.88113 20.91064 #> [33] 21.65504 23.19686 23.57901 24.21736 24.52071 25.08444 25.26423 25.64916 #>  #> $Botswana$y #>  [1] -18.53603 -18.71441 -19.29309 -20.39152 -20.49906 -20.85180 -21.48598 #>  [8] -21.63945 -22.09131 -22.82775 -23.57432 -24.24069 -24.61633 -24.69637 #> [15] -25.17485 -25.48682 -25.71967 -25.67022 -25.39013 -25.26869 -25.50046 #> [22] -25.97945 -26.28026 -26.72653 -26.82854 -26.47745 -25.86814 -24.91796 #> [29] -24.76779 -21.84916 -21.81433 -18.25222 -18.21915 -17.86904 -18.28126 #> [36] -17.88935 -17.88712 -17.66182 -17.73654 -18.53603 #>  #> $Botswana$isHole #> [1] FALSE #>  #>  #> $`S. Sudan` #> $`S. Sudan`$x #>  [1] 33.96339 33.97498 33.82550 33.29480 32.95418 33.56829 34.07510 34.25032 #>  [9] 34.70702 35.29801 34.62020 34.00500 33.39000 32.68642 31.88145 31.24556 #> [17] 30.83385 29.95349 29.71600 29.15908 28.69668 28.42899 27.97998 27.37423 #> [25] 27.21341 26.46591 26.21342 25.79665 25.12413 25.11493 24.56737 23.88698 #> [33] 24.19407 24.53742 24.79493 25.06960 25.79063 25.96231 26.47733 26.75201 #> [41] 27.11252 27.83355 27.97089 28.96660 29.00093 29.51595 29.61896 29.99664 #> [49] 30.83784 31.35286 31.85072 32.40007 32.31423 32.07389 32.67475 32.74342 #> [57] 33.20694 33.08677 33.20694 33.72196 33.84213 33.82496 33.96339 #>  #> $`S. Sudan`$y #>  [1]  9.464285  8.684560  8.379160  8.354580  7.784970  7.713340  7.225950 #>  [8]  6.826070  6.594220  5.506000  4.847123  4.249885  3.790000  3.792320 #> [15]  3.558270  3.781900  3.509170  4.173700  4.600805  4.389267  4.455077 #> [22]  4.287155  4.408413  5.233944  5.550953  5.946717  6.546603  6.979316 #> [29]  7.500085  7.825104  8.229188  8.619730  8.728696  8.917538  9.810241 #> [36] 10.273760 10.411099 10.136421  9.552730  9.466893  9.638567  9.604232 #> [43]  9.398224  9.398224  9.604232  9.793074 10.084919 10.290927  9.707237 #> [50]  9.810241 10.531271 11.080626 11.681484 11.973330 12.024832 12.248008 #> [57] 12.179338 11.441141 10.720112 10.325262  9.981915  9.484061  9.464285 #>  #> $`S. Sudan`$isHole #> [1] FALSE #>  #>  #> $`Central African Rep.` #> $`Central African Rep.`$x #>  [1] 15.27946 16.10623 16.29056 16.45618 16.70599 17.96493 18.38955 18.91102 #>  [9] 18.81201 19.09401 20.05969 21.00087 21.72382 22.23113 22.86417 22.97754 #> [17] 23.55430 23.55725 23.39478 23.45901 23.80581 24.56737 25.11493 25.12413 #> [25] 25.79665 26.21342 26.46591 27.21341 27.37423 27.04407 26.40276 25.65046 #> [33] 25.27880 25.12883 24.80503 24.41053 23.29721 22.84148 22.70412 22.40512 #> [41] 21.65912 20.92759 20.29068 19.46778 18.93231 18.54298 18.45307 17.80990 #> [49] 17.13304 16.53706 16.01285 15.90738 15.86273 15.40540 15.03622 14.95095 #> [57] 14.47837 14.55894 14.45941 14.53656 14.77655 15.27946 #>  #> $`Central African Rep.`$y #>  [1]  7.421925  7.497088  7.754307  7.734774  7.508328  7.890914  8.281304 #>  [8]  8.630895  8.982915  9.074847  9.012706  9.475985 10.567056 10.971889 #> [15] 11.142395 10.714463 10.089255  9.681218  9.265068  8.954286  8.666319 #> [22]  8.229188  7.825104  7.500085  6.979316  6.546603  5.946717  5.550953 #> [29]  5.233944  5.127853  5.150875  5.256088  5.170408  4.927245  4.897247 #> [36]  5.108784  4.609693  4.710126  4.633051  4.029160  4.224342  4.322786 #> [43]  4.691678  5.031528  4.709506  4.201785  3.504386  3.560196  3.728197 #> [50]  3.198255  2.267640  2.557389  3.013537  3.335301  3.851367  4.210389 #> [57]  4.732605  5.030598  5.451761  6.226959  6.408498  7.421925 #>  #> $`Central African Rep.`$isHole #> [1] FALSE #>  #>  #> $Madagascar #> $Madagascar$x #>  [1] 49.54352 49.80898 50.05651 50.21743 50.47654 50.37711 50.20027 49.86061 #>  [9] 49.67261 49.86334 49.77456 49.49861 49.43562 49.04179 48.54854 47.93075 #> [17] 47.54772 47.09576 46.28248 45.40951 44.83357 44.03972 43.76377 43.69778 #> [25] 43.34565 43.25419 43.43330 43.89368 43.89637 44.37433 44.46440 44.23242 #> [33] 44.04298 43.96308 44.31247 44.44652 44.94494 45.50273 45.87299 46.31224 #> [41] 46.88218 47.70513 48.00521 47.86905 48.29383 48.84506 48.86351 49.19465 #> [49] 49.54352 #>  #> $Madagascar$y #>  [1] -12.46983 -12.89528 -13.55576 -14.75879 -15.22651 -15.70607 -16.00026 #>  [8] -15.41425 -15.71020 -16.45104 -16.87504 -17.10604 -17.95306 -19.11878 #> [15] -20.49689 -22.39150 -23.78196 -24.94163 -25.17846 -25.60143 -25.34610 #> [22] -24.98835 -24.46068 -23.57412 -22.77690 -22.05741 -21.33648 -21.16331 #> [29] -20.83046 -20.07237 -19.43545 -18.96199 -18.33139 -17.40994 -16.85050 #> [36] -16.21622 -16.17937 -15.97437 -15.79345 -15.78002 -15.21018 -14.59430 #> [43] -14.09123 -13.66387 -13.78407 -13.08917 -12.48787 -12.04056 -12.46983 #>  #> $Madagascar$isHole #> [1] FALSE #>  #>  #> $Turkmenistan #> $Turkmenistan$x #>  [1] 61.21082 61.12307 60.37764 59.23476 58.43615 57.33043 56.61937 56.18037 #>  [9] 55.51158 54.80030 53.92160 53.73551 53.88093 53.10103 53.35781 52.69397 #> [17] 52.91525 53.85814 54.73685 54.00831 53.72171 52.91675 52.81469 52.50246 #> [25] 52.94429 54.07942 54.75535 55.45525 55.96819 57.09639 56.93222 57.78653 #> [33] 58.62901 59.97642 60.08334 60.46595 61.54718 61.88271 62.37426 63.51801 #> [41] 64.17022 65.21600 66.54615 66.51861 66.21738 65.74563 65.58895 64.74611 #> [49] 64.54648 63.98290 63.19354 62.98466 62.23065 61.21082 #>  #> $Turkmenistan$y #>  [1] 35.65007 36.49160 36.52738 37.41299 37.52231 38.02923 38.12139 37.93513 #>  [9] 37.96412 37.39242 37.19892 37.90614 38.95209 39.29057 39.97529 40.03363 #> [17] 40.87652 40.63103 40.95101 41.55121 42.12319 41.86812 41.13537 41.78332 #> [25] 42.11603 42.32411 42.04397 41.25986 41.30864 41.32231 41.82603 42.17055 #> [33] 42.75155 42.22308 41.42515 41.22033 41.26637 41.08486 40.05389 39.36326 #> [41] 38.89241 38.40270 37.97468 37.36278 37.39379 37.66116 37.30522 37.11182 #> [49] 36.31207 36.00796 35.85717 35.40404 35.27066 35.65007 #>  #> $Turkmenistan$isHole #> [1] FALSE #>  #>  #> $Uzbekistan #> $Uzbekistan$x #>  [1] 66.51861 66.54615 65.21600 64.17022 63.51801 62.37426 61.88271 61.54718 #>  [9] 60.46595 60.08334 59.97642 58.62901 57.78653 56.93222 57.09639 55.96819 #> [17] 55.92892 58.50313 58.68999 60.23997 61.05832 62.01330 63.18579 64.90082 #> [25] 66.09801 66.02339 66.51065 66.71405 67.98586 68.25990 68.63248 69.07003 #> [33] 70.38896 70.96231 71.25925 70.42002 71.15786 71.87011 73.05542 71.77488 #> [41] 71.01420 70.60141 70.45816 70.66662 69.32949 69.01163 68.53642 67.70143 #> [49] 67.44222 68.17603 68.39203 67.83000 67.07578 66.51861 #>  #> $Uzbekistan$y #>  [1] 37.36278 37.97468 38.40270 38.89241 39.36326 40.05389 41.08486 41.26637 #>  [9] 41.22033 41.42515 42.22308 42.75155 42.17055 41.82603 41.32231 41.30864 #> [17] 44.99586 45.58680 45.50001 44.78404 44.40582 43.50448 43.65007 43.72808 #> [25] 42.99766 41.99465 41.98764 41.16844 41.13599 40.66232 40.66868 41.38424 #> [33] 42.08131 42.26615 42.16771 41.52000 41.14359 41.39290 40.86603 40.14584 #> [41] 40.24437 40.21853 40.49649 40.96021 40.72782 40.08616 39.53345 39.58048 #> [49] 39.14014 38.90155 38.15703 37.14499 37.35614 37.36278 #>  #> $Uzbekistan$isHole #> [1] FALSE #>  #>  #> $Kenya #> $Kenya$x #>  [1] 40.99300 41.58513 40.88477 40.63785 40.26304 40.12119 39.80006 39.60489 #>  [9] 39.20222 37.76690 37.69869 34.07262 33.90371 33.89357 34.18000 34.67210 #> [17] 35.03599 34.59607 34.47913 34.00500 34.62020 35.29801 35.81745 35.81745 #> [25] 36.15908 36.85509 38.12091 38.43697 38.67114 38.89251 39.55938 39.85494 #> [33] 40.76848 41.17180 41.85508 40.98105 40.99300 #>  #> $Kenya$y #>  [1] -0.8582900 -1.6832500 -2.0825500 -2.4997900 -2.5730900 -3.2776800 #>  [7] -3.6811600 -4.3465300 -4.6767700 -3.6771200 -3.0969900 -1.0598200 #> [13] -0.9500000  0.1098135  0.5150000  1.1769400  1.9058400  3.0537400 #> [19]  3.5556000  4.2498849  4.8471227  5.5060000  5.3382321  4.7769657 #> [25]  4.4478641  4.4478641  3.5986050  3.5885100  3.6160700  3.5007400 #> [31]  3.4220600  3.8387900  4.2570200  3.9190900  3.9189119  2.7845200 #> [37] -0.8582900 #>  #> $Kenya$isHole #> [1] FALSE #>  #>  #> $Germany #> $Germany$x #>  [1]  9.921906  9.939580 10.950112 10.939467 11.956252 12.518440 13.647467 #>  [8] 14.119686 14.353315 14.074521 14.437600 14.685026 14.607098 15.016996 #> [15] 14.570718 14.307013 14.056228 13.338132 12.966837 12.240111 12.415191 #> [22] 12.521024 13.031329 13.595946 13.243357 12.884103 13.025851 12.932627 #> [29] 12.620760 12.141357 11.426414 10.544504 10.402084  9.896068  9.594226 #> [36]  8.522612  8.317301  7.466759  7.593676  8.099279  6.658230  6.186320 #> [43]  6.242751  6.043073  6.156658  5.988658  6.589397  6.842870  7.092053 #> [50]  6.905140  7.100425  7.936239  8.121706  8.800734  8.572118  8.526229 #> [57]  9.282049  9.921906 #>  #> $Germany$y #>  [1] 54.98310 54.59664 54.36361 54.00869 54.19649 54.47037 54.07551 53.75703 #>  [9] 53.24817 52.98126 52.62485 52.08995 51.74519 51.10667 51.00234 51.11727 #> [17] 50.92692 50.73323 50.48408 50.26634 49.96912 49.54742 49.30707 48.87717 #> [25] 48.41611 48.28915 47.63758 47.46765 47.67239 47.70308 47.52377 47.56640 #> [33] 47.30249 47.58020 47.52506 47.83083 47.61358 47.62058 48.33302 49.01778 #> [41] 49.20196 49.46380 49.90223 50.12805 50.80372 51.85162 51.85203 52.22844 #> [49] 53.14404 53.48216 53.69393 53.74830 53.52779 54.02079 54.39565 54.96274 #> [57] 54.83087 54.98310 #>  #> $Germany$isHole #> [1] FALSE #>  #>  #> $Thailand #> $Thailand$x #>  [1] 102.58493 101.68716 100.83181 100.97847 100.09780 100.01873  99.47892 #>  [8]  99.15377  99.22240  99.87383 100.27965 100.45927 101.01733 101.62308 #> [15] 102.14119 101.81428 101.15422 101.07552 100.25960 100.08576  99.69069 #> [22]  99.51964  98.98825  98.50379  98.33966  98.15001  98.25915  98.55355 #> [29]  99.03812  99.58729  99.19635  99.21201  99.09776  98.43082  98.19207 #> [36]  98.53738  98.90335  98.49376  97.85912  97.37590  97.79778  98.25372 #> [43]  98.95968  99.54331 100.11599 100.54888 100.60629 101.28201 101.03593 #> [50] 101.05955 102.11359 102.41300 102.99871 103.20019 103.95648 104.71695 #> [57] 104.77932 105.58904 105.54434 105.21878 104.28142 102.98842 102.34810 #> [64] 102.58493 #>  #> $Thailand$y #>  [1] 12.186595 12.645740 12.627085 13.412722 13.406856 12.307001 10.846367 #>  [8]  9.963061  9.239255  9.207862  8.295153  7.429573  6.856869  6.740622 #> [15]  6.221636  5.810808  5.691384  6.204867  6.642825  6.464489  6.848213 #> [22]  7.343454  7.907993  8.382305  7.794512  8.350007  8.973923  9.932960 #> [29] 10.960546 11.892763 12.804748 13.269294 13.827503 14.622028 15.123703 #> [36] 15.308497 16.177824 16.837836 17.567946 18.445438 18.627080 19.708203 #> [43] 19.752981 20.186598 20.417850 20.109238 19.508344 19.462585 18.408928 #> [50] 17.512497 18.109102 17.932782 17.961695 18.309632 18.240954 17.428859 #> [57] 16.441865 15.570316 14.723934 14.273212 14.416743 14.225721 13.394247 #> [64] 12.186595 #>  #> $Thailand$isHole #> [1] FALSE #>  #>  #> $Iraq #> $Iraq$x #>  [1] 45.42062 46.07634 46.15179 45.64846 45.41669 46.10936 47.33466 47.84920 #>  [9] 47.68529 48.00470 48.01457 48.56797 47.97452 47.30262 46.56871 44.70950 #> [17] 41.88998 40.39999 39.19547 38.79234 41.00616 41.38397 41.28971 41.83706 #> [25] 42.34959 42.77913 43.94226 44.29345 44.77270 45.42062 #>  #> $Iraq$y #>  [1] 35.97755 35.67738 35.09326 34.74814 33.96780 33.01729 32.46916 31.70918 #>  [9] 30.98485 30.98514 30.45246 29.92678 29.97582 30.05907 29.09903 29.17889 #> [17] 31.19001 31.88999 32.16101 33.37869 34.41937 35.62832 36.35881 36.60585 #> [25] 37.22987 37.38526 37.25623 37.00151 37.17044 35.97755 #>  #> $Iraq$isHole #> [1] FALSE #>  #>  #> $Japan1 #> $Japan1$x #>  [1] 140.9764 140.5998 140.7741 140.2533 138.9755 137.2176 135.7930 135.1210 #>  [9] 135.0794 133.3403 132.1568 130.9861 132.0000 131.3328 130.6863 130.2024 #> [17] 130.4477 129.8147 129.4085 130.3539 130.8785 131.8842 132.6177 134.6083 #> [25] 135.6775 136.7238 137.3906 138.8576 139.4264 140.0548 139.8834 140.3058 #> [33] 141.3690 141.9143 141.8846 140.9595 140.9764 #>  #> $Japan1$y #>  [1] 37.14207 36.34398 35.84288 35.13811 34.66760 34.60629 33.46481 33.84907 #>  [9] 34.59654 34.37594 33.90493 33.88576 33.14999 31.45035 31.02958 31.41824 #> [17] 32.31947 32.61031 33.29606 33.60415 34.23274 34.74971 35.43339 35.73162 #> [25] 35.52713 37.30498 36.82739 37.82748 38.21596 39.43881 40.56331 41.19501 #> [33] 41.37856 39.99162 39.18086 38.17400 37.14207 #>  #> $Japan1$isHole #> [1] FALSE #>  #>  #> $Japan2 #> $Japan2$x #>  [1] 143.9102 144.6134 145.3208 145.5431 144.0597 143.1838 141.6115 141.0673 #>  [9] 139.9551 139.8175 140.3121 141.3805 141.6720 141.9676 143.1429 143.9102 #>  #> $Japan2$y #>  [1] 44.17410 43.96088 44.38473 43.26209 42.98836 41.99521 42.67879 41.58459 #>  [9] 41.56956 42.56376 43.33327 43.38882 44.77213 45.55148 44.51036 44.17410 #>  #> $Japan2$isHole #> [1] FALSE #>  #>  #> $Japan3 #> $Japan3$x #>  [1] 134.6384 134.7664 134.2034 133.7930 133.2803 133.0149 132.3631 132.3712 #>  [9] 132.9244 133.4930 133.9041 134.6384 #>  #> $Japan3$y #>  [1] 34.14923 33.80633 33.20118 33.52199 33.28957 32.70457 32.98938 33.46364 #>  [9] 34.06030 33.94462 34.36493 34.14923 #>  #> $Japan3$isHole #> [1] FALSE #>  #>  #> $Poland #> $Poland$x #>  [1] 15.01700 14.60710 14.68503 14.43760 14.07452 14.35332 14.11969 14.80290 #>  [9] 16.36348 17.62283 18.62086 18.69625 19.66064 20.89224 22.73110 23.24399 #> [17] 23.48413 23.52754 23.80493 23.79920 23.19949 23.50800 23.52707 24.02999 #> [25] 23.92276 23.42651 22.51845 22.77642 22.55814 21.60781 20.88796 20.41584 #> [33] 19.82502 19.32071 18.90957 18.85314 18.39291 17.64945 17.55457 16.86877 #> [41] 16.71948 16.17625 16.23863 15.49097 15.01700 #>  #> $Poland$y #>  [1] 51.10667 51.74519 52.08995 52.62485 52.98126 53.24817 53.75703 54.05071 #>  [9] 54.51316 54.85154 54.68261 54.43872 54.42608 54.31252 54.32754 54.22057 #> [17] 53.91250 53.47012 53.08973 52.69110 52.48698 52.02365 51.57845 50.70541 #> [25] 50.42488 50.30851 49.47677 49.02740 49.08574 49.47011 49.32877 49.43145 #> [33] 49.21713 49.57157 49.43585 49.49623 49.98863 50.04904 50.36215 50.47397 #> [41] 50.21575 50.42261 50.69773 50.78473 51.10667 #>  #> $Poland$isHole #> [1] FALSE #>  #>  #> $Somalia #> $Somalia$x #>  [1] 49.72862 50.25878 50.73202 51.11120 51.13387 51.04153 51.04531 50.83418 #>  [9] 50.55239 50.07092 49.45270 48.59455 47.74079 46.56476 45.56399 44.06815 #> [17] 43.13597 42.04157 41.81095 41.58513 40.99300 40.98105 41.85508 42.12861 #> [25] 42.76967 43.66087 44.96360 47.78942 46.94833 43.67875 43.29698 42.92812 #> [33] 42.55876 42.77685 43.14530 43.47066 43.66667 44.11780 44.61426 45.55694 #> [41] 46.64540 47.52566 48.02160 48.37878 48.94821 48.94201 48.94820 49.26776 #> [49] 49.72862 #>  #> $Somalia$y #>  [1] 11.578900 11.679570 12.021900 12.024640 11.748150 11.166510 10.640900 #>  [8] 10.279720  9.198740  8.081730  6.804660  5.339110  4.219400  2.855290 #> [15]  2.045760  1.052830  0.292200 -0.919160 -1.446470 -1.683250 -0.858290 #> [22]  2.784520  3.918912  4.234130  4.252590  4.957550  5.001620  8.003000 #> [29]  7.996877  9.183580  9.540477 10.021940 10.572580 10.926879 11.462040 #> [36] 11.277710 10.864169 10.445538 10.442205 10.698029 10.816549 11.127228 #> [43] 11.193064 11.375482 11.410622 11.394266 11.410617 11.430330 11.578900 #>  #> $Somalia$isHole #> [1] FALSE #>  #>  #> $Yemen #> $Yemen$x #>  [1] 53.10857 52.38521 52.19173 52.16816 51.17252 49.57458 48.67923 48.23895 #>  [9] 47.93891 47.35445 46.71708 45.87759 45.62505 45.40646 45.14436 44.98953 #> [17] 44.49458 44.17511 43.48296 43.22287 43.25145 43.08794 42.89225 42.60487 #> [25] 42.80502 42.70244 42.82367 42.77933 43.21838 43.11580 43.38079 43.79152 #> [33] 44.06261 45.21665 45.40000 46.36666 46.74999 47.00000 47.46669 48.18334 #> [41] 49.11667 52.00001 52.78218 53.10857 #>  #> $Yemen$y #>  [1] 16.65105 16.38241 15.93843 15.59742 15.17525 14.70877 14.00320 13.94809 #>  [9] 14.00723 13.59222 13.39970 13.34776 13.29095 13.02691 12.95394 12.69959 #> [17] 12.72165 12.58595 12.63680 13.22095 13.76758 14.06263 14.80225 15.21334 #> [25] 15.26196 15.71889 15.91174 16.34789 16.66689 17.08844 17.57999 17.31998 #> [33] 17.41036 17.43333 17.33334 17.23332 17.28334 16.95000 17.11668 18.16667 #> [41] 18.61667 19.00000 17.34974 16.65105 #>  #> $Yemen$isHole #> [1] FALSE #>  #>  #> $`Papua New Guinea1` #> $`Papua New Guinea1`$x #>  [1] 147.1919 148.0846 148.7341 149.3068 149.2666 150.0387 149.7388 150.8016 #>  [9] 150.6906 150.0284 149.7823 148.9231 147.9130 147.1354 146.5679 146.0485 #> [17] 144.7442 143.8971 143.2864 143.4139 142.6284 142.0683 141.0339 141.0171 #> [25] 141.0002 142.7352 144.5840 145.2732 145.8298 145.9819 147.6481 147.8911 #> [33] 146.9709 147.1919 #>  #> $`Papua New Guinea1`$y #>  [1]  -7.388024  -8.044108  -9.104664  -9.071436  -9.514406  -9.684318 #>  [7]  -9.872937 -10.293687 -10.582713 -10.652476 -10.393267 -10.280923 #> [13] -10.130441  -9.492444  -8.942555  -8.067414  -7.630128  -7.915330 #> [19]  -8.245491  -8.983069  -9.326821  -9.159596  -9.117893  -5.859022 #> [25]  -2.600151  -3.289153  -3.861418  -4.373738  -4.876498  -5.465609 #> [31]  -6.083659  -6.614015  -6.721657  -7.388024 #>  #> $`Papua New Guinea1`$isHole #> [1] FALSE #>  #>  #> $`Papua New Guinea2` #> $`Papua New Guinea2`$x #>  [1] 151.9828 151.4591 151.3014 150.7544 150.2412 149.7100 148.8901 148.3189 #>  [9] 148.4018 149.2984 149.8456 149.9963 150.1398 150.2369 150.8075 151.0897 #> [17] 151.6479 151.5379 152.1368 152.3387 152.3187 151.9828 #>  #> $`Papua New Guinea2`$y #>  [1] -5.478063 -5.560280 -5.840728 -6.083763 -6.317754 -6.316513 -6.026040 #>  [8] -5.747142 -5.437756 -5.583742 -5.505503 -5.026101 -5.001348 -5.532220 #> [15] -5.455842 -5.113693 -4.757074 -4.167807 -4.148790 -4.312966 -4.867661 #> [22] -5.478063 #>  #> $`Papua New Guinea2`$isHole #> [1] FALSE #>  #>  #> $`Papua New Guinea3` #> $`Papua New Guinea3`$x #>  [1] 153.1400 152.8273 152.6387 152.4060 151.9532 151.3843 150.6620 150.9400 #>  [9] 151.4800 151.8200 152.2400 152.6400 153.0200 153.1400 #>  #> $`Papua New Guinea3`$y #>  [1] -4.499983 -4.766427 -4.176127 -3.789743 -3.462062 -3.035422 -2.741486 #>  [8] -2.500002 -2.779985 -2.999972 -3.240009 -3.659983 -3.980015 -4.499983 #>  #> $`Papua New Guinea3`$isHole #> [1] FALSE #>  #>  #> $`Papua New Guinea4` #> $`Papua New Guinea4`$x #>  [1] 155.8800 155.6000 155.1670 154.7292 154.5141 154.6525 154.7600 155.0629 #>  [9] 155.5477 156.0200 155.8800 #>  #> $`Papua New Guinea4`$y #>  [1] -6.819997 -6.919991 -6.535931 -5.900828 -5.139118 -5.042431 -5.339984 #>  [8] -5.566792 -6.200655 -6.540014 -6.819997 #>  #> $`Papua New Guinea4`$isHole #> [1] FALSE #>  #>  #> $Cameroon #> $Cameroon$x #>  [1] 13.075822 12.951334 12.359380 11.751665 11.276449  9.649158  9.795196 #>  [8]  9.404367  8.948116  8.744924  8.488816  8.500288  8.757533  9.233163 #> [15]  9.522706 10.118277 10.497375 11.058788 11.745774 11.839309 12.063946 #> [22] 12.218872 12.753672 12.955468 13.167600 13.308676 13.572950 14.415379 #> [29] 14.468192 14.577178 14.181336 14.213531 14.495787 14.893386 14.960152 #> [36] 14.923565 15.467873 14.909354 14.627201 14.171466 13.954218 14.544467 #> [43] 14.979996 15.120866 15.436092 15.279460 14.776545 14.536560 14.459407 #> [50] 14.558936 14.478372 14.950953 15.036220 15.405396 15.862732 15.907381 #> [57] 16.012852 15.940919 15.146342 14.337813 13.075822 #>  #> $Cameroon$y #>  [1]  2.267097  2.321616  2.192812  2.326758  2.261051  2.283866  3.073404 #>  [8]  3.734527  3.904129  4.352215  4.495617  4.771983  5.479666  6.444491 #> [15]  6.453482  7.038770  7.055358  6.644427  6.981383  7.397042  7.799808 #> [22]  8.305824  8.717763  9.417772  9.640626 10.160362 10.798566 11.572369 #> [29] 11.904752 12.085361 12.483657 12.802035 12.859396 12.219048 11.555574 #> [36] 10.891325  9.982337  9.992129  9.920919 10.021378  9.549495  8.965861 #> [43]  8.796104  8.382150  7.692812  7.421925  6.408498  6.226959  5.451761 #> [50]  5.030598  4.732605  4.210389  3.851367  3.335301  3.013537  2.557389 #> [57]  2.267640  1.727673  1.964015  2.227875  2.267097 #>  #> $Cameroon$isHole #> [1] FALSE #>  #>  #> $Paraguay #> $Paraguay$x #>  [1] -62.68506 -62.29118 -62.26596 -61.78633 -60.04356 -59.11504 -58.18347 #>  [8] -58.16639 -57.87067 -57.93716 -56.88151 -56.47332 -55.79796 -55.61068 #> [15] -55.51764 -55.40075 -55.02790 -54.65283 -54.29296 -54.29348 -54.42895 #> [22] -54.62529 -54.78879 -55.69585 -56.48670 -57.60976 -58.61817 -57.63366 #> [29] -57.77722 -58.80713 -60.02897 -60.84656 -62.68506 #>  #> $Paraguay$y #>  [1] -22.24903 -21.05163 -20.51373 -19.63374 -19.34275 -19.35691 -19.86840 #>  [8] -20.17670 -20.73269 -22.09018 -22.28215 -22.08630 -22.35693 -22.65562 #> [15] -23.57200 -23.95694 -24.00127 -23.83958 -24.02101 -24.57080 -25.16218 #> [22] -25.73926 -26.62179 -27.38784 -27.54850 -27.39590 -27.12372 -25.60366 #> [29] -25.16234 -24.77146 -24.03280 -23.88071 -22.24903 #>  #> $Paraguay$isHole #> [1] FALSE #>  #>  #> $Italy1 #> $Italy1$x #>  [1] 12.376485 13.806475 13.698110 13.937630 13.141606 12.328581 12.383875 #>  [8] 12.261453 12.589237 13.526906 14.029821 15.142570 15.926191 16.169897 #> [15] 15.889346 16.785002 17.519169 18.376687 18.480247 18.293385 17.738380 #> [22] 16.869596 16.448743 17.171490 17.052841 16.635088 16.100961 15.684087 #> [29] 15.687963 15.891981 16.109332 15.718814 15.413613 14.998496 14.703268 #> [36] 14.060672 13.627985 12.888082 12.106683 11.191906 10.511948 10.200029 #> [43]  9.702488  8.888946  8.428561  7.850767  7.435185  7.549596  7.007562 #> [50]  6.749955  7.096652  6.802355  6.843593  7.273851  7.755992  8.316630 #> [57]  8.489952  8.966306  9.182882  9.922837 10.363378 10.442701 11.048556 #> [64] 11.164828 12.153088 12.376485 #>  #> $Italy1$y #>  [1] 46.76756 46.50931 46.01678 45.59102 45.73669 45.38178 44.88537 44.60048 #>  [9] 44.09137 43.58773 42.76101 41.95514 41.96132 41.74029 41.54108 41.17961 #> [17] 40.87714 40.35562 40.16887 39.81077 40.27767 40.44223 39.79540 39.42470 #> [25] 38.90287 38.84357 37.98590 37.90885 38.21459 38.75094 38.96455 39.54407 #> [33] 40.04836 40.17295 40.60455 40.78635 41.18829 41.25309 41.70453 42.35543 #> [41] 42.93146 43.92001 44.03628 44.36634 44.23123 43.76715 43.69384 44.12790 #> [49] 44.25477 45.02852 45.33310 45.70858 45.99115 45.77695 45.82449 46.16364 #> [57] 46.00515 46.03693 46.44021 46.31490 46.48357 46.89355 46.75136 46.94158 #> [65] 47.11539 46.76756 #>  #> $Italy1$isHole #> [1] FALSE #>  #>  #> $Italy2 #> $Italy2$x #>  [1] 15.52038 15.16024 15.30990 15.09999 14.33523 13.82673 12.43100 12.57094 #>  [9] 13.74116 14.76125 15.52038 #>  #> $Italy2$y #>  [1] 38.23116 37.44405 37.13422 36.61999 36.99663 37.10453 37.61295 38.12638 #>  [9] 38.03497 38.14387 38.23116 #>  #> $Italy2$isHole #> [1] FALSE #>  #>  #> $Italy3 #> $Italy3$x #>  [1] 9.210012 9.809975 9.669519 9.214818 8.806936 8.428302 8.388253 8.159998 #>  [9] 8.709991 9.210012 #>  #> $Italy3$y #>  [1] 41.20999 40.50001 39.17738 39.24047 38.90662 39.17185 40.37831 40.95001 #>  [9] 40.89998 41.20999 #>  #> $Italy3$isHole #> [1] FALSE #>  #>  #> $`United Kingdom1` #> $`United Kingdom1`$x #>  [1] -3.0050048 -4.0738285 -3.0550018 -1.9592806 -2.2199882 -3.1190031 #>  [7] -2.0850093 -2.0056757 -1.1149910 -0.4304850  0.1849813  0.4699768 #> [13]  1.6815308  1.5599878  1.0505616  1.4498653  0.5503337 -0.7875175 #> [19] -2.4899975 -2.9562740 -3.6174481 -4.5425079 -5.2450232 -5.7765669 #> [25] -4.3099898 -3.4148506 -3.4227195 -4.9843672 -5.2672957 -4.2223466 #> [31] -4.7700134 -4.5799992 -3.0938307 -3.0920796 -2.9450085 -3.6147008 #> [37] -3.6300055 -4.8441691 -5.0825266 -4.7191121 -5.0479809 -5.5863977 #> [43] -5.6449987 -6.1499808 -5.7868247 -5.0099987 -4.2114945 -3.0050048 #>  #> $`United Kingdom1`$y #>  [1] 58.63500 57.55302 57.69002 57.68480 56.87002 55.97379 55.91000 55.80490 #>  [9] 54.62499 54.46438 53.32501 52.93000 52.73952 52.10000 51.80676 51.28943 #> [17] 50.76574 50.77499 50.50002 50.69688 50.22836 50.34184 49.96000 50.15968 #> [25] 51.21000 51.42601 51.42685 51.59347 51.99140 52.30136 52.84000 53.49500 #> [33] 53.40455 53.40444 53.98500 54.60094 54.61501 54.79097 55.06160 55.50847 #> [41] 55.78399 55.31115 56.27501 56.78501 57.81885 58.63001 58.55085 58.63500 #>  #> $`United Kingdom1`$isHole #> [1] FALSE #>  #>  #> $`United Kingdom2` #> $`United Kingdom2`$x #> [1] -5.661949 -6.197885 -6.953730 -7.572168 -7.366031 -7.572168 -6.733847 #> [8] -5.661949 #>  #> $`United Kingdom2`$y #> [1] 54.55460 53.86757 54.07370 54.05996 54.59584 55.13162 55.17286 54.55460 #>  #> $`United Kingdom2`$isHole #> [1] FALSE #>  #>  #> $Zimbabwe #> $Zimbabwe$x #>  [1] 31.19141 30.65987 30.32288 29.83904 29.43219 28.79466 28.02137 27.72723 #>  [9] 27.72475 27.29650 26.16479 25.85039 25.64916 25.26423 26.38194 26.70677 #> [17] 27.04443 27.59824 28.46791 28.82587 28.94746 29.51683 30.27426 30.33895 #> [25] 31.17306 31.63650 31.85204 32.32824 32.84764 32.84986 32.65489 32.61199 #> [33] 32.77271 32.65974 32.50869 32.24499 31.19141 #>  #> $Zimbabwe$y #>  [1] -22.25151 -22.15157 -22.27161 -22.10222 -22.09131 -21.63945 -21.48598 #>  [8] -20.85180 -20.49906 -20.39152 -19.29309 -18.71441 -18.53603 -17.73654 #> [15] -17.84604 -17.96123 -17.93803 -17.29083 -16.46840 -16.38975 -16.04305 #> [22] -15.64468 -15.50779 -15.88084 -15.86094 -16.07199 -16.31942 -16.39207 #> [29] -16.71340 -17.97906 -18.67209 -19.41938 -19.71559 -20.30429 -20.39529 #> [36] -21.11649 -22.25151 #>  #> $Zimbabwe$isHole #> [1] FALSE #>  #>  #> $`New Zealand1` #> $`New Zealand1`$x #>  [1] 173.0204 173.2472 173.9584 174.2476 174.2485 173.8764 173.2227 172.7112 #>  [9] 173.0801 172.3086 171.4529 171.1851 170.6167 169.8314 169.3323 168.4114 #> [17] 167.7637 166.6769 166.5091 167.0464 168.3038 168.9494 169.6678 170.5249 #> [25] 171.1251 171.5697 171.9487 172.0972 172.7986 173.0204 #>  #> $`New Zealand1`$y #>  [1] -40.91905 -41.33200 -40.92670 -41.34916 -41.77001 -42.23318 -42.97004 #>  [8] -43.37229 -43.85334 -43.86569 -44.24252 -44.89710 -45.90893 -46.35577 #> [15] -46.64124 -46.61994 -46.29020 -46.21992 -45.85270 -45.11094 -44.12397 #> [22] -43.93582 -43.55533 -43.03169 -42.51275 -41.76742 -41.51442 -40.95610 #> [29] -40.49396 -40.91905 #>  #> $`New Zealand1`$isHole #> [1] FALSE #>  #>  #> $`New Zealand2` #> $`New Zealand2`$x #>  [1] 174.6120 175.3366 175.3576 175.8089 175.9585 176.7632 177.4388 178.0104 #>  [9] 178.5171 178.2747 177.9705 177.2070 176.9400 177.0329 176.8858 176.5080 #> [17] 176.0124 175.2396 175.0679 174.6510 175.2276 174.9002 173.8240 173.8523 #> [25] 174.5748 174.7435 174.6970 174.2920 174.3190 173.8410 173.0542 172.6360 #> [33] 173.0070 173.5513 174.3294 174.6120 #>  #> $`New Zealand2`$y #>  [1] -36.15640 -37.20910 -36.52619 -36.79894 -37.55538 -37.88125 -37.96125 #>  [8] -37.57982 -37.69537 -38.58281 -39.16634 -39.14578 -39.44974 -39.87994 #> [15] -40.06598 -40.60481 -41.28962 -41.68831 -41.42589 -41.28182 -40.45924 #> [22] -39.90893 -39.50885 -39.14660 -38.79768 -38.02781 -37.38113 -36.71109 #> [29] -36.53482 -36.12198 -35.23713 -34.52911 -34.45066 -35.00618 -35.26550 #> [36] -36.15640 #>  #> $`New Zealand2`$isHole #> [1] FALSE #>  #>  #> $Vietnam #> $Vietnam$x #>  [1] 108.0502 106.7151 105.8817 105.6620 106.4268 107.3620 108.2695 108.8771 #>  [9] 109.3353 109.2001 108.3661 107.2209 106.4051 105.1583 104.7952 105.0762 #> [17] 104.3343 105.1999 106.2497 105.8105 107.4914 107.6145 107.3827 107.5645 #> [25] 107.3127 106.5560 105.9258 105.0946 103.8965 104.1834 104.8226 104.4350 #> [33] 103.2039 102.7549 102.1704 102.7070 103.5045 104.4769 105.3292 105.8112 #> [41] 106.7254 106.5673 107.0434 108.0502 #>  #> $Vietnam$y #>  [1] 21.552380 20.696851 19.752050 19.058165 18.004121 16.697457 16.079742 #>  [8] 15.276691 13.426028 11.666859 11.008321 10.364484  9.530840  8.599760 #> [15]  9.241038  9.918491 10.486544 10.889310 10.961812 11.567615 12.337206 #> [22] 13.535531 14.202441 15.202173 15.908538 16.604284 17.485315 18.666975 #> [29] 19.265181 19.624668 19.886642 20.758733 20.766562 21.675137 22.464753 #> [36] 22.708795 22.703757 22.819150 23.352063 22.976892 22.794268 22.218205 #> [43] 21.811899 21.552380 #>  #> $Vietnam$isHole #> [1] FALSE #>  #>  #> $Belarus #> $Belarus$x #>  [1] 23.48413 24.45068 25.53635 25.76843 26.58828 26.49433 27.10246 28.17671 #>  [9] 29.22951 29.37157 29.89629 30.87391 30.97184 30.75753 31.38447 31.79142 #> [17] 31.73127 32.40560 32.69364 32.30452 31.49764 31.30520 31.54002 31.78600 #> [25] 30.92755 30.61945 30.55512 30.15736 29.25494 28.99284 28.61761 28.24162 #> [33] 27.45407 26.33796 25.32779 24.55311 24.00508 23.52707 23.50800 23.19949 #> [41] 23.79920 23.80493 23.52754 23.48413 #>  #> $Belarus$y #>  [1] 53.91250 53.90570 54.28242 54.84696 55.16718 55.61511 55.78331 56.16913 #>  [9] 55.91834 55.67009 55.78946 55.55098 55.08155 54.81177 54.15706 53.97464 #> [17] 53.79403 53.61805 53.35142 53.13273 53.16743 53.07400 52.74205 52.10168 #> [25] 52.04235 51.82281 51.31950 51.41614 51.36823 51.60204 51.42771 51.57223 #> [33] 51.59230 51.83229 51.91066 51.88846 51.61744 51.57845 52.02365 52.48698 #> [41] 52.69110 53.08973 53.47012 53.91250 #>  #> $Belarus$isHole #> [1] FALSE #>  #>  #> $Romania #> $Romania$x #>  [1] 22.71053 23.14224 23.76096 24.40206 24.86632 25.20774 25.94594 26.19745 #>  [9] 26.61934 26.92418 27.23387 27.55117 28.12803 28.16002 28.05444 28.23355 #> [17] 28.67978 29.14972 29.60329 29.62654 29.14161 28.83786 28.55808 27.97011 #> [25] 27.24240 26.06516 25.56927 24.10068 23.33230 22.94483 22.65715 22.47401 #> [33] 22.70573 22.45902 22.14509 21.56202 21.48353 20.87431 20.76217 20.22019 #> [41] 21.02195 21.62651 22.09977 22.71053 #>  #> $Romania$y #>  [1] 47.88219 48.09634 47.98560 47.98188 47.73753 47.89106 47.98715 48.22088 #>  [9] 48.22073 48.12326 47.82677 47.40512 46.81048 46.37156 45.94459 45.48828 #> [17] 45.30403 45.46493 45.29331 45.03539 44.82021 44.91387 43.70746 43.81247 #> [25] 44.17599 43.94349 43.68844 43.74105 43.89701 43.82379 44.23492 44.40923 #> [33] 44.57800 44.70252 44.47842 44.76895 45.18117 45.41638 45.73457 46.12747 #> [41] 46.31609 46.99424 47.67244 47.88219 #>  #> $Romania$isHole #> [1] FALSE #>  #>  #> $`Congo (Brazzaville)` #> $`Congo (Brazzaville)`$x #>  [1] 12.99552 12.62076 12.31861 11.91496 11.09377 11.85512 11.47804 11.82096 #>  [9] 12.49570 12.57528 13.10962 13.99241 14.29921 14.42546 14.31642 13.84332 #> [17] 14.27627 14.02667 13.28263 13.00311 13.07582 14.33781 15.14634 15.94092 #> [25] 16.01285 16.53706 17.13304 17.80990 18.45307 18.39379 18.09428 17.89884 #> [33] 17.77419 17.82654 17.66355 17.63864 17.52372 16.86531 16.40709 15.97280 #> [41] 16.00629 15.75354 15.17099 14.58260 14.20903 14.14496 13.60023 13.25824 #> [49] 12.99552 #>  #> $`Congo (Brazzaville)`$y #>  [1] -4.78110320 -4.43802337 -4.60623016 -5.03798675 -3.97882659 -3.42687062 #>  [7] -2.76561899 -2.51416147 -2.39168833 -1.94851124 -2.42874033 -2.47080495 #> [13] -1.99827565 -1.33340667 -0.55262746  0.03875764  1.19692984  1.39567740 #> [19]  1.31418366  1.83089631  2.26709707  2.22787466  1.96401480  1.72767263 #> [25]  2.26763968  3.19825471  3.72819652  3.56019644  3.50438589  2.90044343 #> [31]  2.36572154  1.74183198  0.85565868  0.28892324 -0.05808400 -0.42483164 #> [37] -0.74383025 -1.22581634 -1.74092702 -2.71239227 -3.53513274 -3.85516489 #> [43] -4.34350718 -4.97023895 -4.79309214 -4.51000864 -4.50013844 -4.88295745 #> [49] -4.78110320 #>  #> $`Congo (Brazzaville)`$isHole #> [1] FALSE #>  #>  #> $Malaysia1 #> $Malaysia1$x #>  [1] 118.6183 117.8820 117.0152 115.8655 115.5191 115.1340 114.6214 113.8058 #>  [9] 112.8598 112.3803 111.7975 111.1591 110.5141 109.8302 109.6633 110.3961 #> [17] 111.1689 111.3701 111.7969 112.9956 113.7129 114.2040 114.6596 114.8696 #> [25] 115.3475 115.4057 115.4507 116.2207 116.7251 117.1296 117.6434 117.6891 #> [33] 118.3477 119.1819 119.1107 118.4397 118.6183 #>  #> $Malaysia1$y #>  [1] 4.4782024 4.1375514 4.3060941 4.3065591 3.1692384 2.8214818 1.4306882 #>  [8] 1.2175487 1.4977900 1.4101210 0.9044412 0.9764782 0.7731314 1.3381357 #> [15] 2.0064670 1.6637747 1.8506367 2.6973034 2.8858965 3.1023949 3.8935094 #> [22] 4.5258739 4.0076368 4.3483137 4.3166361 4.9552276 5.4477298 6.1431912 #> [29] 6.9247714 6.9280529 6.4221664 5.9874901 5.7086958 5.4078356 5.0161282 #> [36] 4.9665189 4.4782024 #>  #> $Malaysia1$isHole #> [1] FALSE #>  #>  #> $Malaysia2 #> $Malaysia2$x #>  [1] 101.0755 101.1542 101.8143 102.1412 102.3711 102.9617 103.3812 103.4386 #>  [9] 103.3321 103.4294 103.5024 103.8547 104.2479 104.2288 103.5197 102.5736 #> [17] 101.3906 101.2735 100.6954 100.5574 100.1967 100.3063 100.0858 100.2596 #> [25] 101.0755 #>  #> $Malaysia2$y #>  [1] 6.204867 5.691384 5.810808 6.221636 6.128205 5.524495 4.855001 4.181606 #>  [9] 3.726698 3.382869 2.791019 2.515454 1.631141 1.293048 1.226334 1.967115 #> [17] 2.760814 3.270292 3.939140 4.767280 5.312493 6.040562 6.464489 6.642825 #> [25] 6.204867 #>  #> $Malaysia2$isHole #> [1] FALSE #>  #>  #> $`Ivory Coast` #> $`Ivory Coast`$x #>  [1] -2.856125 -3.311084 -4.008820 -4.649917 -5.834496 -6.528769 -7.518941 #>  [8] -7.712159 -7.635368 -7.539715 -7.570153 -7.993693 -8.311348 -8.602880 #> [15] -8.385452 -8.485446 -8.439298 -8.280703 -8.221792 -8.299049 -8.203499 #> [22] -7.832100 -8.079114 -8.309616 -8.229337 -8.029944 -7.899590 -7.622759 #> [29] -6.850507 -6.666461 -6.493965 -6.205223 -6.050452 -5.816926 -5.404342 #> [36] -4.954653 -4.779884 -4.330247 -3.980449 -3.511899 -2.827496 -2.562190 #> [43] -2.983585 -3.244370 -2.810701 -2.856125 #>  #> $`Ivory Coast`$y #>  [1]  4.994476  4.984296  5.179813  5.168264  4.993701  4.705088  4.338288 #>  [8]  4.364566  5.188159  5.313345  5.707352  6.126190  6.193033  6.467564 #> [15]  6.911801  7.395208  7.686043  7.687180  8.123329  8.316444  8.455453 #> [22]  8.575704  9.376224  9.789532 10.129020 10.206535 10.297382 10.147236 #> [29] 10.138994 10.430811 10.411303 10.524061 10.096361 10.222555 10.370737 #> [36] 10.152714  9.821985  9.610835  9.862344  9.900326  9.642461  8.219628 #> [43]  7.379705  6.250472  5.389051  4.994476 #>  #> $`Ivory Coast`$isHole #> [1] FALSE #>  #>  #> $Oman1 #> $Oman1$x #>  [1] 58.86114 58.48799 58.03432 57.82637 57.66576 57.78870 57.69439 57.23426 #>  [9] 56.60965 56.51219 56.28352 55.66149 55.26994 55.27490 54.79100 54.23925 #> [17] 53.57051 53.10857 52.78218 52.00001 54.99998 55.66666 55.20834 55.23449 #> [25] 55.52584 55.52863 55.98121 55.80412 55.88623 56.39685 56.84514 57.40345 #> [33] 58.13695 58.72921 59.18050 59.45010 59.80806 59.80615 59.44219 59.28241 #> [41] 58.86114 #>  #> $Oman1$y #>  [1] 21.11403 20.42899 20.48144 20.24300 19.73600 19.06757 18.94471 18.94799 #>  [9] 18.57427 18.08711 17.87607 17.88413 17.63231 17.22835 16.95070 17.04498 #> [17] 16.70766 16.65105 17.34974 19.00000 19.99999 22.00000 22.70833 23.11099 #> [25] 23.52487 23.93360 24.13054 24.26960 24.92083 24.92473 24.24167 23.87859 #> [33] 23.74793 23.56567 22.99240 22.66027 22.53361 22.31052 21.71454 21.43389 #> [41] 21.11403 #>  #> $Oman1$isHole #> [1] FALSE #>  #>  #> $Oman2 #> $Oman2$x #> [1] 56.39142 56.26104 56.07082 56.36202 56.48568 56.39142 #>  #> $Oman2$y #> [1] 25.89599 25.71461 26.05546 26.39593 26.30912 25.89599 #>  #> $Oman2$isHole #> [1] FALSE #>  #>  #> $Philippines1 #> $Philippines1$x #>  [1] 121.3213 121.9376 122.2460 122.3370 122.1743 122.5157 122.2523 121.6628 #>  [9] 121.5051 121.7288 122.2589 122.7013 123.9503 123.8551 124.1813 124.0774 #> [17] 123.2980 122.9287 122.6714 122.0346 121.1264 120.6286 120.6794 120.9918 #> [25] 120.6933 120.5641 120.0704 119.9209 119.8838 120.2865 120.3900 120.7159 #> [33] 121.3213 #>  #> $Philippines1$y #>  [1] 18.50406 18.21855 18.47895 18.22488 17.81028 17.09350 16.26244 15.93102 #>  [9] 15.12481 14.32838 14.21820 14.33654 13.78213 13.23777 12.99753 12.53668 #> [17] 13.02753 13.55292 13.18584 13.78448 13.63669 13.85766 14.27102 14.52539 #> [25] 14.75667 14.39628 14.97087 15.40635 16.36370 16.03463 17.59908 18.50523 #> [33] 18.50406 #>  #> $Philippines1$isHole #> [1] FALSE #>  #>  #> $Philippines2 #> $Philippines2$x #>  [1] 126.3768 126.4785 126.5374 126.1968 125.8314 125.3639 125.6832 125.3965 #>  [9] 124.2198 123.9387 124.2437 123.6102 123.2961 122.8255 122.0855 121.9199 #> [17] 122.3124 122.9424 123.4877 123.8412 124.6015 124.7646 125.4714 125.4121 #> [25] 126.2227 126.3066 126.3768 #>  #> $Philippines2$y #>  [1] 8.414706 7.750354 7.189381 6.274294 7.293715 6.786485 6.049657 5.581003 #>  [9] 6.161355 6.885136 7.360610 7.833527 7.418876 7.457375 6.899424 7.192119 #> [17] 8.034962 8.316237 8.693010 8.240324 8.514158 8.960409 8.986997 9.760335 #> [25] 9.286074 8.782487 8.414706 #>  #> $Philippines2$isHole #> [1] FALSE #>  #>  #> $Philippines3 #> $Philippines3$x #>  [1] 125.5026 125.7835 125.0119 125.0328 125.2774 124.8018 124.7602 124.4591 #>  [9] 124.3025 124.8910 124.8780 124.2668 125.2271 125.5026 #>  #> $Philippines3$y #>  [1] 12.16269 11.04612 11.31145 10.97582 10.35872 10.13468 10.83800 10.88993 #>  [9] 11.49537 11.41558 11.79419 12.55776 12.53572 12.16269 #>  #> $Philippines3$isHole #> [1] FALSE #>  #>  #> $Philippines4 #> $Philippines4$x #>  [1] 123.9824 123.6232 123.3099 122.9959 122.3801 122.5861 122.8371 122.9474 #>  [9] 123.4988 123.3378 124.0779 123.9824 #>  #> $Philippines4$y #>  [1] 10.278779  9.950091  9.318269  9.022189  9.713361  9.981045 10.261157 #>  [8] 10.881868 10.940624 10.267384 11.232726 10.278779 #>  #> $Philippines4$isHole #> [1] FALSE #>  #>  #> $Philippines5 #> $Philippines5$x #> [1] 118.5046 117.1743 117.6645 118.3869 118.9873 119.5115 119.6897 119.0295 #> [9] 118.5046 #>  #> $Philippines5$y #> [1]  9.316383  8.367500  9.066889  9.684500 10.376292 11.369668 10.554291 #> [8] 10.003653  9.316383 #>  #> $Philippines5$isHole #> [1] FALSE #>  #>  #> $Philippines6 #> $Philippines6$x #> [1] 121.8835 122.4838 123.1202 123.1008 122.6377 122.0026 121.9674 122.0384 #> [9] 121.8835 #>  #> $Philippines6$y #> [1] 11.89176 11.58219 11.58366 11.16593 10.74131 10.44102 10.90569 11.41584 #> [9] 11.89176 #>  #> $Philippines6$isHole #> [1] FALSE #>  #>  #> $Philippines7 #> $Philippines7$x #> [1] 121.5274 121.2622 120.8339 120.3234 121.1801 121.5274 #>  #> $Philippines7$y #> [1] 13.06959 12.20556 12.70450 13.46641 13.42970 13.06959 #>  #> $Philippines7$isHole #> [1] FALSE #>  #>  #> $`Burkina Faso` #> $`Burkina Faso`$x #>  [1] -2.82749630 -3.51189897 -3.98044918 -4.33024695 -4.77988359 -4.95465329 #>  [7] -5.40434160 -5.47056495 -5.19784258 -5.22094194 -4.42716610 -4.28040504 #> [13] -4.00639075 -3.52280270 -3.10370683 -2.96769446 -2.19182451 -2.00103512 #> [19] -1.06636349 -0.51585446 -0.26625729  0.37489221  0.29564640  0.42992761 #> [25]  0.99304569  1.02410322  2.17710778  2.15447350  1.93598555  1.44717818 #> [31]  1.24346968  0.89956302  0.02380252 -0.43870154 -0.76157589 -1.20335771 #> [37] -2.94040931 -2.96389625 -2.82749630 #>  #> $`Burkina Faso`$y #>  [1]  9.642461  9.900326  9.862344  9.610835  9.821985 10.152714 10.370737 #>  [8] 10.951270 11.375146 11.713859 12.542646 13.228444 13.472485 13.337662 #> [15] 13.541267 13.798150 14.246418 14.559008 14.973815 15.116158 14.924309 #> [22] 14.928908 14.444235 13.988733 13.335750 12.851826 12.625018 11.940150 #> [29] 11.641150 11.547719 11.110511 10.997339 11.018682 11.098341 10.936930 #> [36] 11.009819 10.962690 10.395335  9.642461 #>  #> $`Burkina Faso`$isHole #> [1] FALSE #>  #>  #> $Gabon #> $Gabon$x #>  [1] 11.093773 10.066135  9.405245  8.797996  8.830087  9.048420  9.291351 #>  [8]  9.492889  9.830284 11.285079 11.276449 11.751665 12.359380 12.951334 #> [15] 13.075822 13.003114 13.282631 14.026669 14.276266 13.843321 14.316418 #> [22] 14.425456 14.299210 13.992407 13.109619 12.575284 12.495703 11.820964 #> [29] 11.478039 11.855122 11.093773 #>  #> $Gabon$y #>  [1] -3.97882659 -2.96948252 -2.14431325 -1.11130136 -0.77907358 -0.45935149 #>  [7]  0.26866608  1.01011953  1.06789378  1.05766185  2.26105093  2.32675751 #> [13]  2.19281220  2.32161571  2.26709707  1.83089631  1.31418366  1.39567740 #> [19]  1.19692984  0.03875764 -0.55262746 -1.33340667 -1.99827565 -2.47080495 #> [25] -2.42874033 -1.94851124 -2.39168833 -2.51416147 -2.76561899 -3.42687062 #> [31] -3.97882659 #>  #> $Gabon$isHole #> [1] FALSE #>  #>  #> $Kyrgyzstan #> $Kyrgyzstan$x #>  [1] 70.96231 71.18628 71.84464 73.48976 73.64530 74.21287 75.63696 76.00035 #>  [9] 77.65839 79.14218 79.64365 80.25999 80.11943 78.54366 78.18720 76.90448 #> [17] 76.52637 75.46783 74.77686 73.82224 73.96001 73.67538 71.78469 70.54916 #> [25] 69.46489 69.55961 70.64802 71.01420 71.77488 73.05542 71.87011 71.15786 #> [33] 70.42002 71.25925 70.96231 #>  #> $Kyrgyzstan$y #>  [1] 42.26615 42.70429 42.84540 42.50089 43.09127 43.29834 42.87790 42.98802 #>  [9] 42.96069 42.85609 42.49668 42.35000 42.12394 41.58224 41.18532 41.06649 #> [17] 40.42795 40.56207 40.36643 39.89397 39.66001 39.43124 39.27946 39.60420 #> [25] 39.52668 40.10321 39.93575 40.24437 40.14584 40.86603 41.39290 41.14359 #> [33] 41.52000 42.16771 42.26615 #>  #> $Kyrgyzstan$isHole #> [1] FALSE #>  #>  #> $Iceland #> $Iceland$x #>  [1] -14.50870 -14.73964 -13.60973 -14.90983 -17.79444 -18.65625 -19.97275 #>  [8] -22.76297 -21.77848 -23.95504 -22.18440 -22.22742 -24.32618 -23.65051 #> [15] -22.13492 -20.57628 -19.05684 -17.79862 -16.16782 -14.50870 #>  #> $Iceland$y #>  [1] 66.45589 65.80875 65.12667 64.36408 63.67875 63.49638 63.64363 63.96018 #>  [9] 64.40212 64.89113 65.08497 65.37859 65.61119 66.26252 66.41047 65.73211 #> [17] 66.27660 65.99385 66.52679 66.45589 #>  #> $Iceland$isHole #> [1] FALSE #>  #>  #> $Ecuador #> $Ecuador$x #>  [1] -80.30256 -79.77029 -79.98656 -80.36878 -80.96777 -80.76481 -80.93366 #>  [8] -80.58337 -80.39932 -80.02090 -80.09061 -79.54276 -78.85526 -77.85506 #> [15] -77.66861 -77.42498 -76.57638 -76.29231 -75.80147 -75.37322 -75.23372 #> [22] -75.54500 -76.63539 -77.83790 -78.45068 -78.63990 -79.20529 -79.62498 #> [29] -80.02891 -80.44224 -80.46929 -80.18401 -80.30256 #>  #> $Ecuador$y #>  [1] -3.40485646 -2.65751190 -2.22079437 -2.68515879 -2.24694264 -1.96504770 #>  [7] -1.05745452 -0.90666269 -0.28370330  0.36034007  0.76842886  0.98293773 #> [13]  1.38092377  0.80992503  0.82589305  0.39568675  0.25693553  0.41604727 #> [19]  0.08480134 -0.15203175 -0.91141692 -1.56160980 -2.60867767 -3.00302052 #> [25] -3.87309661 -4.54778411 -4.95912851 -4.45419809 -4.34609100 -4.42572438 #> [31] -4.05928680 -3.82116180 -3.40485646 #>  #> $Ecuador$isHole #> [1] FALSE #>  #>  #> $Uganda #> $Uganda$x #>  [1] 31.86617 30.76986 30.41910 29.82152 29.57947 29.58784 29.81950 29.87578 #>  [9] 30.08615 30.46851 30.85267 31.17415 30.77332 30.83385 31.24556 31.88145 #> [17] 32.68642 33.39000 34.00500 34.47913 34.59607 35.03599 34.67210 34.18000 #> [25] 33.89357 33.90371 31.86617 #>  #> $Uganda$y #>  [1] -1.0273600 -1.0145500 -1.1346591 -1.4433224 -1.3413132 -0.5874057 #>  [7] -0.2053000  0.5973799  1.0623127  1.5838054  1.8493965  2.2044652 #> [13]  2.3398900  3.5091700  3.7819000  3.5582700  3.7923200  3.7900000 #> [19]  4.2498849  3.5556000  3.0537400  1.9058400  1.1769400  0.5150000 #> [25]  0.1098135 -0.9500000 -1.0273600 #>  #> $Uganda$isHole #> [1] FALSE #>  #>  #> $Ghana #> $Ghana$x #>  [1]  1.06012170 -0.50763791 -1.06362464 -1.96470659 -2.85612505 -2.81070146 #>  [7] -3.24437008 -2.98358497 -2.56218950 -2.82749630 -2.96389625 -2.94040931 #> [13] -1.20335771 -0.76157589 -0.43870154  0.02380252 -0.04978472  0.36757999 #> [19]  0.36590051  0.46119185  0.71202925  0.49095747  0.57038415  0.83693119 #> [25]  1.06012170 #>  #> $Ghana$y #>  [1]  5.928837  5.343473  5.000548  4.710462  4.994476  5.389051  6.250472 #>  [8]  7.379705  8.219628  9.642461 10.395335 10.962690 11.009819 10.936930 #> [15] 11.098341 11.018682 10.706918 10.191213  9.465004  8.677223  8.312465 #> [22]  7.411744  6.914359  6.279979  5.928837 #>  #> $Ghana$isHole #> [1] FALSE #>  #>  #> $Guinea #> $Guinea$x #>  [1]  -8.439298  -8.722124  -8.926065  -9.208786  -9.403348  -9.337280 #>  [7]  -9.755342 -10.016567 -10.230094 -10.505477 -10.494315 -10.654770 #> [13] -10.622395 -10.839152 -11.117481 -11.917277 -12.150338 -12.425929 #> [19] -12.596719 -12.711958 -13.246550 -13.685154 -14.074045 -14.330076 #> [25] -14.579699 -14.693232 -14.839554 -15.130311 -14.685687 -14.382192 #> [31] -14.121406 -13.900800 -13.743161 -13.828272 -13.718744 -13.700476 #> [37] -13.217818 -12.499051 -12.278599 -12.203565 -11.658301 -11.513943 #> [43] -11.456169 -11.297574 -11.036556 -10.870830 -10.593224 -10.165214 #> [49]  -9.890993  -9.567912  -9.327616  -9.127474  -8.905265  -8.786099 #> [55]  -8.376305  -8.581305  -8.620321  -8.407311  -8.282357  -8.335377 #> [61]  -8.029944  -8.229337  -8.309616  -8.079114  -7.832100  -8.203499 #> [67]  -8.299049  -8.221792  -8.280703  -8.439298 #>  #> $Guinea$y #>  [1]  7.686043  7.711674  7.309037  7.313921  7.526905  7.928534  8.541055 #>  [8]  8.428504  8.406206  8.348896  8.715541  8.977178  9.267910  9.688246 #> [15] 10.045873 10.046984  9.858572  9.835834  9.620188  9.342712  8.903049 #> [22]  9.494744  9.886167 10.015720 10.214467 10.656301 10.876572 11.040412 #> [29] 11.527824 11.509272 11.677117 11.678719 11.811269 12.142644 12.247186 #> [36] 12.586183 12.575874 12.332090 12.354440 12.465648 12.386583 12.442988 #> [43] 12.076834 12.077971 12.211245 12.177887 11.923975 11.844084 12.060479 #> [50] 12.194243 12.334286 12.308060 12.088358 11.812561 11.393646 11.136246 #> [57] 10.810891 10.909257 10.792597 10.494812 10.206535 10.129020  9.789532 #> [64]  9.376224  8.575704  8.455453  8.316444  8.123329  7.687180  7.686043 #>  #> $Guinea$isHole #> [1] FALSE #>  #>  #> $Laos #> $Laos$x #>  [1] 105.2188 105.5443 105.5890 104.7793 104.7169 103.9565 103.2002 102.9987 #>  [9] 102.4130 102.1136 101.0595 101.0359 101.2820 100.6063 100.5489 100.1160 #> [17] 100.3291 101.1800 101.2700 101.8031 101.6520 102.1704 102.7549 103.2039 #> [25] 104.4350 104.8226 104.1834 103.8965 105.0946 105.9258 106.5560 107.3127 #> [33] 107.5645 107.3827 106.4964 106.0439 105.2188 #>  #> $Laos$y #>  [1] 14.27321 14.72393 15.57032 16.44186 17.42886 18.24095 18.30963 17.96169 #>  [9] 17.93278 18.10910 17.51250 18.40893 19.46258 19.50834 20.10924 20.41785 #> [17] 20.78612 21.43657 21.20165 21.17437 22.31820 22.46475 21.67514 20.76656 #> [25] 20.75873 19.88664 19.62467 19.26518 18.66697 17.48532 16.60428 15.90854 #> [33] 15.20217 14.20244 14.57058 13.88109 14.27321 #>  #> $Laos$isHole #> [1] FALSE #>  #>  #> $Syria #> $Syria$x #>  [1] 38.79234 36.83406 35.71992 35.70080 35.83640 35.82110 36.06646 36.61175 #>  [9] 36.44819 35.99840 35.90502 36.14976 36.41755 36.68539 36.73949 37.06676 #> [17] 38.16773 38.69989 39.52258 40.67326 41.21209 42.34959 41.83706 41.28971 #> [25] 41.38397 41.00616 38.79234 #>  #> $Syria$y #>  [1] 33.37869 32.31294 32.70919 32.71601 32.86812 33.27743 33.82491 34.20179 #>  [9] 34.59394 34.64491 35.41001 35.82153 36.04062 36.25970 36.81752 36.62304 #> [17] 36.90121 36.71293 36.71605 37.09128 37.07435 37.22987 36.60585 36.35881 #> [25] 35.62832 34.41937 33.37869 #>  #> $Syria$isHole #> [1] FALSE #>  #>  #> $Guyana #> $Guyana$x #>  [1] -59.75828 -59.10168 -58.48296 -58.45488 -58.07810 -57.54222 -57.14744 #>  [8] -57.30725 -57.91429 -57.86021 -58.04469 -57.60157 -57.28143 -57.15010 #> [15] -56.53939 -56.78270 -57.33582 -57.66097 -58.11345 -58.42948 -58.54001 #> [22] -59.03086 -59.64604 -59.71855 -59.97452 -59.81541 -59.53804 -59.76741 #> [29] -60.11100 -59.98096 -60.21368 -60.73357 -61.41030 -61.13942 -61.15934 #> [36] -60.54400 -60.29567 -60.63797 -60.55059 -59.75828 #>  #> $Guyana$y #>  [1] 8.367035 7.999202 7.347691 6.832787 6.809094 6.321268 5.973150 5.073567 #>  [9] 4.812626 4.576801 4.060864 3.334655 3.333492 2.768927 1.899523 1.863711 #> [17] 1.948538 1.682585 1.507195 1.463942 1.268088 1.317698 1.786894 2.249630 #> [25] 2.755233 3.606499 3.958803 4.423503 4.574967 5.014061 5.244486 5.200277 #> [33] 5.959068 6.234297 6.696077 6.856584 7.043911 7.415000 7.779603 8.367035 #>  #> $Guyana$isHole #> [1] FALSE #>  #>  #> $Uruguay #> $Uruguay$x #>  [1] -57.62513 -56.97603 -55.97324 -55.60151 -54.57245 -53.78795 -53.20959 #>  [8] -53.65054 -53.37366 -53.80643 -54.93587 -55.67409 -56.21530 -57.13969 #> [15] -57.81786 -58.42707 -58.34961 -58.13265 -58.14244 -57.87494 -57.62513 #>  #> $Uruguay$y #>  [1] -30.21629 -30.10969 -30.88308 -30.85388 -31.49451 -32.04724 -32.72767 #>  [8] -33.20200 -33.76838 -34.39681 -34.95265 -34.75266 -34.85984 -34.43046 #> [15] -34.46255 -33.90945 -33.26319 -33.04057 -32.04450 -31.01656 -30.21629 #>  #> $Uruguay$isHole #> [1] FALSE #>  #>  #> $Senegal #> $Senegal$x #>  [1] -16.71373 -17.12611 -17.62504 -17.18517 -16.70071 -16.46310 -16.12069 #>  [8] -15.62367 -15.13574 -14.57735 -14.09952 -13.43574 -12.83066 -12.17075 #> [15] -12.12489 -11.92772 -11.55340 -11.46790 -11.51394 -11.65830 -12.20356 #> [22] -12.27860 -12.49905 -13.21782 -13.70048 -15.54848 -15.81657 -16.14772 #> [29] -16.67745 -16.84152 -15.93130 -15.69100 -15.51181 -15.14116 -14.71220 #> [36] -14.27770 -13.84496 -14.04699 -14.37671 -14.68703 -15.08174 -15.39877 #> [43] -15.62460 -16.71373 #>  #> $Senegal$y #>  [1] 13.59496 14.37352 14.72954 14.91948 15.62153 16.13504 16.45566 16.36934 #>  [9] 16.58728 16.59826 16.30430 16.03938 15.30369 14.61683 13.99473 13.42208 #> [17] 13.14121 12.75452 12.44299 12.38658 12.46565 12.35444 12.33209 12.57587 #> [25] 12.58618 12.62817 12.51557 12.54776 12.38485 13.15139 13.13028 13.27035 #> [33] 13.27857 13.50951 13.29821 13.28059 13.50504 13.79407 13.62568 13.63036 #> [41] 13.87649 13.86037 13.62359 13.59496 #>  #> $Senegal$isHole #> [1] FALSE #>  #>  #> $Tunisia #> $Tunisia$x #>  [1]  9.482140  9.055603  8.439103  8.430473  7.612642  7.524482  8.140981 #>  [8]  8.376368  8.217824  8.420964  9.509994 10.210002 10.180650 11.028867 #> [15] 11.100026 10.600005 10.593287 10.939519 10.807847 10.149593 10.339659 #> [22] 10.856836 11.108501 11.488787 11.432253 10.944790 10.636901  9.950225 #> [29] 10.056575  9.970017  9.482140 #>  #> $Tunisia$y #>  [1] 30.30756 32.10269 32.50628 32.74834 33.34411 34.09738 34.65515 35.47988 #>  [9] 36.43318 36.94643 37.34999 37.23000 36.72404 37.09210 36.90000 36.41000 #> [17] 35.94744 35.69898 34.83351 34.33077 33.78574 33.76874 33.29334 33.13700 #> [25] 32.36890 32.08181 31.76142 31.37607 30.96183 30.53932 30.30756 #>  #> $Tunisia$isHole #> [1] FALSE #>  #>  #> $Cambodia #> $Cambodia$x #>  [1] 103.4973 103.0907 102.5849 102.3481 102.9884 104.2814 105.2188 106.0439 #>  [9] 106.4964 107.3827 107.6145 107.4914 105.8105 106.2497 105.1999 104.3343 #> [17] 103.4973 #>  #> $Cambodia$y #>  [1] 10.63256 11.15366 12.18659 13.39425 14.22572 14.41674 14.27321 13.88109 #>  [9] 14.57058 14.20244 13.53553 12.33721 11.56761 10.96181 10.88931 10.48654 #> [17] 10.63256 #>  #> $Cambodia$isHole #> [1] FALSE #>  #>  #> $Tajikistan #> $Tajikistan$x #>  [1] 71.01420 70.64802 69.55961 69.46489 70.54916 71.78469 73.67538 73.92885 #>  [9] 74.25751 74.86482 74.82999 74.98000 73.94870 73.26006 72.63689 72.19304 #> [17] 71.84464 71.44869 71.54192 71.23940 71.34813 70.80682 70.37630 70.27057 #> [25] 70.11658 69.51879 69.19627 68.85945 68.13556 67.83000 68.39203 68.17603 #> [33] 67.44222 67.70143 68.53642 69.01163 69.32949 70.66662 70.45816 70.60141 #> [41] 71.01420 #>  #> $Tajikistan$y #>  [1] 40.24437 39.93575 40.10321 39.52668 39.60420 39.27946 39.43124 38.50582 #>  [9] 38.60651 38.37885 37.99001 37.41999 37.42157 37.49526 37.04756 36.94829 #> [17] 36.73817 37.06564 37.90577 37.95327 38.25891 38.48628 38.13840 37.73516 #> [25] 37.58822 37.60900 37.15114 37.34434 37.02312 37.14499 38.15703 38.90155 #> [33] 39.14014 39.58048 39.53345 40.08616 40.72782 40.96021 40.49649 40.21853 #> [41] 40.24437 #>  #> $Tajikistan$isHole #> [1] FALSE #>  #>  #> $Nepal #> $Nepal$x #>  [1] 88.12044 88.04313 88.17480 88.06024 87.22747 86.02439 85.25178 84.67502 #>  [9] 83.30425 81.99999 81.05720 80.08842 80.47672 81.11126 81.52580 82.32751 #> [17] 83.33712 83.89899 84.23458 85.01164 85.82332 86.95452 88.12044 #>  #> $Nepal$y #>  [1] 27.87654 27.44582 26.81041 26.41462 26.39790 26.63098 26.72620 27.23490 #>  [9] 27.36451 27.92548 28.41610 28.79447 29.72987 30.18348 30.42272 30.11527 #> [17] 29.46373 29.32023 28.83989 28.64277 28.20358 27.97426 27.87654 #>  #> $Nepal$isHole #> [1] FALSE #>  #>  #> $Greece1 #> $Greece1$x #>  [1] 26.60420 26.29460 26.05694 25.44768 24.92585 23.71481 24.40800 23.89997 #>  [9] 23.34300 22.81399 22.62630 22.84975 23.35003 22.97310 23.53002 24.02502 #> [17] 24.04001 23.11500 23.40997 22.77497 23.15423 22.49003 21.67003 21.29501 #> [25] 21.12003 20.73003 20.21771 20.15002 20.61500 20.67500 20.99999 21.02004 #> [33] 21.67416 22.05538 22.59731 22.76177 22.95238 23.69207 24.49264 25.19720 #> [41] 26.10614 26.11704 26.60420 #>  #> $Greece1$y #>  [1] 41.56211 40.93626 40.82412 40.85255 40.94706 40.68713 40.12499 39.96201 #>  [9] 39.96100 40.47601 40.25656 39.65931 39.19001 38.97090 38.51000 38.21999 #> [17] 37.65501 37.92001 37.40999 37.30501 36.42251 36.41000 36.84499 37.64499 #> [25] 38.31032 38.76999 39.34023 39.62500 40.11001 40.43500 40.58000 40.84273 #> [33] 40.93127 41.14987 41.13049 41.30480 41.33799 41.30908 41.58390 41.23449 #> [41] 41.32890 41.82690 41.56211 #>  #> $Greece1$isHole #> [1] FALSE #>  #>  #> $Greece2 #> $Greece2$x #>  [1] 23.69998 24.24667 25.02502 25.76921 25.74502 26.29000 26.16500 24.72498 #>  [9] 24.73501 23.51498 23.69998 #>  #> $Greece2$y #>  [1] 35.70500 35.36802 35.42500 35.35402 35.18000 35.29999 35.00500 34.91999 #>  [9] 35.08499 35.27999 35.70500 #>  #> $Greece2$isHole #> [1] FALSE #>  #>  #> $`N. Korea` #> $`N. Korea`$x #>  [1] 130.6400 130.7800 130.4000 129.9659 129.6674 129.7052 129.1881 129.0104 #>  [9] 128.6334 127.9674 127.5334 127.5021 127.3854 127.7833 128.3497 128.2057 #> [17] 127.7800 127.0733 126.6837 126.2373 126.1748 125.6891 125.5684 125.2753 #> [25] 125.2401 124.9810 124.7122 124.9860 125.2219 125.1329 125.3866 125.3211 #> [33] 124.7375 124.2656 125.0799 126.1820 126.8691 127.3438 128.2084 128.0522 #> [41] 129.5967 129.9943 130.6400 #>  #> $`N. Korea`$y #>  [1] 42.39501 42.22001 42.28000 41.94137 41.60110 40.88283 40.66181 40.48544 #>  [9] 40.18985 40.02541 39.75685 39.32393 39.21347 39.05090 38.61224 38.37040 #> [17] 38.30454 38.25611 37.80477 37.84038 37.74969 37.94001 37.75209 37.66907 #> [25] 37.85722 37.94882 38.10835 38.54847 38.66586 38.84856 39.38796 39.55138 #> [33] 39.66034 39.92849 40.56982 41.10734 41.81657 41.50315 41.46677 41.99428 #> [41] 42.42498 42.98539 42.39501 #>  #> $`N. Korea`$isHole #> [1] FALSE #>  #>  #> $Bulgaria #> $Bulgaria$x #>  [1] 22.65715 22.94483 23.33230 24.10068 25.56927 26.06516 27.24240 27.97011 #>  [9] 28.55808 28.03910 27.67390 27.99672 27.13574 26.11704 26.10614 25.19720 #> [17] 24.49264 23.69207 22.95238 22.88137 22.38053 22.54501 22.43659 22.60480 #> [25] 22.98602 22.50016 22.41045 22.65715 #>  #> $Bulgaria$y #>  [1] 44.23492 43.82379 43.89701 43.74105 43.68844 43.94349 44.17599 43.81247 #>  [9] 43.70746 43.29317 42.57789 42.00736 42.14148 41.82690 41.32890 41.23449 #> [17] 41.58390 41.30908 41.33799 41.99930 42.32026 42.46136 42.58032 42.89852 #> [25] 43.21116 43.64281 44.00806 44.23492 #>  #> $Bulgaria$isHole #> [1] FALSE #>  #>  #> $Bangladesh #> $Bangladesh$x #>  [1] 92.67272 92.65226 92.30323 92.36855 92.08289 92.02522 91.83489 91.41709 #>  [9] 90.49601 90.58696 90.27297 89.84747 89.70205 89.41886 89.03196 88.87631 #> [17] 88.52977 88.69994 88.08442 88.30637 88.93155 88.20979 88.56305 89.35509 #> [25] 89.83248 89.92069 90.87221 91.79960 92.37620 91.91509 91.46773 91.15896 #> [33] 91.70648 91.86993 92.14603 92.67272 #>  #> $Bangladesh$y #>  [1] 22.04124 21.32405 21.47549 20.67088 21.19220 21.70157 22.18294 22.76502 #>  [9] 22.80502 22.39279 21.83637 22.03915 21.85712 21.96618 22.05571 22.87915 #> [17] 23.63114 24.23371 24.50166 24.86608 25.23869 25.76807 26.44653 26.01441 #> [25] 25.96508 25.26975 25.13260 25.14743 24.97669 24.13041 24.07264 23.50353 #> [33] 22.98526 23.62435 23.62750 22.04124 #>  #> $Bangladesh$isHole #> [1] FALSE #>  #>  #> $Suriname #> $Suriname$x #>  [1] -57.14744 -55.94932 -55.84178 -55.03325 -53.95804 -54.47863 -54.39954 #>  [8] -54.00693 -54.18173 -54.26971 -54.52475 -55.09759 -55.56976 -55.97332 #> [15] -56.07334 -55.90560 -55.99570 -56.53939 -57.15010 -57.28143 -57.60157 #> [22] -58.04469 -57.86021 -57.91429 -57.30725 -57.14744 #>  #> $Suriname$y #>  [1] 5.973150 5.772878 5.953125 6.025291 5.756548 4.896756 4.212611 3.620038 #>  [9] 3.189780 2.732392 2.311849 2.523748 2.421506 2.510364 2.220795 2.021996 #> [17] 1.817667 1.899523 2.768927 3.333492 3.334655 4.060864 4.576801 4.812626 #> [25] 5.073567 5.973150 #>  #> $Suriname$isHole #> [1] FALSE #>  #>  #> $Hungary #> $Hungary$x #>  [1] 16.20230 16.53427 16.34058 16.90375 16.97967 17.48847 17.85713 18.69651 #>  [9] 18.77702 19.17436 19.66136 19.76947 20.23905 20.47356 20.80129 21.87224 #> [17] 22.08561 22.64082 22.71053 22.09977 21.62651 21.02195 20.22019 19.59604 #> [25] 18.82984 18.45606 17.63007 16.88252 16.56481 16.37050 16.20230 #>  #> $Hungary$y #>  [1] 46.85239 47.49617 47.71290 47.71487 48.12350 47.86747 47.75843 47.88095 #>  [9] 48.08177 48.11138 48.26661 48.20269 48.32757 48.56285 48.62385 48.31997 #> [17] 48.42226 48.15024 47.88219 47.67244 46.99424 46.31609 46.12747 46.17173 #> [25] 45.90888 45.75948 45.95177 46.38063 46.50375 46.84133 46.85239 #>  #> $Hungary$isHole #> [1] FALSE #>  #>  #> $Nicaragua #> $Nicaragua$x #>  [1] -85.71254 -86.05849 -86.52585 -86.74599 -87.16752 -87.66849 -87.55747 #>  [8] -87.39239 -87.31665 -87.00577 -86.88056 -86.73382 -86.75509 -86.52071 #> [15] -86.31214 -86.09626 -85.80129 -85.69867 -85.51441 -85.16536 -85.14875 #> [22] -85.05279 -84.92450 -84.82004 -84.64958 -84.44934 -84.22834 -83.97572 #> [29] -83.62858 -83.48999 -83.14722 -83.23323 -83.28416 -83.18213 -83.41250 #> [36] -83.51983 -83.55221 -83.49852 -83.47332 -83.62610 -83.71961 -83.65086 #> [43] -83.85547 -83.80894 -83.65561 -83.89505 -84.19018 -84.35593 -84.67307 #> [50] -84.90300 -85.56185 -85.71254 #>  #> $Nicaragua$y #>  [1] 11.08844 11.40344 11.80688 12.14396 12.45826 12.90991 13.06455 12.91402 #>  [9] 12.98469 13.02579 13.25420 13.26309 13.75485 13.77849 13.77136 14.03819 #> [17] 13.83605 13.96008 14.07901 14.35437 14.56020 14.55154 14.79049 14.81959 #> [25] 14.66681 14.62161 14.74876 14.74944 14.88007 15.01627 14.99583 14.89987 #> [33] 14.67662 14.31070 13.97008 13.56770 13.12705 12.86929 12.41909 12.32085 #> [41] 11.89312 11.62903 11.37331 11.10304 10.93876 10.72684 10.79345 10.99923 #> [49] 11.08266 10.95230 11.21712 11.08844 #>  #> $Nicaragua$isHole #> [1] FALSE #>  #>  #> $Austria #> $Austria$x #>  [1] 16.979667 16.903754 16.340584 16.534268 16.202298 16.011664 15.137092 #>  [8] 14.632472 13.806475 12.376485 12.153088 11.164828 11.048556 10.442701 #> [15]  9.932448  9.479970  9.632932  9.594226  9.896068 10.402084 10.544504 #> [22] 11.426414 12.141357 12.620760 12.932627 13.025851 12.884103 13.243357 #> [29] 13.595946 14.338898 14.901447 15.253416 16.029647 16.499283 16.960288 #> [36] 16.879983 16.979667 #>  #> $Austria$y #>  [1] 48.12350 47.71487 47.71290 47.49617 46.85239 46.68361 46.65870 46.43182 #>  [9] 46.50931 46.76756 47.11539 46.94158 46.75136 46.89355 46.92073 47.10281 #> [17] 47.34760 47.52506 47.58020 47.30249 47.56640 47.52377 47.70308 47.67239 #> [25] 47.46765 47.63758 48.28915 48.41611 48.87717 48.55531 48.96440 49.03907 #> [33] 48.73390 48.78581 48.59698 48.47001 48.12350 #>  #> $Austria$isHole #> [1] FALSE #>  #>  #> $`Czech Rep.` #> $`Czech Rep.`$x #>  [1] 16.96029 16.49928 16.02965 15.25342 14.90145 14.33890 13.59595 13.03133 #>  [9] 12.52102 12.41519 12.24011 12.96684 13.33813 14.05623 14.30701 14.57072 #> [17] 15.01700 15.49097 16.23863 16.17625 16.71948 16.86877 17.55457 17.64945 #> [25] 18.39291 18.85314 18.55497 18.39999 18.17050 18.10497 17.91351 17.88648 #> [33] 17.54501 17.10198 16.96029 #>  #> $`Czech Rep.`$y #>  [1] 48.59698 48.78581 48.73390 49.03907 48.96440 48.55531 48.87717 49.30707 #>  [9] 49.54742 49.96912 50.26634 50.48408 50.73323 50.92692 51.11727 51.00234 #> [17] 51.10667 50.78473 50.69773 50.42261 50.21575 50.47397 50.36215 50.04904 #> [25] 49.98863 49.49623 49.49502 49.31500 49.27151 49.04398 48.99649 48.90348 #> [33] 48.80002 48.81697 48.59698 #>  #> $`Czech Rep.`$isHole #> [1] FALSE #>  #>  #> $Eritrea #> $Eritrea$x #>  [1] 42.35156 42.00975 41.59856 41.15519 40.89660 40.02622 39.34061 39.09940 #>  [9] 38.51295 37.90607 37.59377 36.42951 36.32319 36.75386 36.85253 37.16747 #> [17] 37.90400 38.41009 38.99062 39.26611 39.81429 41.17927 41.73495 42.27683 #> [25] 42.58958 43.08123 42.77964 42.35156 #>  #> $Eritrea$y #>  [1] 12.54223 12.86582 13.45209 13.77332 14.11864 14.51958 14.53155 14.74064 #>  [9] 14.50547 14.95943 14.21310 14.42211 14.82248 16.29187 16.95655 17.26314 #> [17] 17.42754 17.99831 16.84063 15.92272 15.43565 14.49108 13.92104 13.34399 #> [25] 13.00042 12.69964 12.45542 12.54223 #>  #> $Eritrea$isHole #> [1] FALSE #>  #>  #> $Cuba #> $Cuba$x #>  [1] -82.26815 -81.40446 -80.61877 -79.67952 -79.28149 -78.34743 -77.99330 #>  [8] -77.14642 -76.52382 -76.19462 -75.59822 -75.67106 -74.93390 -74.17802 #> [15] -74.29665 -74.96159 -75.63468 -76.32366 -77.75548 -77.08511 -77.49265 #> [22] -78.13729 -78.48283 -78.71987 -79.28500 -80.21748 -80.51753 -81.82094 #> [29] -82.16999 -81.79500 -82.77590 -83.49446 -83.90880 -84.05215 -84.54703 #> [36] -84.97491 -84.44706 -84.23036 -83.77824 -83.26755 -82.51044 -82.26815 #>  #> $Cuba$y #>  [1] 23.18861 23.11727 23.10598 22.76530 22.39920 22.51217 22.27719 21.65785 #>  [9] 21.20682 21.22057 21.01662 20.73509 20.69391 20.28463 20.05038 19.92344 #> [17] 19.87377 19.95289 19.85548 20.41335 20.67311 20.73995 21.02861 21.59811 #> [25] 21.55918 21.82732 22.03708 22.19206 22.38711 22.63696 22.68815 22.16852 #> [33] 22.15457 21.91058 21.80123 21.89603 22.20495 22.56575 22.78812 22.98304 #> [41] 23.07875 23.18861 #>  #> $Cuba$isHole #> [1] FALSE #>  #>  #> $`S. Korea` #> $`S. Korea`$x #>  [1] 128.3497 129.2129 129.4604 129.4683 129.0914 128.1859 127.3865 126.4857 #>  [9] 126.3739 126.5592 126.1174 126.8601 126.1748 126.2373 126.6837 127.0733 #> [17] 127.7800 128.2057 128.3497 #>  #> $`S. Korea`$y #>  [1] 38.61224 37.43239 36.78419 35.63214 35.08248 34.89038 34.47567 34.39005 #>  [9] 34.93456 35.68454 36.72548 36.89392 37.74969 37.84038 37.80477 38.25611 #> [17] 38.30454 38.37040 38.61224 #>  #> $`S. Korea`$isHole #> [1] FALSE #>  #>  #> $Portugal #> $Portugal$x #>  [1] -9.034818 -8.671946 -8.263857 -8.013175 -7.422513 -7.251309 -6.668606 #>  [8] -6.389088 -6.851127 -6.864020 -7.026413 -7.066592 -7.498632 -7.098037 #> [15] -7.374092 -7.029281 -7.166508 -7.537105 -7.453726 -7.855613 -8.382816 #> [22] -8.898857 -8.746101 -8.839998 -9.287464 -9.526571 -9.446989 -9.048305 #> [29] -8.977353 -8.768684 -8.790853 -8.990789 -9.034818 #>  #> $Portugal$y #>  [1] 41.88057 42.13469 42.28047 41.79089 41.79207 41.91835 41.88339 41.38182 #>  [9] 41.11108 40.33087 40.18452 39.71189 39.62957 39.03007 38.37306 38.07576 #> [17] 37.80389 37.42890 37.09779 36.83827 36.97888 36.86881 37.65135 38.26624 #> [25] 38.35849 38.73743 39.39207 39.75509 40.15931 40.76064 41.18433 41.54346 #> [33] 41.88057 #>  #> $Portugal$isHole #> [1] FALSE #>  #>  #> $Azerbaijan1 #> $Azerbaijan1$x #>  [1] 47.37332 47.81567 47.98728 48.58435 49.11026 49.61891 50.08483 50.39282 #>  [9] 49.56920 49.39526 49.22323 48.85653 48.88325 48.63438 48.01074 48.35553 #> [17] 48.06010 47.68508 46.50572 46.48350 46.03453 45.61001 45.89191 45.35917 #> [25] 45.56035 45.17950 44.97248 45.21743 45.96260 46.50164 46.63791 46.14543 #> [33] 46.40495 46.68607 47.37332 #>  #> $Azerbaijan1$y #>  [1] 41.21973 41.15142 41.40582 41.80887 41.28229 40.57292 40.52616 40.25656 #>  [9] 40.17610 39.39948 39.04922 38.81549 38.32025 38.27038 38.79401 39.28876 #> [17] 39.58224 39.50836 38.77061 39.46415 39.62802 39.89999 40.21848 40.56150 #> [25] 40.81229 40.98535 41.24813 41.41145 41.12387 41.06444 41.18167 41.72280 #> [33] 41.86068 41.82714 41.21973 #>  #> $Azerbaijan1$isHole #> [1] FALSE #>  #>  #> $Azerbaijan2 #> $Azerbaijan2$x #> [1] 45.00199 45.29814 45.73998 45.73538 46.14362 45.45772 44.95269 44.79399 #> [9] 45.00199 #>  #> $Azerbaijan2$y #> [1] 39.74000 39.47175 39.47400 39.31972 38.74120 38.87414 39.33576 39.71300 #> [9] 39.74000 #>  #> $Azerbaijan2$isHole #> [1] FALSE #>  #>  #> $Benin #> $Benin$x #>  [1] 2.6917017 1.8652405 1.6189506 1.6644776 1.4630428 1.4250607 1.0777950 #>  [8] 0.7723356 0.8995630 1.2434697 1.4471782 1.9359855 2.1544735 2.4901636 #> [15] 2.8486430 3.6111805 3.5722164 3.7971123 3.6000700 3.7054383 3.2203516 #> [22] 2.9123084 2.7237928 2.7490625 2.6917017 #>  #> $Benin$y #>  [1]  6.258817  6.142158  6.832038  9.128590  9.334624  9.825395 10.175607 #>  [8] 10.470808 10.997339 11.110511 11.547719 11.641150 11.940150 12.233052 #> [15] 12.235636 11.660167 11.327939 10.734746 10.332186 10.063210  9.444153 #> [22]  9.137608  8.506845  7.870734  6.258817 #>  #> $Benin$isHole #> [1] FALSE #>  #>  #> $Honduras #> $Honduras$x #>  [1] -87.31665 -87.48941 -87.79311 -87.72350 -87.85952 -88.06534 -88.50400 #>  [8] -88.54123 -88.84307 -89.05851 -89.35333 -89.14554 -89.22522 -89.15481 #> [15] -88.68068 -88.22502 -88.12115 -87.90181 -87.61568 -87.52292 -87.36776 #> [22] -86.90319 -86.44095 -86.11923 -86.00195 -85.68332 -85.44400 -85.18244 #> [29] -84.98372 -84.52698 -84.36826 -84.06305 -83.77398 -83.41038 -83.14722 #> [36] -83.48999 -83.62858 -83.97572 -84.22834 -84.44934 -84.64958 -84.82004 #> [43] -84.92450 -85.05279 -85.14875 -85.16536 -85.51441 -85.69867 -85.80129 #> [50] -86.09626 -86.31214 -86.52071 -86.75509 -86.73382 -86.88056 -87.00577 #> [57] -87.31665 #>  #> $Honduras$y #>  [1] 12.98469 13.29753 13.38448 13.78505 13.89331 13.96463 13.84549 13.98015 #>  [9] 14.14051 14.34003 14.42413 14.67802 14.87429 15.06642 15.34625 15.72772 #> [17] 15.68866 15.86446 15.87880 15.79728 15.84694 15.75671 15.78284 15.89345 #> [25] 16.00541 15.95365 15.88575 15.90916 15.99592 15.85722 15.83516 15.64824 #> [33] 15.42407 15.27090 14.99583 15.01627 14.88007 14.74944 14.74876 14.62161 #> [41] 14.66681 14.81959 14.79049 14.55154 14.56020 14.35437 14.07901 13.96008 #> [49] 13.83605 14.03819 13.77136 13.77849 13.75485 13.26309 13.25420 13.02579 #> [57] 12.98469 #>  #> $Honduras$isHole #> [1] FALSE #>  #>  #> $Latvia #> $Latvia$x #>  [1] 21.05580 21.09042 21.58187 22.52434 23.31845 24.12073 24.31286 25.16459 #>  [9] 25.60281 26.46353 27.28818 27.77002 27.85528 28.17671 27.10246 26.49433 #> [17] 25.53305 25.00093 24.86068 23.87826 22.20116 21.05580 #>  #> $Latvia$y #>  [1] 56.03108 56.78387 57.41187 57.75337 57.00624 57.02569 57.79342 57.97016 #>  [9] 57.84753 57.47639 57.47453 57.24426 56.75933 56.16913 55.78331 55.61511 #> [17] 56.10030 56.16453 56.37253 56.27367 56.33780 56.03108 #>  #> $Latvia$isHole #> [1] FALSE #>  #>  #> $Malawi #> $Malawi$x #>  [1] 34.55999 34.28001 34.55999 34.90715 35.26796 35.68685 35.77190 35.33906 #>  [9] 35.03381 34.38129 34.30729 34.51767 34.45963 34.06483 33.78970 33.21402 #> [17] 32.68817 32.99176 33.30642 33.11429 33.31531 33.48569 33.23139 32.75938 #> [25] 33.73973 33.94084 34.28001 34.55999 #>  #> $Malawi$y #>  [1] -11.520020 -12.280025 -13.579998 -13.565425 -13.887834 -14.611046 #>  [7] -15.896859 -16.107440 -16.801300 -16.183560 -15.478641 -15.013709 #> [13] -14.613010 -14.359950 -14.451831 -13.971860 -13.712858 -12.783871 #> [19] -12.435778 -11.607198 -10.796550 -10.525559  -9.676722  -9.230599 #> [25]  -9.417151  -9.693674 -10.160000 -11.520020 #>  #> $Malawi$isHole #> [1] FALSE #>  #>  #> $Guatemala #> $Guatemala$x #>  [1] -90.09555 -90.60862 -91.23241 -91.68975 -92.22775 -92.20323 -92.08722 #>  [8] -92.22925 -91.74796 -90.46447 -90.43887 -90.60085 -90.71182 -91.08167 #> [15] -91.45392 -91.00227 -91.00152 -90.06793 -89.14308 -89.15081 -89.22912 #> [22] -88.93061 -88.60459 -88.51836 -88.22502 -88.68068 -89.15481 -89.22522 #> [29] -89.14554 -89.35333 -89.58734 -89.53422 -89.72193 -90.06468 -90.09555 #>  #> $Guatemala$y #>  [1] 13.73534 13.90977 13.92783 14.12622 14.53883 14.83010 15.06458 15.25145 #>  [9] 16.06656 16.06956 16.41011 16.47078 16.68748 16.91848 17.25218 17.25466 #> [17] 17.81759 17.81933 17.80832 17.01558 15.88694 15.88727 15.70638 15.85539 #> [25] 15.72772 15.34625 15.06642 14.87429 14.67802 14.42413 14.36259 14.24482 #> [33] 14.13423 13.88197 13.73534 #>  #> $Guatemala$isHole #> [1] FALSE #>  #>  #> $Lithuania #> $Lithuania$x #>  [1] 22.73110 22.65105 22.75776 22.31572 21.26845 21.05580 22.20116 23.87826 #>  [9] 24.86068 25.00093 25.53305 26.49433 26.58828 25.76843 25.53635 24.45068 #> [17] 23.48413 23.24399 22.73110 #>  #> $Lithuania$y #>  [1] 54.32754 54.58274 54.85657 55.01530 55.19048 56.03108 56.33780 56.27367 #>  [9] 56.37253 56.16453 56.10030 55.61511 55.16718 54.84696 54.28242 53.90570 #> [17] 53.91250 54.22057 54.32754 #>  #> $Lithuania$isHole #> [1] FALSE #>  #>  #> $Serbia #> $Serbia$x #>  [1] 20.87431 21.48353 21.56202 22.14509 22.45902 22.70573 22.47401 22.65715 #>  [9] 22.41045 22.50016 22.98602 22.60480 22.43659 22.54501 22.38053 21.91708 #> [17] 21.57664 21.54332 21.66292 21.77505 21.63302 21.43866 21.27421 21.14340 #> [25] 20.95651 20.81448 20.63508 20.49679 20.25758 20.33980 19.95857 19.63000 #> [33] 19.48389 19.21852 19.45400 19.59976 19.11761 19.36803 19.00548 19.39048 #> [41] 19.07277 18.82982 19.59604 20.22019 20.76217 20.87431 #>  #> $Serbia$y #>  [1] 45.41638 45.18117 44.76895 44.47842 44.70252 44.57800 44.40923 44.23492 #>  [9] 44.00806 43.64281 43.21116 42.89852 42.58032 42.46136 42.32026 42.30364 #> [17] 42.24522 42.32025 42.43922 42.68270 42.67717 42.86255 42.90959 43.06869 #> [25] 43.13094 43.27205 43.21671 42.88469 42.81275 42.89852 43.10604 43.21378 #> [33] 43.35229 43.52384 43.56810 44.03847 44.42307 44.86300 44.86023 45.23652 #> [41] 45.52151 45.90888 46.17173 46.12747 45.73457 45.41638 #>  #> $Serbia$isHole #> [1] FALSE #>  #>  #> $`W. Sahara` #> $`W. Sahara`$x #>  [1] -13.166000  -8.670000  -8.665590  -8.665124  -8.684400  -8.687294 #>  [7] -11.969419 -11.937224 -12.874222 -13.118754 -12.929102 -16.845194 #> [13] -17.063423 -17.020428 -16.973248 -16.589137 -16.261922 -16.326414 #> [19] -15.982611 -15.426004 -15.089332 -14.824645 -14.800926 -14.439940 #> [25] -13.773805 -13.139942 -13.121613 -13.166000 #>  #> $`W. Sahara`$y #>  [1] 27.68200 27.66900 27.65643 27.58948 27.39574 25.88106 25.93335 23.37459 #>  [9] 23.28483 22.77122 21.32707 21.33332 20.99975 21.42231 21.88574 22.15823 #> [17] 22.67934 23.01777 23.72336 24.35913 24.52026 25.10353 25.63626 26.25442 #> [25] 26.61889 27.64015 27.65415 27.68200 #>  #> $`W. Sahara`$isHole #> [1] FALSE #>  #>  #> $Jordan #> $Jordan$x #>  [1] 35.54567 35.71992 36.83406 38.79234 39.19547 39.00489 37.00217 37.99885 #>  [9] 37.66812 37.50358 36.74053 36.50121 36.06894 34.95604 34.92260 35.42092 #> [17] 35.39756 35.54525 35.54567 #>  #> $Jordan$y #>  [1] 32.39399 32.70919 32.31294 33.37869 32.16101 32.01022 31.50841 30.50850 #>  [9] 30.33867 30.00378 29.86528 29.50525 29.19749 29.35655 29.50133 31.10007 #> [17] 31.48909 31.78250 32.39399 #>  #> $Jordan$isHole #> [1] FALSE #>  #>  #> $Liberia #> $Liberia$x #>  [1]  -7.712159  -7.974107  -9.004794  -9.913420 -10.765384 -11.438779 #>  [7] -11.199802 -11.146704 -10.695595 -10.230094 -10.016567  -9.755342 #> [13]  -9.337280  -9.403348  -9.208786  -8.926065  -8.722124  -8.439298 #> [19]  -8.485446  -8.385452  -8.602880  -8.311348  -7.993693  -7.570153 #> [25]  -7.539715  -7.635368  -7.712159 #>  #> $Liberia$y #>  [1] 4.364566 4.355755 4.832419 5.593561 6.140711 6.785917 7.105846 7.396706 #>  [9] 7.939464 8.406206 8.428504 8.541055 7.928534 7.526905 7.313921 7.309037 #> [17] 7.711674 7.686043 7.395208 6.911801 6.467564 6.193033 6.126190 5.707352 #> [25] 5.313345 5.188159 4.364566 #>  #> $Liberia$isHole #> [1] FALSE #>  #>  #> $Ireland #> $Ireland$x #>  [1] -6.197885 -6.032985 -6.788857 -8.561617 -9.977086 -9.166283 -9.688525 #>  [8] -8.327987 -7.572168 -7.366031 -7.572168 -6.953730 -6.197885 #>  #> $Ireland$y #>  [1] 53.86757 53.15316 52.26012 51.66930 51.82045 52.86463 53.88136 54.66452 #>  [9] 55.13162 54.59584 54.05996 54.07370 53.86757 #>  #> $Ireland$isHole #> [1] FALSE #>  #>  #> $Georgia #> $Georgia$x #>  [1] 41.55408 41.70317 41.45347 40.87547 40.32139 39.95501 40.07696 40.92218 #>  [9] 42.39439 43.75602 43.93120 44.53762 45.47028 45.77641 46.40495 46.14543 #> [17] 46.63791 46.50164 45.96260 45.21743 44.97248 43.58275 42.61955 41.55408 #>  #> $Georgia$y #>  [1] 41.53566 41.96294 42.64512 43.01363 43.12863 43.43500 43.55310 43.38216 #>  [9] 43.22031 42.74083 42.55497 42.71199 42.50278 42.09244 41.86068 41.72280 #> [17] 41.18167 41.06444 41.12387 41.41145 41.24813 41.09214 41.58317 41.53566 #>  #> $Georgia$isHole #> [1] FALSE #>  #>  #> $`United Arab Emirates` #> $`United Arab Emirates`$x #>  [1] 51.57952 51.75744 51.79439 52.57708 53.40401 54.00800 54.69302 55.43902 #>  [9] 56.07082 56.26104 56.39685 55.88623 55.80412 55.98121 55.52863 55.52584 #> [17] 55.23449 55.20834 55.00680 52.00073 51.61771 51.57952 #>  #> $`United Arab Emirates`$y #>  [1] 24.24550 24.29407 24.01983 24.17744 24.15132 24.12176 24.79789 25.43915 #>  [9] 26.05546 25.71461 24.92473 24.92083 24.26960 24.13054 23.93360 23.52487 #> [17] 23.11099 22.70833 22.49695 23.00115 24.01422 24.24550 #>  #> $`United Arab Emirates`$isHole #> [1] FALSE #>  #>  #> $`French Guiana` #> $`French Guiana`$x #>  [1] -52.55642 -52.93966 -53.41847 -53.55484 -53.77852 -54.08806 -54.52475 #>  [8] -54.27123 -54.18428 -54.01150 -54.39954 -54.47863 -53.95804 -53.61845 #> [15] -52.88214 -51.82334 -51.65780 -52.24934 -52.55642 #>  #> $`French Guiana`$y #>  [1] 2.504705 2.124858 2.053389 2.334897 2.376703 2.105557 2.311849 2.738748 #>  [9] 3.194172 3.622570 4.212611 4.896756 5.756548 5.646529 5.409851 4.565768 #> [17] 4.156232 3.241094 2.504705 #>  #> $`French Guiana`$isHole #> [1] FALSE #>  #>  #> $Estonia #> $Estonia$x #>  [1] 24.31286 24.42893 24.06120 23.42656 23.33980 24.60421 25.86419 26.94914 #>  [9] 27.98111 28.13170 27.42017 27.71669 27.28818 26.46353 25.60281 25.16459 #> [17] 24.31286 #>  #> $Estonia$y #>  [1] 57.79342 58.38341 58.25737 58.61275 59.18724 59.46585 59.61109 59.44580 #>  [9] 59.47539 59.30083 58.72458 57.79190 57.47453 57.47639 57.84753 57.97016 #> [17] 57.79342 #>  #> $Estonia$isHole #> [1] FALSE #>  #>  #> $Croatia #> $Croatia$x #>  [1] 18.82984 19.07277 19.39048 19.00549 18.55321 17.86178 17.00215 16.53494 #>  [9] 16.31816 15.95937 15.75003 16.23966 16.45644 16.91616 17.29737 17.67492 #> [17] 18.56000 18.45002 17.50997 16.93001 16.01538 15.17445 15.37625 14.92031 #> [25] 14.90160 14.25875 13.95225 13.65698 13.67940 13.71506 14.41197 14.59511 #> [33] 14.93524 15.32767 15.32395 15.67153 15.76873 16.56481 16.88252 17.63007 #> [41] 18.45606 18.82984 #>  #> $Croatia$y #>  [1] 45.90888 45.52151 45.23652 44.86023 45.08159 45.06774 45.23378 45.21161 #>  [9] 45.00413 45.23378 44.81871 44.35114 44.04124 43.66772 43.44634 43.02856 #> [17] 42.65000 42.47999 42.84999 43.21000 43.50722 44.24319 44.31792 44.73848 #> [25] 45.07606 45.23378 44.80212 45.13694 45.48415 45.50032 45.46617 45.63494 #> [33] 45.47170 45.45232 45.73178 45.83415 46.23811 46.50375 46.38063 45.95177 #> [41] 45.75948 45.90888 #>  #> $Croatia$isHole #> [1] FALSE #>  #>  #> $`Sierra Leone` #> $`Sierra Leone`$x #>  [1] -11.43878 -11.70819 -12.42810 -12.94905 -13.12403 -13.24655 -12.71196 #>  [8] -12.59672 -12.42593 -12.15034 -11.91728 -11.11748 -10.83915 -10.62240 #> [15] -10.65477 -10.49432 -10.50548 -10.23009 -10.69559 -11.14670 -11.19980 #> [22] -11.43878 #>  #> $`Sierra Leone`$y #>  [1]  6.785917  6.860098  7.262942  7.798646  8.163946  8.903049  9.342712 #>  [8]  9.620188  9.835834  9.858572 10.046984 10.045873  9.688246  9.267910 #> [15]  8.977178  8.715541  8.348896  8.406206  7.939464  7.396706  7.105846 #> [22]  6.785917 #>  #> $`Sierra Leone`$isHole #> [1] FALSE #>  #>  #> $Panama #> $Panama$x #>  [1] -77.88157 -78.21494 -78.42916 -78.18210 -78.43547 -78.62212 -79.12031 #>  [8] -79.55788 -79.76058 -80.16448 -80.38266 -80.48069 -80.00369 -80.27667 #> [15] -80.42116 -80.88640 -81.05954 -81.18972 -81.51951 -81.72131 -82.13144 #> [22] -82.39093 -82.82008 -82.85096 -82.96578 -82.91318 -82.82977 -82.86866 #> [29] -82.71918 -82.92715 -82.93289 -82.54620 -82.18712 -82.20759 -81.80857 #> [36] -81.71415 -81.43929 -80.94730 -80.52190 -79.91460 -79.57330 -79.02119 #> [43] -79.05845 -78.50089 -78.05593 -77.72951 -77.35336 -77.47472 -77.24257 #> [50] -77.43111 -77.75341 -77.88157 #>  #> $Panama$y #>  [1] 7.223771 7.512255 8.052041 8.319182 8.387705 8.718124 8.996092 8.932375 #>  [9] 8.584515 8.333316 8.298409 8.090308 7.547524 7.419754 7.271572 7.220541 #> [17] 7.817921 7.647906 7.706610 8.108963 8.175393 8.292362 8.290864 8.073823 #> [25] 8.225028 8.423517 8.626295 8.807266 8.925709 9.074330 9.476812 9.566135 #> [33] 9.207449 8.995575 8.950617 9.031955 8.786234 8.858504 9.111072 9.312765 #> [41] 9.611610 9.552931 9.454565 9.420459 9.247730 8.946844 8.670505 8.524286 #> [49] 7.935278 7.638061 7.709840 7.223771 #>  #> $Panama$isHole #> [1] FALSE #>  #>  #> $Denmark1 #> $Denmark1$x #>  [1] 10.912182 10.667804 10.369993  9.649985  9.921906  9.282049  8.526229 #>  [8]  8.120311  8.089977  8.256582  8.543438  9.424469  9.775559 10.580006 #> [15] 10.546106 10.250000 10.369993 10.912182 #>  #> $Denmark1$y #>  [1] 56.45862 56.08138 56.19001 55.47000 54.98310 54.83087 54.96274 55.51772 #>  [9] 56.54001 56.80997 57.11000 57.17207 57.44794 57.73002 57.21573 56.89002 #> [17] 56.60998 56.45862 #>  #> $Denmark1$isHole #> [1] FALSE #>  #>  #> $Denmark2 #> $Denmark2$x #> [1] 12.69001 12.08999 11.04354 10.90391 12.37090 12.69001 #>  #> $Denmark2$y #> [1] 55.60999 54.80001 55.36486 55.77995 56.11141 55.60999 #>  #> $Denmark2$isHole #> [1] FALSE #>  #>  #> $Slovakia #> $Slovakia$x #>  [1] 18.85314 18.90957 19.32071 19.82502 20.41584 20.88796 21.60781 22.55814 #>  [9] 22.28084 22.08561 21.87224 20.80129 20.47356 20.23905 19.76947 19.66136 #> [17] 19.17436 18.77702 18.69651 17.85713 17.48847 16.97967 16.87998 16.96029 #> [25] 17.10198 17.54501 17.88648 17.91351 18.10497 18.17050 18.39999 18.55497 #> [33] 18.85314 #>  #> $Slovakia$y #>  [1] 49.49623 49.43585 49.57157 49.21713 49.43145 49.32877 49.47011 49.08574 #>  [9] 48.82539 48.42226 48.31997 48.62385 48.56285 48.32757 48.20269 48.26661 #> [17] 48.11138 48.08177 47.88095 47.75843 47.86747 48.12350 48.47001 48.59698 #> [25] 48.81697 48.80002 48.90348 48.99649 49.04398 49.27151 49.31500 49.49502 #> [33] 49.49623 #>  #> $Slovakia$isHole #> [1] FALSE #>  #>  #> $`Bosnia and Herz.` #> $`Bosnia and Herz.`$x #>  [1] 19.00549 19.36803 19.11761 19.59976 19.45400 19.21852 19.03165 18.70648 #>  [9] 18.56000 17.67492 17.29737 16.91616 16.45644 16.23966 15.75003 15.95937 #> [17] 16.31816 16.53494 17.00215 17.86178 18.55321 19.00549 #>  #> $`Bosnia and Herz.`$y #>  [1] 44.86023 44.86300 44.42307 44.03847 43.56810 43.52384 43.43253 43.20011 #>  [9] 42.65000 43.02856 43.44634 43.66772 44.04124 44.35114 44.81871 45.23378 #> [17] 45.00413 45.21161 45.23378 45.06774 45.08159 44.86023 #>  #> $`Bosnia and Herz.`$isHole #> [1] FALSE #>  #>  #> $Switzerland #> $Switzerland$x #>  [1]  9.594226  9.632932  9.479970  9.932448 10.442701 10.363378  9.922837 #>  [8]  9.182882  8.966306  8.489952  8.316630  7.755992  7.273851  6.843593 #> [15]  6.500100  6.022609  6.037389  6.768714  6.736571  7.192202  7.466759 #> [22]  8.317301  8.522612  9.594226 #>  #> $Switzerland$y #>  [1] 47.52506 47.34760 47.10281 46.92073 46.89355 46.48357 46.31490 46.44021 #>  [9] 46.03693 46.00515 46.16364 45.82449 45.77695 45.99115 46.42967 46.27299 #> [17] 46.72578 47.28771 47.54180 47.44977 47.62058 47.61358 47.83083 47.52506 #>  #> $Switzerland$isHole #> [1] FALSE #>  #>  #> $`Sri Lanka` #> $`Sri Lanka`$x #>  [1] 81.78796 81.63732 81.21802 80.34836 79.87247 79.69517 80.14780 80.83882 #>  [9] 81.30432 81.78796 #>  #> $`Sri Lanka`$y #>  [1] 7.523055 6.481775 6.197141 5.968370 6.763463 8.200843 9.824078 9.268427 #>  [9] 8.564206 7.523055 #>  #> $`Sri Lanka`$isHole #> [1] FALSE #>  #>  #> $Netherlands #> $Netherlands$x #>  [1] 6.074183 6.905140 7.092053 6.842870 6.589397 5.988658 6.156658 5.606976 #>  [9] 4.973991 4.047071 3.314971 3.830289 4.705997 6.074183 #>  #> $Netherlands$y #>  [1] 53.51040 53.48216 53.14404 52.22844 51.85203 51.85162 50.80372 51.03730 #>  [9] 51.47502 51.26726 51.34576 51.62054 53.09180 53.51040 #>  #> $Netherlands$isHole #> [1] FALSE #>  #>  #> $Togo #> $Togo$x #>  [1]  1.86524051  1.06012170  0.83693119  0.57038415  0.49095747  0.71202925 #>  [7]  0.46119185  0.36590051  0.36757999 -0.04978472  0.02380252  0.89956302 #> [13]  0.77233565  1.07779504  1.42506066  1.46304284  1.66447757  1.61895064 #> [19]  1.86524051 #>  #> $Togo$y #>  [1]  6.142158  5.928837  6.279979  6.914359  7.411744  8.312465  8.677223 #>  [8]  9.465004 10.191213 10.706918 11.018682 10.997339 10.470808 10.175607 #> [15]  9.825395  9.334624  9.128590  6.832038  6.142158 #>  #> $Togo$isHole #> [1] FALSE #>  #>  #> $`Costa Rica` #> $`Costa Rica`$x #>  [1] -82.96578 -83.50844 -83.71147 -83.59631 -83.63264 -83.90989 -84.30340 #>  [8] -84.64764 -84.71335 -84.97566 -84.91137 -85.11092 -85.33949 -85.66079 #> [15] -85.79744 -85.79171 -85.65931 -85.94173 -85.71254 -85.56185 -84.90300 #> [22] -84.67307 -84.35593 -84.19018 -83.89505 -83.65561 -83.40232 -83.01568 #> [29] -82.54620 -82.93289 -82.92715 -82.71918 -82.86866 -82.82977 -82.91318 #> [36] -82.96578 #>  #> $`Costa Rica`$y #>  [1]  8.225028  8.446927  8.656836  8.830443  9.051386  9.290803  9.487354 #>  [8]  9.615537  9.908052 10.086723  9.795992  9.557040  9.834542  9.933347 #> [15] 10.134886 10.439337 10.754331 10.895278 11.088445 11.217119 10.952303 #> [22] 11.082657 10.999226 10.793450 10.726839 10.938764 10.395438  9.992982 #> [29]  9.566135  9.476812  9.074330  8.925709  8.807266  8.626295  8.423517 #> [36]  8.225028 #>  #> $`Costa Rica`$isHole #> [1] FALSE #>  #>  #> $`Dominican Rep.` #> $`Dominican Rep.`$x #>  [1] -71.71236 -71.58730 -70.80671 -70.21436 -69.95082 -69.76925 -69.22213 #>  [8] -69.25435 -68.80941 -68.31794 -68.68932 -69.16495 -69.62399 -69.95293 #> [15] -70.13323 -70.51714 -70.66930 -70.99995 -71.40021 -71.65766 -71.70830 #> [22] -71.68774 -71.94511 -71.70130 -71.62487 -71.71236 #>  #> $`Dominican Rep.`$y #>  [1] 19.71446 19.88491 19.88029 19.62289 19.64800 19.29327 19.31321 19.01520 #>  [9] 18.97907 18.61220 18.20514 18.42265 18.38071 18.42831 18.24592 18.18429 #> [17] 18.42689 18.28333 17.59856 17.75757 18.04500 18.31666 18.61690 18.78542 #> [25] 19.16984 19.71446 #>  #> $`Dominican Rep.`$isHole #> [1] FALSE #>  #>  #> $Moldova #> $Moldova$x #>  [1] 26.61934 26.85782 27.52254 28.25955 28.67089 29.12270 29.05087 29.41514 #>  [9] 29.55967 29.90885 29.83821 30.02466 29.75997 29.17065 29.07211 28.86297 #> [17] 28.93372 28.65999 28.48527 28.23355 28.05444 28.16002 28.12803 27.55117 #> [25] 27.23387 26.92418 26.61934 #>  #> $Moldova$y #>  [1] 48.22073 48.36821 48.46712 48.15556 48.11815 47.84910 47.51023 47.34665 #>  [9] 46.92858 46.67436 46.52533 46.42394 46.34999 46.37926 46.51768 46.43789 #> [17] 46.25883 45.93999 45.59691 45.48828 45.94459 46.37156 46.81048 47.40512 #> [25] 47.82677 48.12326 48.22073 #>  #> $Moldova$isHole #> [1] FALSE #>  #>  #> $Belgium #> $Belgium$x #>  [1] 3.314971 4.047071 4.973991 5.606976 6.156658 6.043073 5.782417 5.674052 #>  [9] 4.799222 4.286023 3.588184 3.123252 2.658422 2.513573 3.314971 #>  #> $Belgium$y #>  [1] 51.34578 51.26726 51.47502 51.03730 50.80372 50.12805 50.09033 49.52948 #>  [9] 49.98537 49.90750 50.37899 50.78036 50.79685 51.14851 51.34578 #>  #> $Belgium$isHole #> [1] FALSE #>  #>  #> $Bhutan #> $Bhutan$x #>  [1] 91.69666 92.10371 92.03348 91.21751 90.37327 89.74453 88.83564 88.81425 #>  [9] 89.47581 90.01583 90.73051 91.25885 91.69666 #>  #> $Bhutan$y #>  [1] 27.77174 27.45261 26.83831 26.80865 26.87572 26.71940 27.09897 27.29932 #>  [9] 28.04276 28.29644 28.06495 28.04061 27.77174 #>  #> $Bhutan$isHole #> [1] FALSE #>  #>  #> $Albania #> $Albania$x #>  [1] 20.59025 20.46318 20.60518 21.02004 20.99999 20.67500 20.61500 20.15002 #>  [9] 19.98000 19.96000 19.40608 19.31906 19.40355 19.54003 19.37177 19.30449 #> [17] 19.73805 19.80161 20.07070 20.28375 20.52295 20.59025 #>  #> $Albania$y #>  [1] 41.85540 41.51509 41.08623 40.84273 40.58000 40.43500 40.11001 39.62500 #>  [9] 39.69499 39.91501 40.25077 40.72723 41.40957 41.71999 41.87755 42.19575 #> [17] 42.68825 42.50009 42.58863 42.32026 42.21787 41.85540 #>  #> $Albania$isHole #> [1] FALSE #>  #>  #> $Taiwan #> $Taiwan$x #> [1] 121.7778 121.1756 120.7471 120.2201 120.1062 120.6947 121.4950 121.9512 #> [9] 121.7778 #>  #> $Taiwan$y #> [1] 24.39427 22.79086 21.97057 22.81486 23.55626 24.53845 25.29546 24.99760 #> [9] 24.39427 #>  #> $Taiwan$isHole #> [1] FALSE #>  #>  #> $Armenia #> $Armenia$x #>  [1] 43.58275 44.97248 45.17950 45.56035 45.35917 45.89191 45.61001 46.03453 #>  [9] 46.48350 46.50572 46.14362 45.73538 45.73998 45.29814 45.00199 44.79399 #> [17] 44.40001 43.65644 43.75266 43.58275 #>  #> $Armenia$y #>  [1] 41.09214 41.24813 40.98535 40.81229 40.56150 40.21848 39.89999 39.62802 #>  [9] 39.46415 38.77061 38.74120 39.31972 39.47400 39.47175 39.74000 39.71300 #> [17] 40.00500 40.25356 40.74020 41.09214 #>  #> $Armenia$isHole #> [1] FALSE #>  #>  #> $`Guinea Bissau` #> $`Guinea Bissau`$x #>  [1] -15.13031 -15.66418 -16.08521 -16.31479 -16.30895 -16.61384 -16.67745 #>  [8] -16.14772 -15.81657 -15.54848 -13.70048 -13.71874 -13.82827 -13.74316 #> [15] -13.90080 -14.12141 -14.38219 -14.68569 -15.13031 #>  #> $`Guinea Bissau`$y #>  [1] 11.04041 11.45847 11.52459 11.80651 11.95870 12.17091 12.38485 12.54776 #>  [9] 12.51557 12.62817 12.58618 12.24719 12.14264 11.81127 11.67872 11.67712 #> [17] 11.50927 11.52782 11.04041 #>  #> $`Guinea Bissau`$isHole #> [1] FALSE #>  #>  #> $Macedonia #> $Macedonia$x #>  [1] 20.59023 20.71731 20.76216 21.35270 21.57664 21.91708 22.38053 22.88137 #>  [9] 22.95238 22.76177 22.59731 22.05538 21.67416 21.02004 20.60518 20.46315 #> [17] 20.59023 #>  #> $Macedonia$y #>  [1] 41.85541 41.84711 42.05186 42.20680 42.24522 42.30364 42.32026 41.99930 #>  [9] 41.33799 41.30480 41.13049 41.14987 40.93127 40.84273 41.08622 41.51509 #> [17] 41.85541 #>  #> $Macedonia$isHole #> [1] FALSE #>  #>  #> $Lesotho #> $Lesotho$x #>  [1] 28.97826 29.32517 29.01842 28.84840 28.29107 28.10720 27.74940 26.99926 #>  [9] 27.53251 28.07434 28.54170 28.97826 #>  #> $Lesotho$y #>  [1] -28.95560 -29.25739 -29.74377 -30.07005 -30.22622 -30.54573 -30.64511 #>  [8] -29.87595 -29.24271 -28.85147 -28.64750 -28.95560 #>  #> $Lesotho$isHole #> [1] FALSE #>  #>  #> $Haiti #> $Haiti$x #>  [1] -73.18979 -72.57967 -71.71236 -71.62487 -71.70130 -71.94511 -71.68774 #>  [8] -71.70830 -72.37248 -72.84441 -73.45455 -73.92243 -74.45803 -74.36993 #> [15] -73.44954 -72.69494 -72.33488 -72.79165 -72.78410 -73.41502 -73.18979 #>  #> $Haiti$y #>  [1] 19.91568 19.87150 19.71446 19.16984 18.78542 18.61690 18.31666 18.04500 #>  [9] 18.21496 18.14561 18.21791 18.03099 18.34255 18.66491 18.52605 18.44580 #> [17] 18.66842 19.10163 19.48359 19.63955 19.91568 #>  #> $Haiti$isHole #> [1] FALSE #>  #>  #> $Slovenia #> $Slovenia$x #>  [1] 13.80648 14.63247 15.13709 16.01166 16.20230 16.37050 16.56481 15.76873 #>  [9] 15.67153 15.32395 15.32767 14.93524 14.59511 14.41197 13.71506 13.93763 #> [17] 13.69811 13.80648 #>  #> $Slovenia$y #>  [1] 46.50931 46.43182 46.65870 46.68361 46.85239 46.84133 46.50375 46.23811 #>  [9] 45.83415 45.73178 45.45232 45.47170 45.63494 45.46617 45.50032 45.59102 #> [17] 46.01678 46.50931 #>  #> $Slovenia$isHole #> [1] FALSE #>  #>  #> $`Eq. Guinea` #> $`Eq. Guinea`$x #> [1]  9.492889  9.305613  9.649158 11.276449 11.285079  9.830284  9.492889 #>  #> $`Eq. Guinea`$y #> [1] 1.010120 1.160911 2.283866 2.261051 1.057662 1.067894 1.010120 #>  #> $`Eq. Guinea`$isHole #> [1] FALSE #>  #>  #> $Israel #> $Israel$x #>  [1] 35.71992 35.54567 35.18393 34.97464 35.22589 34.97051 34.92741 35.39756 #>  [9] 35.42092 34.92260 34.26543 34.55637 34.48811 34.75259 34.95542 35.09846 #> [17] 35.12605 35.46071 35.55280 35.82110 35.83640 35.70080 35.71992 #>  #> $Israel$y #>  [1] 32.70919 32.39399 32.53251 31.86658 31.75434 31.61678 31.35344 31.48909 #>  [9] 31.10007 29.50133 31.21936 31.54882 31.60554 32.07293 32.82738 33.08054 #> [17] 33.09090 33.08904 33.26427 33.27743 32.86812 32.71601 32.70919 #>  #> $Israel$isHole #> [1] FALSE #>  #>  #> $Burundi #> $Burundi$x #>  [1] 29.34000 29.27638 29.02493 29.63218 29.93836 30.46970 30.52768 30.74301 #>  [9] 30.75226 30.50556 30.11633 29.75351 29.34000 #>  #> $Burundi$y #>  [1] -4.499983 -3.293907 -2.839258 -2.917858 -2.348487 -2.413858 -2.807632 #>  [8] -3.034285 -3.359330 -3.568567 -4.090138 -4.452389 -4.499983 #>  #> $Burundi$isHole #> [1] FALSE #>  #>  #> $`Falkland Is.` #> $`Falkland Is.`$x #>  [1] -61.20 -60.00 -59.15 -58.55 -57.75 -58.05 -59.40 -59.85 -60.70 -61.20 #>  #> $`Falkland Is.`$y #>  [1] -51.85 -51.25 -51.50 -51.10 -51.55 -51.90 -52.20 -51.85 -52.30 -51.85 #>  #> $`Falkland Is.`$isHole #> [1] FALSE #>  #>  #> $`Solomon Is.1` #> $`Solomon Is.1`$x #> [1] 159.8750 159.9174 159.1337 158.5861 158.2111 158.3600 158.8200 159.6400 #> [9] 159.8750 #>  #> $`Solomon Is.1`$y #> [1] -8.337320 -8.538290 -8.114181 -7.754824 -7.421872 -7.320018 -7.560003 #> [8] -8.020027 -8.337320 #>  #> $`Solomon Is.1`$isHole #> [1] FALSE #>  #>  #> $`Solomon Is.2` #> $`Solomon Is.2`$x #> [1] 160.8522 160.4626 159.8494 159.6400 159.7029 160.3630 160.6885 160.8522 #>  #> $`Solomon Is.2`$y #> [1] -9.872937 -9.895210 -9.794027 -9.639980 -9.242950 -9.400304 -9.610162 #> [8] -9.872937 #>  #> $`Solomon Is.2`$isHole #> [1] FALSE #>  #>  #> $`Solomon Is.3` #> $`Solomon Is.3`$x #> [1] 161.6800 161.5294 160.7883 160.5800 160.9200 161.2800 161.6800 #>  #> $`Solomon Is.3`$y #> [1] -9.599982 -9.784312 -8.917543 -8.320009 -8.320009 -9.120011 -9.599982 #>  #> $`Solomon Is.3`$isHole #> [1] FALSE #>  #>  #> $`Solomon Is.4` #> $`Solomon Is.4`$x #> [1] 162.1190 162.3986 161.7000 161.3198 161.9174 162.1190 #>  #> $`Solomon Is.4`$y #> [1] -10.48272 -10.82637 -10.82001 -10.20475 -10.44670 -10.48272 #>  #> $`Solomon Is.4`$isHole #> [1] FALSE #>  #>  #> $`Solomon Is.5` #> $`Solomon Is.5`$x #> [1] 157.5384 157.3394 156.9020 156.4914 156.5428 157.1400 157.5384 #>  #> $`Solomon Is.5`$y #> [1] -7.347820 -7.404767 -7.176874 -6.765943 -6.599338 -7.021638 -7.347820 #>  #> $`Solomon Is.5`$isHole #> [1] FALSE #>  #>  #> $`New Caledonia` #> $`New Caledonia`$x #>  [1] 165.7800 166.6000 167.1200 166.7400 166.1897 165.4744 164.8298 164.1680 #>  [9] 164.0296 164.4600 165.0200 165.4600 165.7800 #>  #> $`New Caledonia`$y #>  [1] -21.08000 -21.70002 -22.15999 -22.39998 -22.12971 -21.67961 -21.14982 #>  [8] -20.44475 -20.10565 -20.12001 -20.45999 -20.80002 -21.08000 #>  #> $`New Caledonia`$isHole #> [1] FALSE #>  #>  #> $Rwanda #> $Rwanda$x #>  [1] 30.41910 30.81613 30.75831 30.46970 29.93836 29.63218 29.02493 29.11748 #>  [9] 29.25483 29.29189 29.57947 29.82152 30.41910 #>  #> $Rwanda$y #>  [1] -1.134659 -1.698914 -2.287250 -2.413858 -2.348487 -2.917858 -2.839258 #>  [8] -2.292211 -2.215110 -1.620056 -1.341313 -1.443322 -1.134659 #>  #> $Rwanda$isHole #> [1] FALSE #>  #>  #> $Belize #> $Belize$x #>  [1] -89.14308 -89.15091 -89.02986 -88.84834 -88.49012 -88.30003 -88.29634 #>  [8] -88.10681 -88.12348 -88.28535 -88.19787 -88.30264 -88.23952 -88.35543 #> [15] -88.55182 -88.73243 -88.93061 -89.22912 -89.15081 -89.14308 #>  #> $Belize$y #>  [1] 17.80832 17.95547 18.00151 17.88320 18.48683 18.49998 18.35327 18.34867 #>  [9] 18.07667 17.64414 17.48948 17.13169 17.03607 16.53077 16.26547 16.23363 #> [17] 15.88727 15.88694 17.01558 17.80832 #>  #> $Belize$isHole #> [1] FALSE #>  #>  #> $Djibouti #> $Djibouti$x #>  [1] 43.08123 43.31785 43.28638 42.71587 43.14530 42.77685 42.55493 42.31414 #>  [9] 41.75557 41.73959 41.66176 42.00000 42.35156 42.77964 43.08123 #>  #> $Djibouti$y #>  [1] 12.69964 12.39015 11.97493 11.73564 11.46204 10.92688 11.10511 11.03420 #>  [9] 11.05091 11.35511 11.63120 12.10000 12.54223 12.45542 12.69964 #>  #> $Djibouti$isHole #> [1] FALSE #>  #>  #> $`El Salvador` #> $`El Salvador`$x #>  [1] -87.79311 -87.90411 -88.48330 -88.84323 -89.25674 -89.81239 -90.09555 #>  [8] -90.06468 -89.72193 -89.53422 -89.58734 -89.35333 -89.05851 -88.84307 #> [15] -88.54123 -88.50400 -88.06534 -87.85952 -87.72350 -87.79311 #>  #> $`El Salvador`$y #>  [1] 13.38448 13.14902 13.16395 13.25973 13.45853 13.52062 13.73534 13.88197 #>  [9] 14.13423 14.24482 14.36259 14.42413 14.34003 14.14051 13.98015 13.84549 #> [17] 13.96463 13.89331 13.78505 13.38448 #>  #> $`El Salvador`$isHole #> [1] FALSE #>  #>  #> $Swaziland #> $Swaziland$x #>  [1] 32.07167 31.86806 31.28277 30.68596 30.67661 30.94967 31.04408 31.33316 #>  [9] 31.83778 31.98578 32.07167 #>  #> $Swaziland$y #>  [1] -26.73382 -27.17793 -27.28588 -26.74385 -26.39808 -26.02265 -25.73145 #>  [8] -25.66019 -25.84333 -26.29178 -26.73382 #>  #> $Swaziland$isHole #> [1] FALSE #>  #>  #> $Fiji1 #> $Fiji1$x #> [1] 178.3736 178.7181 178.5527 177.9327 177.3815 177.2850 177.6709 178.1256 #> [9] 178.3736 #>  #> $Fiji1$y #> [1] -17.33992 -17.62846 -18.15059 -18.28799 -18.16432 -17.72465 -17.38114 #> [8] -17.50481 -17.33992 #>  #> $Fiji1$isHole #> [1] FALSE #>  #>  #> $Fiji2 #> $Fiji2$x #> [1] 179.3641 178.7251 178.5968 179.0966 179.4135 180.0000 180.0000 179.3641 #>  #> $Fiji2$y #> [1] -16.80135 -17.01204 -16.63915 -16.43398 -16.37905 -16.06713 -16.55522 #> [8] -16.80135 #>  #> $Fiji2$isHole #> [1] FALSE #>  #>  #> $Fiji3 #> $Fiji3$x #> [1] -179.9174 -180.0000 -180.0000 -179.7933 -179.9174 #>  #> $Fiji3$y #> [1] -16.50178 -16.55522 -16.06713 -16.02088 -16.50178 #>  #> $Fiji3$isHole #> [1] FALSE #>  #>  #> $Kuwait #> $Kuwait$x #> [1] 47.97452 48.18319 48.09394 48.41609 47.70885 47.45982 46.56871 47.30262 #> [9] 47.97452 #>  #> $Kuwait$y #> [1] 29.97582 29.53448 29.30630 28.55200 28.52606 29.00252 29.09903 30.05907 #> [9] 29.97582 #>  #> $Kuwait$isHole #> [1] FALSE #>  #>  #> $Montenegro #> $Montenegro$x #>  [1] 19.80161 19.73805 19.30449 19.37177 19.16246 18.88214 18.45000 18.56000 #>  [9] 18.70648 19.03165 19.21852 19.48389 19.63000 19.95857 20.33980 20.25758 #> [17] 20.07070 19.80161 #>  #> $Montenegro$y #>  [1] 42.50009 42.68825 42.19574 41.87755 41.95502 42.28151 42.48000 42.65000 #>  [9] 43.20011 43.43253 43.52384 43.35229 43.21378 43.10604 42.89852 42.81275 #> [17] 42.58863 42.50009 #>  #> $Montenegro$isHole #> [1] FALSE #>  #>  #> $`Fr. S. and Antarctic Lands` #> $`Fr. S. and Antarctic Lands`$x #> [1] 68.9350 69.5800 70.5250 70.5600 70.2800 68.7450 68.7200 68.8675 68.9350 #>  #> $`Fr. S. and Antarctic Lands`$y #> [1] -48.6250 -48.9400 -49.0650 -49.2550 -49.7100 -49.7750 -49.2425 -48.8300 #> [9] -48.6250 #>  #> $`Fr. S. and Antarctic Lands`$isHole #> [1] FALSE #>  #>  #> $Bahamas1 #> $Bahamas1$x #> [1] -77.53466 -77.78000 -78.03405 -78.40848 -78.19087 -77.89000 -77.54000 #> [8] -77.53466 #>  #> $Bahamas1$y #> [1] 23.75975 23.71000 24.28615 24.57564 25.21030 25.17000 24.34000 23.75975 #>  #> $Bahamas1$isHole #> [1] FALSE #>  #>  #> $Bahamas2 #> $Bahamas2$x #> [1] -77.82 -78.91 -78.98 -78.51 -77.85 -77.82 #>  #> $Bahamas2$y #> [1] 26.58 26.42 26.79 26.87 26.84 26.58 #>  #> $Bahamas2$isHole #> [1] FALSE #>  #>  #> $Bahamas3 #> $Bahamas3$x #> [1] -77.00000 -77.17255 -77.35641 -77.34000 -77.78802 -77.79000 -77.00000 #>  #> $Bahamas3$y #> [1] 26.59000 25.87918 26.00735 26.53000 26.92516 27.04000 26.59000 #>  #> $Bahamas3$isHole #> [1] FALSE #>  #>  #> $Kosovo #> $Kosovo$x #>  [1] 20.76216 20.71731 20.59023 20.52295 20.28374 20.07070 20.25758 20.49679 #>  [9] 20.63508 20.81448 20.95651 21.14340 21.27421 21.43866 21.63302 21.77505 #> [17] 21.66292 21.54332 21.57664 21.35270 20.76216 #>  #> $Kosovo$y #>  [1] 42.05186 41.84711 41.85541 42.21787 42.32025 42.58863 42.81275 42.88469 #>  [9] 43.21671 43.27205 43.13094 43.06869 42.90959 42.86255 42.67717 42.68270 #> [17] 42.43922 42.32025 42.24522 42.20680 42.05186 #>  #> $Kosovo$isHole #> [1] FALSE #>  #>  #> $`East Timor` #> $`East Timor`$x #>  [1] 124.9687 125.0862 125.9471 126.6447 126.9572 127.3359 126.9680 125.9259 #>  [9] 125.0885 125.0700 124.9687 #>  #> $`East Timor`$y #>  [1] -8.892790 -8.656887 -8.432095 -8.398247 -8.273345 -8.397317 -8.668256 #>  [8] -9.106007 -9.393173 -9.089987 -8.892790 #>  #> $`East Timor`$isHole #> [1] FALSE #>  #>  #> $Gambia #> $Gambia$x #>  [1] -16.84152 -16.71373 -15.62460 -15.39877 -15.08174 -14.68703 -14.37671 #>  [8] -14.04699 -13.84496 -14.27770 -14.71220 -15.14116 -15.51181 -15.69100 #> [15] -15.93130 -16.84152 #>  #> $Gambia$y #>  [1] 13.15139 13.59496 13.62359 13.86037 13.87649 13.63036 13.62568 13.79407 #>  [9] 13.50504 13.28059 13.29821 13.50951 13.27857 13.27035 13.13028 13.15139 #>  #> $Gambia$isHole #> [1] FALSE #>  #>  #> $Jamaica #> $Jamaica$x #>  [1] -77.56960 -76.89662 -76.36536 -76.19966 -76.90256 -77.20634 -77.76602 #>  [8] -78.33772 -78.21773 -77.79736 -77.56960 #>  #> $Jamaica$y #>  [1] 18.49053 18.40087 18.16070 17.88687 17.86824 17.70112 17.86160 18.22597 #>  [9] 18.45453 18.52422 18.49053 #>  #> $Jamaica$isHole #> [1] FALSE #>  #>  #> $Qatar #> $Qatar$x #> [1] 50.81011 50.74391 51.01335 51.28646 51.58908 51.60670 51.38961 51.11242 #> [9] 50.81011 #>  #> $Qatar$y #> [1] 24.75474 25.48242 26.00699 26.11458 25.80111 25.21567 24.62739 24.55633 #> [9] 24.75474 #>  #> $Qatar$isHole #> [1] FALSE #>  #>  #> $Lebanon #> $Lebanon$x #>  [1] 35.82110 35.55280 35.46071 35.12605 35.48221 35.97959 35.99840 36.44819 #>  [9] 36.61175 36.06646 35.82110 #>  #> $Lebanon$y #>  [1] 33.27743 33.26427 33.08904 33.09090 33.90545 34.61006 34.64491 34.59394 #>  [9] 34.20179 33.82491 33.27743 #>  #> $Lebanon$isHole #> [1] FALSE #>  #>  #> $Brunei #> $Brunei$x #> [1] 114.2040 114.6000 115.4507 115.4057 115.3475 114.8696 114.6596 114.2040 #>  #> $Brunei$y #> [1] 4.525874 4.900011 5.447730 4.955228 4.316636 4.348314 4.007637 4.525874 #>  #> $Brunei$isHole #> [1] FALSE #>  #>  #> $`Puerto Rico` #> $`Puerto Rico`$x #> [1] -66.28243 -65.77130 -65.59100 -65.84716 -66.59993 -67.18416 -67.24243 #> [8] -67.10068 -66.28243 #>  #> $`Puerto Rico`$y #> [1] 18.51476 18.42668 18.22803 17.97591 17.98182 17.94655 18.37446 18.52060 #> [9] 18.51476 #>  #> $`Puerto Rico`$isHole #> [1] FALSE #>  #>  #> $`Trinidad and Tobago` #> $`Trinidad and Tobago`$x #> [1] -61.680 -61.105 -60.895 -60.935 -61.770 -61.950 -61.660 -61.680 #>  #> $`Trinidad and Tobago`$y #> [1] 10.760 10.890 10.855 10.110 10.000 10.090 10.365 10.760 #>  #> $`Trinidad and Tobago`$isHole #> [1] FALSE #>  #>  #> $Vanuatu1 #> $Vanuatu1$x #> [1] 167.1077 167.2700 167.0012 166.7932 166.6499 166.6291 167.1077 #>  #> $Vanuatu1$y #> [1] -14.93392 -15.74002 -15.61460 -15.66881 -15.39270 -14.62650 -14.93392 #>  #> $Vanuatu1$isHole #> [1] FALSE #>  #>  #> $Vanuatu2 #> $Vanuatu2$x #> [1] 167.8449 167.5152 167.1800 167.2168 167.8449 #>  #> $Vanuatu2$y #> [1] -16.46633 -16.59785 -16.16000 -15.89185 -16.46633 #>  #> $Vanuatu2$isHole #> [1] FALSE #>  #>  #> $Cyprus #> $Cyprus$x #>  [1] 33.97362 34.00488 32.97983 32.49030 32.25667 32.73178 32.91957 33.19098 #>  [9] 33.38383 33.45592 33.47582 33.52569 33.67539 33.86644 33.97362 #>  #> $Cyprus$y #>  [1] 35.05851 34.97810 34.57187 34.70165 35.10323 35.14003 35.08783 35.17312 #>  [9] 35.16271 35.10142 35.00034 35.03869 35.01786 35.09359 35.05851 #>  #> $Cyprus$isHole #> [1] FALSE #>  #>  #> $`S. Geo. and S. Sandw. Is.1` #> $`S. Geo. and S. Sandw. Is.1`$x #>  [1] -37.10334 -37.00608 -36.92890 -36.84893 -36.80519 -36.76008 -36.70380 #>  [8] -36.60688 -36.64742 -36.54102 -36.44862 -36.40676 -36.38581 -36.32646 #> [15] -36.28527 -36.23564 -36.17262 -36.11691 -36.07314 -36.03309 -35.96465 #> [22] -35.89532 -35.92155 -35.91331 -35.79858 -35.86695 -35.93891 -36.08549 #> [29] -36.12363 -36.25171 -36.31147 -36.44575 -36.47208 -36.50655 -36.62809 #> [36] -36.73499 -36.82387 -36.85172 -36.88599 -37.00675 -37.08280 -37.15811 #> [43] -37.49763 -37.63090 -37.69229 -37.68901 -37.61886 -37.91277 -38.01742 #> [50] -37.94548 -37.53582 -37.38221 -37.36875 -37.23281 -37.10334 #>  #> $`S. Geo. and S. Sandw. Is.1`$y #>  [1] -54.06564 -54.11427 -54.08114 -54.08502 -54.10150 -54.10776 -54.10807 #>  [8] -54.18987 -54.26227 -54.24801 -54.30842 -54.30335 -54.27896 -54.25116 #> [15] -54.28868 -54.36045 -54.38226 -54.45828 -54.55409 -54.56768 -54.56804 #> [22] -54.55476 -54.63754 -54.71082 -54.76343 -54.79237 -54.83428 -54.86678 #> [29] -54.85293 -54.77986 -54.69377 -54.57067 -54.53445 -54.51119 -54.49610 #> [36] -54.46660 -54.40433 -54.36604 -54.33947 -54.34092 -54.31152 -54.27152 #> [43] -54.15582 -54.16744 -54.13478 -54.07675 -54.04213 -54.02890 -54.00802 #> [50] -53.99562 -53.99376 -53.98409 -54.00921 -54.06052 -54.06564 #>  #> $`S. Geo. and S. Sandw. Is.1`$isHole #> [1] FALSE #>  #>  #> $`S. Geo. and S. Sandw. Is.2` #> $`S. Geo. and S. Sandw. Is.2`$x #> [1] -26.26413 -26.25984 -26.41533 -26.45104 -26.40123 -26.30345 -26.27937 #> [8] -26.26413 #>  #> $`S. Geo. and S. Sandw. Is.2`$y #> [1] -58.43514 -58.49230 -58.43984 -58.41530 -58.38326 -58.38222 -58.40176 #> [8] -58.43514 #>  #> $`S. Geo. and S. Sandw. Is.2`$isHole #> [1] FALSE #>  #>  #> $`West Bank` #> $`West Bank`$x #> [1] 35.54567 35.54525 35.39756 34.92741 34.97051 35.22589 34.97464 35.18393 #> [9] 35.54567 #>  #> $`West Bank`$y #> [1] 32.39399 31.78250 31.48909 31.35344 31.61678 31.75434 31.86658 32.53251 #> [9] 32.39399 #>  #> $`West Bank`$isHole #> [1] FALSE #>  #>  #> $`N. Cyprus` #> $`N. Cyprus`$x #>  [1] 32.73178 32.80247 32.94696 33.66723 34.57647 33.90080 33.97362 33.86644 #>  [9] 33.67539 33.52569 33.47582 33.45592 33.38383 33.19098 32.91957 32.73178 #>  #> $`N. Cyprus`$y #>  [1] 35.14003 35.14550 35.38670 35.37322 35.67160 35.24576 35.05851 35.09359 #>  [9] 35.01786 35.03869 35.00034 35.10142 35.16271 35.17312 35.08783 35.14003 #>  #> $`N. Cyprus`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde1` #> $`Cape Verde1`$x #>  [1] -23.44425 -23.50466 -23.63721 -23.70537 -23.78500 -23.78252 -23.75446 #>  [8] -23.75937 -23.74811 -23.70720 -23.70064 -23.58000 -23.53525 -23.44425 #>  #> $`Cape Verde1`$y #>  [1] 15.00797 14.91609 14.92348 14.96131 15.07691 15.16610 15.24357 15.31080 #>  [9] 15.32852 15.31689 15.27163 15.16088 15.13928 15.00797 #>  #> $`Cape Verde1`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde2` #> $`Cape Verde2`$x #>  [1] -25.16983 -25.26724 -25.30832 -25.32191 -25.34155 -25.33710 -25.11345 #>  [8] -25.03464 -24.97966 -25.01707 -25.16983 #>  #> $`Cape Verde2`$y #>  [1] 16.94651 16.92594 16.93587 17.01540 17.06774 17.09100 17.19368 17.17647 #>  [9] 17.09472 17.04930 16.94651 #>  #> $`Cape Verde2`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde3` #> $`Cape Verde3`$x #>  [1] -22.91772 -22.83431 -22.80263 -22.74943 -22.69261 -22.68189 -22.71011 #>  [8] -22.82051 -22.88408 -22.95926 -22.91614 -22.91772 #>  #> $`Cape Verde3`$y #>  [1] 16.23725 16.21898 16.22552 16.22154 16.16904 16.11328 16.04336 15.98605 #>  [9] 15.99272 16.04512 16.14842 16.23725 #>  #> $`Cape Verde3`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde4` #> $`Cape Verde4`$x #>  [1] -24.30825 -24.38610 -24.44054 -24.49217 -24.51710 -24.49690 -24.39197 #>  [8] -24.32947 -24.29577 -24.30825 #>  #> $`Cape Verde4`$y #>  [1] 14.85630 14.81822 14.83481 14.87423 14.93123 14.98027 15.03831 15.01950 #>  [9] 14.92953 14.85630 #>  #> $`Cape Verde4`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde5` #> $`Cape Verde5`$x #>  [1] -24.08772 -24.04638 -24.03274 -24.09413 -24.24304 -24.28280 -24.32233 #>  [8] -24.39809 -24.39292 -24.37670 -24.27107 -24.08772 #>  #> $`Cape Verde5`$y #>  [1] 16.62250 16.59307 16.57201 16.56106 16.59940 16.57594 16.49310 16.61842 #>  [9] 16.66446 16.67779 16.64488 16.62250 #>  #> $`Cape Verde5`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde6` #> $`Cape Verde6`$x #>  [1] -23.18215 -23.20995 -23.25181 -23.24248 -23.24715 -23.21026 -23.13776 #>  [8] -23.11931 -23.11587 -23.18215 #>  #> $`Cape Verde6`$y #>  [1] 15.13675 15.13308 15.17814 15.24054 15.25700 15.32356 15.31772 15.26842 #>  [9] 15.16667 15.13675 #>  #> $`Cape Verde6`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde7` #> $`Cape Verde7`$x #> [1] -24.88705 -24.96917 -25.01997 -25.09304 -25.07009 -24.99103 -24.93646 #> [8] -24.89191 -24.88705 #>  #> $`Cape Verde7`$y #> [1] 16.81810 16.79417 16.79722 16.83251 16.87070 16.91323 16.92212 16.84649 #> [9] 16.81810 #>  #> $`Cape Verde7`$isHole #> [1] FALSE #>  #>  #> $`Cape Verde8` #> $`Cape Verde8`$x #> [1] -22.88831 -22.92025 -22.95942 -22.98061 -22.99089 -22.93288 -22.90475 #> [8] -22.90392 -22.88831 #>  #> $`Cape Verde8`$y #> [1] 16.65909 16.60793 16.68304 16.70089 16.80885 16.84101 16.84373 16.73211 #> [9] 16.65909 #>  #> $`Cape Verde8`$isHole #> [1] FALSE #>  #>  #> $Luxembourg #> $Luxembourg$x #> [1] 6.043073 6.242751 6.186320 5.897759 5.674052 5.782417 6.043073 #>  #> $Luxembourg$y #> [1] 50.12805 49.90223 49.46380 49.44267 49.52948 50.09033 50.12805 #>  #> $Luxembourg$isHole #> [1] FALSE #>  #>  #> $Samoa1 #> $Samoa1$x #>  [1] -172.3335 -172.2215 -172.1768 -172.2249 -172.3309 -172.4845 -172.5357 #>  [8] -172.6588 -172.7441 -172.7785 -172.6696 -172.5109 -172.3335 #>  #> $Samoa1$y #>  [1] -13.46528 -13.55953 -13.68469 -13.80427 -13.77471 -13.80024 -13.79166 #>  [8] -13.64480 -13.57876 -13.51685 -13.52388 -13.48285 -13.46528 #>  #> $Samoa1$isHole #> [1] FALSE #>  #>  #> $Samoa2 #> $Samoa2$x #>  [1] -171.4541 -171.7282 -171.8638 -171.9119 -172.0281 -172.0459 -171.9849 #>  [8] -171.8581 -171.6039 -171.5654 -171.5069 -171.4614 -171.4496 -171.4541 #>  #> $Samoa2$y #>  [1] -14.04653 -14.04726 -14.00209 -14.00168 -13.90680 -13.85709 -13.82443 #>  [8] -13.80717 -13.87920 -13.94308 -13.94990 -13.97760 -14.02250 -14.04653 #>  #> $Samoa2$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia1` #> $`Fr. Polynesia1`$x #>  [1] -149.3215 -149.1777 -149.1509 -149.1818 -149.2545 -149.2905 -149.3411 #>  [8] -149.4817 -149.5789 -149.6328 -149.6350 -149.6114 -149.5081 -149.3792 #> [15] -149.3301 -149.3215 #>  #> $`Fr. Polynesia1`$y #>  [1] -17.69003 -17.73664 -17.81209 -17.86232 -17.84992 -17.82243 -17.73241 #>  [8] -17.75277 -17.73499 -17.61758 -17.56425 -17.53169 -17.49635 -17.52239 #> [15] -17.58895 -17.69003 #>  #> $`Fr. Polynesia1`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia2` #> $`Fr. Polynesia2`$x #> [1] -139.0243 -138.8745 -138.8274 -138.8749 -139.0243 -139.0737 -139.1341 #> [8] -139.1664 -139.0243 #>  #> $`Fr. Polynesia2`$y #> [1] -9.695170 -9.747157 -9.741576 -9.792839 -9.820744 -9.845652 -9.829529 #> [8] -9.770204 -9.695170 #>  #> $`Fr. Polynesia2`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia3` #> $`Fr. Polynesia3`$x #>  [1] -140.0726 -140.1706 -140.2174 -140.2527 -140.2401 -140.2244 -140.0577 #>  [8] -140.0437 -140.0461 -140.0726 #>  #> $`Fr. Polynesia3`$y #>  [1] -8.910412 -8.933976 -8.929739 -8.848090 -8.797602 -8.781531 -8.801478 #>  [8] -8.838427 -8.873670 -8.910412 #>  #> $`Fr. Polynesia3`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia4` #> $`Fr. Polynesia4`$x #> [1] -151.4098 -151.4495 -151.4855 -151.4764 -151.4667 -151.4112 -151.3645 #> [8] -151.4098 #>  #> $`Fr. Polynesia4`$y #> [1] -16.87778 -16.87933 -16.86372 -16.76073 -16.73960 -16.77443 -16.86424 #> [8] -16.87778 #>  #> $`Fr. Polynesia4`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia5` #> $`Fr. Polynesia5`$x #> [1] -149.8137 -149.8449 -149.8866 -149.9051 -149.9118 -149.9022 -149.8088 #> [8] -149.7824 -149.8137 #>  #> $`Fr. Polynesia5`$y #> [1] -17.54503 -17.57107 -17.55283 -17.52777 -17.50121 -17.46953 -17.47392 #> [8] -17.48777 -17.54503 #>  #> $`Fr. Polynesia5`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia6` #> $`Fr. Polynesia6`$x #> [1] -139.5562 -139.6210 -139.6318 -139.6118 -139.5840 -139.5346 -139.5084 #> [8] -139.5099 -139.5562 #>  #> $`Fr. Polynesia6`$y #> [1] -8.940281 -8.947981 -8.898578 -8.872326 -8.860027 -8.875427 -8.897028 #> [8] -8.915580 -8.940281 #>  #> $`Fr. Polynesia6`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia7` #> $`Fr. Polynesia7`$x #> [1] -140.0756 -140.0974 -140.1381 -140.1444 -140.0709 -140.0311 -140.0756 #>  #> $`Fr. Polynesia7`$y #> [1] -9.425936 -9.444126 -9.384388 -9.359377 -9.328164 -9.344701 -9.425936 #>  #> $`Fr. Polynesia7`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia8` #> $`Fr. Polynesia8`$x #>  [1] -145.4867 -145.4822 -145.5027 -145.5398 -145.5531 -145.5767 -145.6091 #>  [8] -145.6128 -145.6138 -145.5771 -145.5423 -145.5170 -145.4867 #>  #> $`Fr. Polynesia8`$y #>  [1] -16.32975 -16.34675 -16.34582 -16.29513 -16.25115 -16.20149 -16.16527 #>  [8] -16.13188 -16.07922 -16.15984 -16.22464 -16.27782 -16.32975 #>  #> $`Fr. Polynesia8`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia9` #> $`Fr. Polynesia9`$x #>  [1] -140.8094 -140.8044 -140.8408 -140.8516 -140.8507 -140.8243 -140.8036 #>  [8] -140.7614 -140.6862 -140.6498 -140.6382 -140.6520 -140.7763 -140.8152 #> [15] -140.8325 -140.8292 -140.8094 #>  #> $`Fr. Polynesia9`$y #>  [1] -17.85664 -17.87565 -17.87317 -17.86656 -17.83100 -17.78801 -17.75163 #>  [8] -17.71773 -17.68383 -17.66977 -17.67804 -17.68311 -17.75411 -17.80372 #> [15] -17.83845 -17.84919 -17.85664 #>  #> $`Fr. Polynesia9`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia10` #> $`Fr. Polynesia10`$x #> [1] -138.6511 -138.6878 -138.6904 -138.6429 -138.6245 -138.6324 -138.6511 #>  #> $`Fr. Polynesia10`$y #> [1] -10.51533 -10.53243 -10.42556 -10.44587 -10.46298 -10.49218 -10.51533 #>  #> $`Fr. Polynesia10`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia11` #> $`Fr. Polynesia11`$x #> [1] -140.8299 -140.8227 -140.8601 -140.8955 -140.9587 -140.9736 -140.9251 #> [8] -140.8933 -140.8299 #>  #> $`Fr. Polynesia11`$y #> [1] -18.18933 -18.21687 -18.19873 -18.14799 -18.08510 -18.05921 -18.08375 #> [8] -18.12050 -18.18933 #>  #> $`Fr. Polynesia11`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia12` #> $`Fr. Polynesia12`$x #> [1] -151.4666 -151.4849 -151.5041 -151.5124 -151.5058 -151.4574 -151.4381 #> [8] -151.4666 #>  #> $`Fr. Polynesia12`$y #> [1] -16.65754 -16.66513 -16.64694 -16.61904 -16.57403 -16.60369 -16.62348 #> [8] -16.65754 #>  #> $`Fr. Polynesia12`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia13` #> $`Fr. Polynesia13`$x #> [1] -139.0597 -139.1340 -139.1342 -139.1075 -139.0832 -139.0597 #>  #> $`Fr. Polynesia13`$y #> [1]  -9.931331 -10.009570  -9.926267  -9.915415  -9.915467  -9.931331 #>  #> $`Fr. Polynesia13`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia14` #> $`Fr. Polynesia14`$x #>  [1] -136.2939 -136.3141 -136.3160 -136.3440 -136.3829 -136.4357 -136.4642 #>  [8] -136.4785 -136.4587 -136.4261 -136.3804 -136.3276 -136.2939 #>  #> $`Fr. Polynesia14`$y #>  [1] -18.54435 -18.56631 -18.54522 -18.53484 -18.51370 -18.48905 -18.48502 #>  [8] -18.47076 -18.46321 -18.47432 -18.49680 -18.51928 -18.54435 #>  #> $`Fr. Polynesia14`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia15` #> $`Fr. Polynesia15`$x #> [1] -145.0513 -145.0577 -145.0764 -145.1379 -145.1607 -145.1335 -145.0513 #>  #> $`Fr. Polynesia15`$y #> [1] -15.85609 -15.90110 -15.85764 -15.78808 -15.75707 -15.76204 -15.85609 #>  #> $`Fr. Polynesia15`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia16` #> $`Fr. Polynesia16`$x #> [1] -140.6853 -140.6719 -140.6961 -140.7732 -140.7818 -140.6853 #>  #> $`Fr. Polynesia16`$y #> [1] -18.37986 -18.41614 -18.39914 -18.36379 -18.33418 -18.37986 #>  #> $`Fr. Polynesia16`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia17` #> $`Fr. Polynesia17`$x #> [1] -143.4406 -143.3862 -143.4585 -143.5507 -143.5156 -143.4647 -143.4406 #>  #> $`Fr. Polynesia17`$y #> [1] -16.61976 -16.66885 -16.63542 -16.62110 -16.61227 -16.61361 -16.61976 #>  #> $`Fr. Polynesia17`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia18` #> $`Fr. Polynesia18`$x #> [1] -143.5711 -143.6107 -143.7074 -143.6702 -143.6148 -143.5711 #>  #> $`Fr. Polynesia18`$y #> [1] -16.63475 -16.64038 -16.58085 -16.58085 -16.61806 -16.63475 #>  #> $`Fr. Polynesia18`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia19` #> $`Fr. Polynesia19`$x #> [1] -136.9717 -136.9713 -137.0676 -137.0296 -136.9717 #>  #> $`Fr. Polynesia19`$y #> [1] -18.34203 -18.36089 -18.26529 -18.27289 -18.34203 #>  #> $`Fr. Polynesia19`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia20` #> $`Fr. Polynesia20`$x #> [1] -138.5059 -138.5349 -138.5240 -138.5464 -138.5684 -138.5464 -138.5150 #> [8] -138.5059 #>  #> $`Fr. Polynesia20`$y #> [1] -20.85718 -20.87588 -20.85056 -20.79516 -20.78715 -20.77119 -20.81335 #> [8] -20.85718 #>  #> $`Fr. Polynesia20`$isHole #> [1] FALSE #>  #>  #> $`Fr. Polynesia21` #> $`Fr. Polynesia21`$x #> [1] -142.5118 -142.5296 -142.5069 -142.4812 -142.5118 #>  #> $`Fr. Polynesia21`$y #> [1] -16.09633 -16.10713 -16.02770 -16.01778 -16.09633 #>  #> $`Fr. Polynesia21`$isHole #> [1] FALSE #>  #>  #> $<NA> #> $<NA>$x #>  [1] 77.79937 77.69694 77.57158 77.42342 77.29299 77.16850 77.04861 77.00448 #>  [9] 76.97890 76.92774 76.88226 76.81276 76.76687 76.87885 77.09000 77.29485 #> [17] 77.44652 77.52005 77.57256 77.72407 77.79937 #>  #> $<NA>$y #>  [1] 35.49592 35.44324 35.37877 35.30260 35.23552 35.17155 35.10990 35.19635 #>  [9] 35.24643 35.34663 35.43572 35.57181 35.66170 35.61330 35.55204 35.50814 #> [17] 35.47561 35.47342 35.47184 35.48057 35.49592 #>  #> $<NA>$isHole #> [1] FALSE #>  #>  #> $`Faroe Is.1` #> $`Faroe Is.1`$x #>  [1] -6.631037 -6.655816 -6.696433 -6.768909 -6.823428 -6.840533 -6.837691 #>  [8] -6.809501 -6.722530 -6.714417 -6.725165 -6.809708 -7.013572 -7.172167 #> [15] -6.958639 -6.803662 -6.631037 #>  #> $`Faroe Is.1`$y #>  [1] 62.22788 62.09363 62.09435 62.13151 62.13910 62.11931 62.09543 62.08042 #>  [9] 61.99040 61.96415 61.95146 61.97746 62.09399 62.28560 62.31625 62.26597 #> [17] 62.22788 #>  #> $`Faroe Is.1`$isHole #> [1] FALSE #>  #>  #> $`Faroe Is.2` #> $`Faroe Is.2`$x #>  [1] -7.186868 -7.097106 -7.065196 -7.116821 -7.179375 -7.254926 -7.379079 #>  [8] -7.422616 -7.336782 -7.235315 -7.186868 #>  #> $`Faroe Is.2`$y #>  [1] 62.13931 62.10055 62.07327 62.04681 62.04004 62.04614 62.07482 62.14029 #>  [9] 62.13869 62.15122 62.13931 #>  #> $`Faroe Is.2`$isHole #> [1] FALSE #>  #>  #> $`Faroe Is.3` #> $`Faroe Is.3`$x #>  [1] -6.699456 -6.679716 -6.703048 -6.770511 -6.888153 -6.929236 -6.934842 #>  [8] -6.905904 -6.881667 -6.770021 -6.740642 -6.741082 -6.703513 -6.699456 #>  #> $`Faroe Is.3`$y #>  [1] 61.44462 61.41429 61.41770 61.45227 61.53475 61.60291 61.63433 61.63081 #>  [9] 61.60280 61.58435 61.57051 61.53640 61.49594 61.44462 #>  #> $`Faroe Is.3`$isHole #> [1] FALSE #>  #>  #> $`Faroe Is.4` #> $`Faroe Is.4`$x #>  [1] -6.623208 -6.642793 -6.670156 -6.764259 -6.839138 -6.863994 -6.884768 #>  [8] -6.841799 -6.790769 -6.662120 -6.625843 -6.623208 #>  #> $`Faroe Is.4`$y #>  [1] 61.80597 61.76832 61.76863 61.81532 61.84077 61.86227 61.89912 61.90372 #>  [9] 61.89534 61.86175 61.82672 61.80597 #>  #> $`Faroe Is.4`$isHole #> [1] FALSE #>  #>  #> $`Faroe Is.5` #> $`Faroe Is.5`$x #> [1] -6.406063 -6.453864 -6.524687 -6.544169 -6.559465 -6.552049 -6.554607 #> [8] -6.473036 -6.406063 #>  #> $`Faroe Is.5`$y #> [1] 62.25863 62.18654 62.19786 62.20563 62.22452 62.27811 62.35568 62.29191 #> [9] 62.25863 #>  #> $`Faroe Is.5`$isHole #> [1] FALSE #>  #>  #> $Mauritius #> $Mauritius$x #>  [1] 57.65129 57.52479 57.38330 57.32832 57.31767 57.36511 57.36211 57.38578 #>  [9] 57.41606 57.48644 57.51507 57.57574 57.65656 57.73718 57.79196 57.78069 #> [17] 57.72498 57.70669 57.65129 #>  #> $Mauritius$y #>  [1] -20.48490 -20.51322 -20.50371 -20.45002 -20.42764 -20.40645 -20.33762 #>  [8] -20.22858 -20.18383 -20.14394 -20.05598 -19.99718 -19.98994 -20.09846 #> [15] -20.21256 -20.32698 -20.36883 -20.43488 -20.48490 #>  #> $Mauritius$isHole #> [1] FALSE #>  #>  #> $Comoros1 #> $Comoros1$x #>  [1] 43.46580 43.44679 43.35552 43.30333 43.22664 43.25600 43.28070 43.29899 #>  [9] 43.34147 43.39294 43.37940 43.44772 43.49154 43.46580 #>  #> $Comoros1$y #>  [1] -11.90129 -11.91457 -11.85752 -11.84408 -11.75189 -11.43212 -11.39119 #>  [8] -11.37455 -11.36845 -11.40855 -11.61412 -11.75251 -11.86207 -11.90129 #>  #> $Comoros1$isHole #> [1] FALSE #>  #>  #> $Comoros2 #> $Comoros2$x #>  [1] 44.47639 44.52672 44.52631 44.50502 44.46016 44.37748 44.22017 44.29231 #>  [9] 44.33448 44.37913 44.40704 44.41262 44.45189 44.47639 #>  #> $Comoros2$y #>  [1] -12.08159 -12.21956 -12.32354 -12.35651 -12.33511 -12.25222 -12.17140 #>  [8] -12.16479 -12.17306 -12.16561 -12.12014 -12.09296 -12.07136 -12.08159 #>  #> $Comoros2$isHole #> [1] FALSE #>  #>  #> $Comoros3 #> $Comoros3$x #> [1] 43.78868 43.85896 43.66362 43.63292 43.63137 43.70434 43.78868 #>  #> $Comoros3$y #> [1] -12.30700 -12.36829 -12.34286 -12.28767 -12.24706 -12.25594 -12.30700 #>  #> $Comoros3$isHole #> [1] FALSE #>  #>  #> $Aland1 #> $Aland1$x #>  [1] 19.98951 20.02020 20.03385 20.08738 20.16790 20.18412 20.23952 20.25885 #>  [9] 20.19477 20.15508 20.12552 20.07322 20.04253 20.03230 20.03395 19.79986 #> [17] 19.74601 19.67222 19.68689 19.73650 19.77898 19.78528 19.84771 19.86714 #> [25] 19.87158 19.85463 19.81226 19.78776 19.82301 19.88833 19.94455 19.98951 #>  #> $Aland1$y #>  [1] 60.35115 60.35089 60.35931 60.35342 60.31472 60.29374 60.28299 60.26128 #>  [9] 60.19356 60.19230 60.20087 60.19343 60.18064 60.15248 60.09354 60.08176 #> [17] 60.09897 60.23299 60.26764 60.28237 60.28555 60.21335 60.22056 60.26810 #> [25] 60.30162 60.31849 60.33159 60.35404 60.39016 60.40582 60.35750 60.35115 #>  #> $Aland1$isHole #> [1] FALSE #>  #>  #> $Aland2 #> $Aland2$x #>  [1] 19.66229 19.66746 19.62922 19.59977 19.57992 19.53651 19.51905 19.55140 #>  [9] 19.62881 19.66229 #>  #> $Aland2$y #>  [1] 60.18718 60.16475 60.17036 60.16268 60.13504 60.14496 60.18460 60.24387 #>  [9] 60.24609 60.18718 #>  #> $Aland2$isHole #> [1] FALSE #>  #>  #> $Aland3 #> $Aland3$x #>  [1] 20.61128 20.60342 20.52178 20.48746 20.41119 20.39796 20.42959 20.49015 #>  [9] 20.56911 20.61128 #>  #> $Aland3$y #>  [1] 60.04068 60.01696 60.01169 60.03277 60.03013 60.04068 60.06173 60.07489 #>  [9] 60.06962 60.04068 #>  #> $Aland3$isHole #> [1] FALSE #>  #>  #> $`Hong Kong1` #> $`Hong Kong1`$x #>  [1] 114.3353 114.2905 114.2878 114.2680 114.1390 114.0329 113.9373 113.9025 #>  [9] 113.8964 114.0067 114.0154 114.0183 114.0503 114.0979 114.1229 114.1882 #> [17] 114.2282 114.2660 114.2696 114.2911 114.2845 114.3252 114.3353 #>  #> $`Hong Kong1`$y #>  [1] 22.39623 22.37378 22.32530 22.29554 22.34846 22.37590 22.36499 22.39610 #>  [9] 22.42817 22.48405 22.51191 22.51444 22.54299 22.55126 22.56501 22.56501 #> [17] 22.55395 22.54098 22.53676 22.49945 22.45760 22.43742 22.39623 #>  #> $`Hong Kong1`$isHole #> [1] FALSE #>  #>  #> $`Hong Kong2` #> $`Hong Kong2`$x #> [1] 113.9977 113.8773 113.8516 113.8389 113.8816 114.0439 114.0033 113.9977 #>  #> $`Hong Kong2`$y #> [1] 22.21048 22.21045 22.22045 22.24169 22.28029 22.33342 22.27756 22.21048 #>  #> $`Hong Kong2`$isHole #> [1] FALSE #>  #>  #> $`Hong Kong3` #> $`Hong Kong3`$x #> [1] 114.2320 114.2072 114.1388 114.1345 114.1874 114.2469 114.2436 114.2320 #>  #> $`Hong Kong3`$y #> [1] 22.21053 22.19518 22.26838 22.29223 22.29662 22.26355 22.23353 22.21053 #>  #> $`Hong Kong3`$isHole #> [1] FALSE #>  #>  #> $`Sao Tome and Principe1` #> $`Sao Tome and Principe1`$x #>  [1] 6.659987 6.556840 6.519737 6.496999 6.468164 6.477569 6.524284 6.625880 #>  [9] 6.686962 6.749800 6.750007 6.659987 #>  #> $`Sao Tome and Principe1`$y #>  [1] 0.12066478 0.04738760 0.06630117 0.11735749 0.22732494 0.28013825 #>  [7] 0.34028962 0.40023428 0.40436839 0.32561351 0.24344798 0.12066478 #>  #> $`Sao Tome and Principe1`$isHole #> [1] FALSE #>  #>  #> $`Sao Tome and Principe2` #> $`Sao Tome and Principe2`$x #>  [1] 7.423868 7.386661 7.342426 7.330643 7.387591 7.414463 7.436993 7.450429 #>  [9] 7.452290 7.423868 #>  #> $`Sao Tome and Principe2`$y #>  [1] 1.567708 1.541560 1.563574 1.603365 1.680156 1.699121 1.683050 1.661966 #>  [9] 1.631115 1.567708 #>  #> $`Sao Tome and Principe2`$isHole #> [1] FALSE #>  #>  #> $`Isle of Man` #> $`Isle of Man`$x #>  [1] -4.412051 -4.614286 -4.696064 -4.765776 -4.785335 -4.745545 -4.698726 #>  [8] -4.614829 -4.508660 -4.424737 -4.395540 -4.377195 -4.337998 -4.392285 #> [15] -4.412051 #>  #> $`Isle of Man`$y #>  [1] 54.18538 54.05872 54.08143 54.06941 54.07303 54.11882 54.22491 54.26692 #>  [9] 54.37671 54.40717 54.40293 54.39260 54.26909 54.22537 54.18538 #>  #> $`Isle of Man`$isHole #> [1] FALSE #>  #>  #> $Kiribati1 #> $Kiribati1$x #>  [1] -157.3421 -157.1758 -157.2462 -157.4201 -157.5790 -157.5315 -157.5082 #>  [8] -157.4359 -157.3932 -157.3652 -157.4922 -157.4419 -157.3219 -157.3421 #>  #> $Kiribati1$y #>  [1] 1.855546 1.739842 1.731729 1.787540 1.902055 1.926859 1.885673 1.847278 #>  [9] 1.927686 1.946083 2.029282 2.025045 1.968562 1.855546 #>  #> $Kiribati1$isHole #> [1] FALSE #>  #>  #> $Kiribati2 #> $Kiribati2$x #>  [1] -159.3391 -159.2593 -159.2747 -159.3323 -159.3587 -159.3137 -159.3062 #>  [8] -159.3268 -159.3542 -159.3732 -159.3778 -159.4090 -159.3910 -159.3690 #> [15] -159.3391 #>  #> $Kiribati2$y #>  [1] 3.923533 3.839197 3.796564 3.800466 3.815323 3.822661 3.838371 3.863175 #>  [9] 3.880539 3.880539 3.846639 3.873252 3.899556 3.916996 3.923533 #>  #> $Kiribati2$isHole #> [1] FALSE #>  #>  #> $Kiribati3 #> $Kiribati3$x #>  [1] 174.5087 174.4764 174.4640 174.4797 174.4527 174.4078 174.3810 174.3940 #>  [9] 174.4388 174.4748 174.4954 174.5087 #>  #> $Kiribati3$y #>  [1] -0.8017595 -0.8290447 -0.8042400 -0.7736476 -0.6470403 -0.6297804 #>  [7] -0.5917982 -0.5917982 -0.6265764 -0.6421827 -0.7256918 -0.8017595 #>  #> $Kiribati3$isHole #> [1] FALSE #>  #>  #> $Kiribati4 #> $Kiribati4$x #>  [1] 173.0328 173.0865 173.0795 173.0614 172.9911 172.9699 173.0386 173.0650 #>  [9] 173.0256 173.0099 173.0037 172.9901 173.0037 173.0328 #>  #> $Kiribati4$y #>  [1] 1.0131168 0.9734293 0.9462475 0.9152416 0.8354532 0.8427912 0.9147248 #>  [8] 0.9626806 0.9990608 0.9909476 0.9909476 1.0251057 1.0251057 1.0131168 #>  #> $Kiribati4$isHole #> [1] FALSE #>  #>  #> $Kiribati5 #> $Kiribati5$x #>  [1] 173.0384 173.0113 173.0286 173.1434 173.1533 173.1719 173.1715 173.1631 #>  [9] 173.1064 173.0617 173.0384 #>  #> $Kiribati5$y #>  [1] 1.342089 1.338368 1.358729 1.381363 1.387564 1.375162 1.363380 1.357540 #>  [9] 1.357075 1.346326 1.342089 #>  #> $Kiribati5$isHole #> [1] FALSE #>  #>  #> $Kiribati6 #> $Kiribati6$x #> [1] 174.7732 174.7789 174.7560 174.7484 174.7410 174.7168 174.7441 174.7666 #> [9] 174.7732 #>  #> $Kiribati6$y #> [1] -1.211864 -1.263385 -1.256409 -1.236462 -1.184579 -1.133677 -1.147320 #> [8] -1.187059 -1.211864 #>  #> $Kiribati6$isHole #> [1] FALSE #>  #>  #> $Kiribati7 #> $Kiribati7$x #> [1] 172.8443 172.7704 172.7505 172.7773 172.8269 172.8870 172.8802 172.8443 #>  #> $Kiribati7$y #> [1] 3.051235 3.012530 3.033045 3.033872 3.071079 3.073973 3.053509 3.051235 #>  #> $Kiribati7$isHole #> [1] FALSE #>  #>  #> $Kiribati8 #> $Kiribati8$x #>  [1] -154.9562 -154.9590 -154.9711 -154.9946 -155.0146 -155.0150 -154.9869 #>  [8] -154.9512 -154.9434 -154.9500 -154.9562 #>  #> $Kiribati8$y #>  [1] -4.087967 -4.093858 -4.085797 -4.071121 -4.054894 -4.048073 -4.038565 #>  [8] -4.031071 -4.041562 -4.055928 -4.087967 #>  #> $Kiribati8$isHole #> [1] FALSE #>  #>  #> $Kiribati9 #> $Kiribati9$x #> [1] 173.0187 173.0237 172.9666 172.9327 172.9348 172.9501 172.9691 172.9815 #> [9] 173.0187 #>  #> $Kiribati9$y #> [1] 1.845727 1.822576 1.885415 1.925929 1.943706 1.932544 1.912700 1.896990 #> [9] 1.845727 #>  #> $Kiribati9$isHole #> [1] FALSE #>  #>  #> $Kiribati10 #> $Kiribati10$x #>  [1] -171.6976 -171.6650 -171.6397 -171.6276 -171.6284 -171.6474 -171.6706 #>  [8] -171.6873 -171.6961 -171.6983 -171.6784 -171.6554 -171.6385 -171.6397 #> [15] -171.6602 -171.6726 -171.6880 -171.7060 -171.7182 -171.7248 -171.7277 #> [22] -171.7251 -171.7189 -171.6976 #>  #> $Kiribati10$y #>  [1] -2.766394 -2.785514 -2.811249 -2.847009 -2.855898 -2.855536 -2.844477 #>  [8] -2.829749 -2.825667 -2.822308 -2.824530 -2.839826 -2.846699 -2.829233 #> [15] -2.798537 -2.787995 -2.779107 -2.773112 -2.778590 -2.781329 -2.774146 #> [22] -2.767841 -2.761382 -2.766394 #>  #> $Kiribati10$isHole #> [1] FALSE #>  #>  #> $Kiribati11 #> $Kiribati11$x #> [1] 173.0294 172.9933 173.0204 173.0278 173.0237 173.0377 173.0427 173.0452 #> [9] 173.0294 #>  #> $Kiribati11$y #> [1] 1.717363 1.713074 1.727492 1.747336 1.809347 1.804386 1.778755 1.741548 #> [9] 1.717363 #>  #> $Kiribati11$isHole #> [1] FALSE #>  #>  #> $Kiribati12 #> $Kiribati12$x #> [1] -151.7826 -151.7909 -151.8067 -151.8159 -151.8191 -151.8133 -151.8028 #> [8] -151.7911 -151.7826 #>  #> $Kiribati12$y #> [1] -11.44101 -11.45682 -11.45124 -11.43119 -11.40928 -11.39181 -11.39264 #> [8] -11.41434 -11.44101 #>  #> $Kiribati12$isHole #> [1] FALSE #>  #>  #> $Kiribati13 #> $Kiribati13$x #> [1] 172.9696 172.9063 172.8870 172.9625 172.9622 172.9696 #>  #> $Kiribati13$y #> [1] 3.129215 3.095884 3.101258 3.148800 3.142909 3.129215 #>  #> $Kiribati13$isHole #> [1] FALSE #>  #>  #> $Kiribati14 #> $Kiribati14$x #>  [1] -155.8638 -155.8871 -155.9144 -155.9279 -155.9286 -155.9194 -155.9108 #>  [8] -155.8723 -155.8624 -155.8638 #>  #> $Kiribati14$y #>  [1] -5.626685 -5.631801 -5.631594 -5.618520 -5.607668 -5.607564 -5.609476 #>  [8] -5.611285 -5.619140 -5.626685 #>  #> $Kiribati14$isHole #> [1] FALSE #>  #>  #> $Kiribati15 #> $Kiribati15$x #> [1] 169.5511 169.5417 169.5229 169.5256 169.5387 169.5553 169.5511 #>  #> $Kiribati15$y #> [1] -0.8737448 -0.8760186 -0.8656316 -0.8526091 -0.8469247 -0.8565366 -0.8737448 #>  #> $Kiribati15$isHole #> [1] FALSE #>  #>  #> $Kiribati16 #> $Kiribati16$x #> [1] -171.2332 -171.2430 -171.2546 -171.2618 -171.2619 -171.2524 -171.2394 #> [8] -171.2319 -171.2332 #>  #> $Kiribati16$y #> [1] -4.463500 -4.468099 -4.466497 -4.459779 -4.449185 -4.441641 -4.444121 #> [8] -4.453733 -4.463500 #>  #> $Kiribati16$isHole #> [1] FALSE #>  #>  #> $Kiribati17 #> $Kiribati17$x #>  [1] -172.2146 -172.2083 -172.1939 -172.1810 -172.1888 -172.2152 -172.2283 #>  [8] -172.2122 -172.1979 -172.1964 -172.1972 -172.2039 -172.2148 -172.2146 #>  #> $Kiribati17$y #>  [1] -4.511094 -4.518018 -4.516055 -4.514815 -4.521636 -4.524426 -4.507063 #>  [8] -4.493937 -4.491715 -4.495384 -4.499518 -4.499518 -4.502619 -4.511094 #>  #> $Kiribati17$isHole #> [1] FALSE #>  #>  #> $Kiribati18 #> $Kiribati18$x #>  [1] -174.5129 -174.5011 -174.5010 -174.5068 -174.5239 -174.5292 -174.5168 #>  [8] -174.5115 -174.5231 -174.5331 -174.5407 -174.5408 -174.5314 -174.5129 #>  #> $Kiribati18$y #>  [1] -4.675063 -4.688396 -4.694752 -4.693615 -4.689688 -4.681626 -4.686845 #>  [8] -4.685657 -4.673978 -4.665296 -4.661679 -4.657338 -4.659457 -4.675063 #>  #> $Kiribati18$isHole #> [1] FALSE #>  #>  #> $Kiribati19 #> $Kiribati19$x #> [1] -171.0851 -171.0898 -171.0967 -171.0917 -171.0877 -171.0810 -171.0851 #>  #> $Kiribati19$y #> [1] -3.135467 -3.143219 -3.136914 -3.125132 -3.115055 -3.120378 -3.135467 #>  #> $Kiribati19$isHole #> [1] FALSE #>  #>  #> $Dominica #> $Dominica$x #>  [1] -61.28171 -61.37537 -61.41573 -61.48115 -61.46994 -61.45813 -61.32002 #>  [8] -61.27726 -61.25106 -61.28171 #>  #> $Dominica$y #>  [1] 15.24904 15.22729 15.39984 15.52515 15.60347 15.63310 15.58504 15.52670 #>  [9] 15.37317 15.24904 #>  #> $Dominica$isHole #> [1] FALSE #>  #>  #> $`Heard I. and McDonald Is.` #> $`Heard I. and McDonald Is.`$x #>  [1] 73.70747 73.58799 73.46511 73.41322 73.33633 73.28548 73.25385 73.25117 #>  [9] 73.30532 73.38811 73.58572 73.73124 73.83780 73.79511 73.70747 #>  #> $`Heard I. and McDonald Is.`$y #>  [1] -53.13707 -53.18461 -53.18420 -53.14678 -53.02989 -53.02152 -52.98932 #>  [8] -52.97584 -52.96633 -52.99992 -53.02710 -53.09118 -53.11278 -53.12988 #> [15] -53.13707 #>  #> $`Heard I. and McDonald Is.`$isHole #> [1] FALSE #>  #>  #> $Bahrain #> $Bahrain$x #>  [1] 50.60728 50.57493 50.54403 50.46589 50.48946 50.45246 50.46992 50.56408 #>  [9] 50.58588 50.55777 50.60976 50.61751 50.60728 #>  #> $Bahrain$y #>  [1] 25.88312 25.80680 25.83351 25.96555 26.05846 26.19080 26.22894 26.24643 #>  [9] 26.24072 26.19830 26.12445 26.00234 25.88312 #>  #> $Bahrain$isHole #> [1] FALSE #>  #>  #> $Andorra #> $Andorra$x #>  [1] 1.706025 1.678482 1.586394 1.534046 1.486194 1.448832 1.428161 1.430280 #>  [9] 1.421960 1.414829 1.428316 1.458857 1.501335 1.568153 1.709901 1.739460 #> [17] 1.740184 1.713932 1.706025 #>  #> $Andorra$y #>  [1] 42.50330 42.49666 42.45596 42.44170 42.43446 42.43744 42.46131 42.49787 #>  [9] 42.53082 42.54841 42.59590 42.62169 42.64272 42.63499 42.60443 42.57593 #> [17] 42.55673 42.52562 42.50330 #>  #> $Andorra$isHole #> [1] FALSE #>  #>  #> $`Saint Lucia` #> $`Saint Lucia`$x #>  [1] -60.89522 -60.95142 -61.06063 -61.07311 -61.06355 -60.99666 -60.94457 #>  [8] -60.90809 -60.88677 -60.89522 #>  #> $`Saint Lucia`$y #>  [1] 13.82200 13.71756 13.78309 13.86556 13.91559 14.01093 14.07284 14.09335 #>  [9] 14.01113 13.82200 #>  #> $`Saint Lucia`$isHole #> [1] FALSE #>  #>  #> $Micronesia1 #> $Micronesia1$x #>  [1] 158.3148 158.2565 158.1835 158.1608 158.1276 158.1348 158.1861 158.2947 #>  [9] 158.3350 158.3093 158.3148 #>  #> $Micronesia1$y #>  [1] 6.813693 6.791007 6.801291 6.882836 6.904643 6.944848 6.977714 6.951049 #>  [9] 6.893171 6.854621 6.813693 #>  #> $Micronesia1$isHole #> [1] FALSE #>  #>  #> $Micronesia2 #> $Micronesia2$x #>  [1] 138.1427 138.0671 138.0619 138.0850 138.1169 138.1469 138.1858 138.2136 #>  [9] 138.1825 138.1427 #>  #> $Micronesia2$y #>  [1] 9.500687 9.419064 9.445755 9.494563 9.550218 9.583601 9.593291 9.547221 #>  [9] 9.507379 9.500687 #>  #> $Micronesia2$isHole #> [1] FALSE #>  #>  #> $Micronesia3 #> $Micronesia3$x #>  [1] 151.6477 151.6395 151.5784 151.5697 151.5751 151.6043 151.6078 151.5929 #>  [9] 151.6056 151.6295 151.6433 151.6505 151.6477 #>  #> $Micronesia3$y #>  [1] 7.346167 7.332989 7.338105 7.345495 7.351335 7.357200 7.375364 7.379240 #>  [9] 7.388722 7.390454 7.379266 7.362833 7.346167 #>  #> $Micronesia3$isHole #> [1] FALSE #>  #>  #> $Micronesia4 #> $Micronesia4$x #> [1] 162.9832 162.9935 162.9299 162.9211 162.9581 162.9832 #>  #> $Micronesia4$y #> [1] 5.325722 5.277249 5.300762 5.317919 5.335024 5.325722 #>  #> $Micronesia4$isHole #> [1] FALSE #>  #>  #> $Micronesia5 #> $Micronesia5$x #> [1] 151.8814 151.8643 151.8560 151.8600 151.8653 151.8818 151.9106 151.9126 #> [9] 151.8814 #>  #> $Micronesia5$y #> [1] 7.432053 7.426730 7.431795 7.457375 7.466160 7.467090 7.460165 7.453861 #> [9] 7.432053 #>  #> $Micronesia5$isHole #> [1] FALSE #>  #>  #> $Guam #> $Guam$x #>  [1] 144.7418 144.6995 144.6628 144.6500 144.6493 144.7904 144.8367 144.8754 #>  [9] 144.9096 144.9408 144.7799 144.7418 #>  #> $Guam$y #>  [1] 13.25929 13.25754 13.29105 13.31350 13.42869 13.52687 13.62237 13.61462 #>  [9] 13.59902 13.57033 13.41112 13.25929 #>  #> $Guam$isHole #> [1] FALSE #>  #>  #> $Singapore #> $Singapore$x #> [1] 103.9697 103.8199 103.6501 103.7053 103.8180 103.9090 103.9608 103.9964 #> [9] 103.9697 #>  #> $Singapore$y #> [1] 1.331444 1.265401 1.325552 1.423428 1.447095 1.415986 1.392215 1.365240 #> [9] 1.331444 #>  #> $Singapore$isHole #> [1] FALSE #>  #>  #> $Tonga1 #> $Tonga1$x #>  [1] -175.1619 -175.1476 -175.1319 -175.0782 -175.0841 -175.1566 -175.2023 #>  [8] -175.3355 -175.3623 -175.3181 -175.3226 -175.3005 -175.2254 -175.1580 #> [15] -175.1998 -175.1619 #>  #> $Tonga1$y #>  [1] -21.16930 -21.16941 -21.13974 -21.12899 -21.16078 -21.26366 -21.22346 #>  [8] -21.15773 -21.10688 -21.06822 -21.09928 -21.11339 -21.11876 -21.14646 #> [15] -21.15566 -21.16930 #>  #> $Tonga1$isHole #> [1] FALSE #>  #>  #> $Tonga2 #> $Tonga2$x #>  [1] -173.9535 -173.9913 -174.0093 -174.0531 -174.0692 -174.0024 -173.9681 #>  [8] -173.9219 -173.9240 -173.9535 #>  #> $Tonga2$y #>  [1] -18.63938 -18.69865 -18.69777 -18.66341 -18.64026 -18.57065 -18.56533 #>  [8] -18.58858 -18.60848 -18.63938 #>  #> $Tonga2$isHole #> [1] FALSE #>  #>  #> $Tonga3 #> $Tonga3$x #> [1] -174.9131 -174.9186 -174.9675 -174.9729 -174.9235 -174.9131 #>  #> $Tonga3$y #> [1] -21.30046 -21.45063 -21.38174 -21.34986 -21.30340 -21.30046 #>  #> $Tonga3$isHole #> [1] FALSE #>  #>  #> $`Antigua and Barb.1` #> $`Antigua and Barb.1`$x #>  [1] -61.71607 -61.74816 -61.85966 -61.88206 -61.88712 -61.81725 -61.73858 #>  [8] -61.70822 -61.68605 -61.68649 -61.69499 -61.71607 #>  #> $`Antigua and Barb.1`$y #>  [1] 17.03700 16.99715 17.01333 17.06314 17.09813 17.16893 17.13849 17.10505 #>  [9] 17.09844 17.06981 17.04893 17.03700 #>  #> $`Antigua and Barb.1`$isHole #> [1] FALSE #>  #>  #> $`Antigua and Barb.2` #> $`Antigua and Barb.2`$x #>  [1] -61.74710 -61.76201 -61.84382 -61.86875 -61.86617 -61.85245 -61.81992 #>  [8] -61.77674 -61.74958 -61.74710 #>  #> $`Antigua and Barb.2`$y #>  [1] 17.57495 17.54870 17.59614 17.68543 17.70432 17.71406 17.69685 17.69050 #>  [9] 17.66135 17.57495 #>  #> $`Antigua and Barb.2`$isHole #> [1] FALSE #>  #>  #> $Curacao #> $Curacao$x #>  [1] -68.75110 -68.80331 -68.99514 -69.15384 -69.15887 -69.11844 -69.07679 #>  [8] -69.01315 -68.82740 -68.75110 #>  #> $Curacao$y #>  [1] 12.05978 12.04547 12.14184 12.29842 12.38028 12.37325 12.34204 12.23135 #>  [9] 12.15853 12.05978 #>  #> $Curacao$isHole #> [1] FALSE #>  #>  #> $Gaza #> $Gaza$x #>  [1] 34.24528 34.21252 34.19815 34.38729 34.47736 34.52413 34.52557 34.35018 #>  [9] 34.34832 34.24528 #>  #> $Gaza$y #>  [1] 31.20833 31.29228 31.32261 31.48376 31.58484 31.54164 31.52562 31.36276 #>  [9] 31.29292 31.20833 #>  #> $Gaza$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.1` #> $`N. Mariana Is.1`$x #>  [1] 145.7520 145.7492 145.6982 145.6843 145.7132 145.7864 145.8219 145.7885 #>  [9] 145.7823 145.7520 #>  #> $`N. Mariana Is.1`$y #>  [1] 15.13316 15.10724 15.11352 15.12512 15.21530 15.25690 15.26537 15.22264 #>  [9] 15.17463 15.13316 #>  #> $`N. Mariana Is.1`$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.2` #> $`N. Mariana Is.2`$x #> [1] 145.6624 145.6210 145.5916 145.5867 145.6248 145.6474 145.6624 #>  #> $`N. Mariana Is.2`$y #> [1] 14.97051 14.91955 14.99883 15.03081 15.06014 15.05949 14.97051 #>  #> $`N. Mariana Is.2`$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.3` #> $`N. Mariana Is.3`$x #> [1] 145.2649 145.2154 145.1796 145.1574 145.1521 145.2324 145.2655 145.2649 #>  #> $`N. Mariana Is.3`$y #> [1] 14.15810 14.11134 14.12097 14.13689 14.16361 14.18947 14.18025 14.15810 #>  #> $`N. Mariana Is.3`$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.4` #> $`N. Mariana Is.4`$x #> [1] 145.7775 145.7291 145.7893 145.8075 145.8355 145.7775 #>  #> $`N. Mariana Is.4`$y #> [1] 18.07895 18.05693 18.15543 18.17264 18.13677 18.07895 #>  #> $`N. Mariana Is.4`$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.5` #> $`N. Mariana Is.5`$x #> [1] 145.7085 145.6781 145.6525 145.6455 145.6902 145.7066 145.7085 #>  #> $`N. Mariana Is.5`$y #> [1] 18.76252 18.72524 18.75265 18.80679 18.80162 18.79048 18.76252 #>  #> $`N. Mariana Is.5`$isHole #> [1] FALSE #>  #>  #> $`N. Mariana Is.6` #> $`N. Mariana Is.6`$x #> [1] 145.7121 145.6903 145.6583 145.6360 145.6310 145.6955 145.7195 145.7121 #>  #> $`N. Mariana Is.6`$y #> [1] 16.33911 16.33216 16.33580 16.35151 16.37797 16.37962 16.35978 16.33911 #>  #> $`N. Mariana Is.6`$isHole #> [1] FALSE #>  #>  #> $Barbados #> $Barbados$x #> [1] -59.49331 -59.52187 -59.61134 -59.64279 -59.64669 -59.59160 -59.48789 #> [8] -59.42763 -59.49331 #>  #> $Barbados$y #> [1] 13.08197 13.06220 13.10209 13.15031 13.30312 13.31769 13.19682 13.15279 #> [9] 13.08197 #>  #> $Barbados$isHole #> [1] FALSE #>  #>  #> $`Turks and Caicos Is.1` #> $`Turks and Caicos Is.1`$x #> [1] -71.66141 -71.66539 -71.72177 -71.83042 -71.84765 -71.80613 -71.66833 #> [8] -71.63691 -71.66141 #>  #> $`Turks and Caicos Is.1`$y #> [1] 21.76524 21.75170 21.79025 21.79061 21.84347 21.85210 21.83345 21.78756 #> [9] 21.76524 #>  #> $`Turks and Caicos Is.1`$isHole #> [1] FALSE #>  #>  #> $`Turks and Caicos Is.2` #> $`Turks and Caicos Is.2`$x #>  [1] -72.33281 -72.21864 -72.14983 -72.14432 -72.18156 -72.19068 -72.30090 #>  [8] -72.33545 -72.34237 -72.33281 #>  #> $`Turks and Caicos Is.2`$y #>  [1] 21.85138 21.79629 21.80448 21.79273 21.78004 21.76978 21.75524 21.75800 #>  [9] 21.79531 21.85138 #>  #> $`Turks and Caicos Is.2`$isHole #> [1] FALSE #>  #>  #> $`Turks and Caicos Is.3` #> $`Turks and Caicos Is.3`$x #>  [1] -71.87995 -71.89747 -71.95550 -71.96379 -71.98452 -72.01906 -72.01064 #>  [8] -71.93157 -71.89961 -71.87995 #>  #> $`Turks and Caicos Is.3`$y #>  [1] 21.84042 21.82986 21.86440 21.89202 21.89342 21.91827 21.95044 21.95189 #>  [9] 21.86249 21.84042 #>  #> $`Turks and Caicos Is.3`$isHole #> [1] FALSE #>  #>  #> $Palau1 #> $Palau1$x #>  [1] 134.5954 134.5347 134.5062 134.5157 134.5560 134.5997 134.6087 134.6511 #>  [9] 134.6596 134.6327 134.5982 134.5954 #>  #> $Palau1$y #>  [1] 7.382030 7.360636 7.437117 7.525794 7.593955 7.615763 7.623566 7.712088 #>  [9] 7.663305 7.501300 7.438306 7.382030 #>  #> $Palau1$isHole #> [1] FALSE #>  #>  #> $Palau2 #> $Palau2$x #> [1] 131.1724 131.1496 131.1349 131.1367 131.1516 131.1724 131.1879 131.1863 #> [9] 131.1724 #>  #> $Palau2$y #> [1] 3.026224 3.021883 3.025242 3.039427 3.054077 3.060589 3.055628 3.042114 #> [9] 3.026224 #>  #> $Palau2$isHole #> [1] FALSE #>  #>  #> $Malta1 #> $Malta1$x #> [1] 14.56617 14.53268 14.43646 14.35233 14.35130 14.44835 14.53703 14.56617 #>  #> $Malta1$y #> [1] 35.85272 35.82019 35.82166 35.87228 35.97840 35.95744 35.88629 35.85272 #>  #> $Malta1$isHole #> [1] FALSE #>  #>  #> $Malta2 #> $Malta2$x #> [1] 14.31347 14.25363 14.19420 14.18035 14.26324 14.30376 14.32091 14.31347 #>  #> $Malta2$y #> [1] 36.02757 36.01214 36.04224 36.06038 36.07581 36.06230 36.03625 36.02757 #>  #> $Malta2$isHole #> [1] FALSE #>  #>  #> $`U.S. Virgin Is.1` #> $`U.S. Virgin Is.1`$x #> [1] -64.76565 -64.68186 -64.58045 -64.68628 -64.88911 -64.88472 -64.76565 #>  #> $`U.S. Virgin Is.1`$y #> [1] 17.79431 17.75021 17.75021 17.70610 17.70171 17.77225 17.79431 #>  #> $`U.S. Virgin Is.1`$isHole #> [1] FALSE #>  #>  #> $`U.S. Virgin Is.2` #> $`U.S. Virgin Is.2`$x #> [1] -64.84503 -64.91999 -65.02362 -64.94203 -64.88911 -64.84503 #>  #> $`U.S. Virgin Is.2`$y #> [1] 18.33010 18.32129 18.36759 18.38521 18.37420 18.33010 #>  #> $`U.S. Virgin Is.2`$isHole #> [1] FALSE #>  #>  #> $`U.S. Virgin Is.3` #> $`U.S. Virgin Is.3`$x #> [1] -64.65982 -64.72597 -64.77061 -64.78769 -64.75242 -64.65982 #>  #> $`U.S. Virgin Is.3`$y #> [1] 18.35433 18.32787 18.33159 18.34110 18.37198 18.35433 #>  #> $`U.S. Virgin Is.3`$isHole #> [1] FALSE #>  #>  #> $`St. Vin. and Gren.1` #> $`St. Vin. and Gren.1`$x #>  [1] -61.17450 -61.20391 -61.27729 -61.26845 -61.22406 -61.18210 -61.13898 #>  [8] -61.12402 -61.13453 -61.17450 #>  #> $`St. Vin. and Gren.1`$y #>  [1] 13.15811 13.14230 13.20958 13.28772 13.33066 13.35598 13.35872 13.29402 #>  [9] 13.20286 13.15811 #>  #> $`St. Vin. and Gren.1`$isHole #> [1] FALSE #>  #>  #> $`St. Vin. and Gren.2` #> $`St. Vin. and Gren.2`$x #>  [1] -61.22621 -61.24223 -61.23473 -61.24223 -61.24726 -61.25522 -61.26535 #>  [8] -61.27695 -61.27695 -61.26204 -61.23933 -61.23928 -61.24595 -61.24902 #> [15] -61.24065 -61.21285 -61.20119 -61.19980 -61.19931 -61.19796 -61.19375 #> [22] -61.20804 -61.22621 #>  #> $`St. Vin. and Gren.2`$y #>  [1] 12.99461 12.98368 12.98368 12.97626 12.98363 12.98817 12.99019 12.98988 #>  [9] 12.99735 12.99277 12.99724 13.00536 13.01267 13.01784 13.02572 13.04324 #> [17] 13.05256 13.04871 13.04512 13.04171 13.03830 13.02468 12.99461 #>  #> $`St. Vin. and Gren.2`$isHole #> [1] FALSE #>  #>  #> $`St. Vin. and Gren.3` #> $`St. Vin. and Gren.3`$x #>  [1] -61.33439 -61.34454 -61.35354 -61.35111 -61.33974 -61.33442 -61.33633 #>  [8] -61.33586 -61.32682 -61.31987 -61.31682 -61.31483 -61.32013 -61.32594 #> [15] -61.32884 -61.33439 #>  #> $`St. Vin. and Gren.3`$y #>  [1] 12.69522 12.69470 12.69814 12.70119 12.70359 12.71021 12.71902 12.72878 #>  [9] 12.73480 12.73542 12.73168 12.72253 12.71553 12.70984 12.70111 12.69522 #>  #> $`St. Vin. and Gren.3`$isHole #> [1] FALSE #>  #>  #> $`Cayman Is.1` #> $`Cayman Is.1`$x #>  [1] -81.36955 -81.33725 -81.29651 -81.28480 -81.13049 -81.10714 -81.22460 #>  [8] -81.27731 -81.30371 -81.40477 -81.41908 -81.39102 -81.36955 #>  #> $`Cayman Is.1`$y #>  [1] 19.34890 19.32952 19.34138 19.36254 19.34675 19.30518 19.30409 19.27738 #>  [9] 19.27190 19.27844 19.37476 19.38492 19.34890 #>  #> $`Cayman Is.1`$isHole #> [1] FALSE #>  #>  #> $`Cayman Is.2` #> $`Cayman Is.2`$x #>  [1] -79.82339 -79.87005 -79.90620 -79.82419 -79.80313 -79.78518 -79.76634 #>  [8] -79.74231 -79.74231 -79.82339 #>  #> $`Cayman Is.2`$y #>  [1] 19.71190 19.69668 19.70252 19.74409 19.75812 19.76564 19.76574 19.75714 #>  [9] 19.75089 19.71190 #>  #> $`Cayman Is.2`$isHole #> [1] FALSE #>  #>  #> $`Cayman Is.3` #> $`Cayman Is.3`$x #>  [1] -79.97899 -79.98876 -80.02077 -80.09420 -80.12588 -80.11611 -80.10092 #>  [8] -80.08363 -80.06756 -80.01622 -79.99183 -79.97509 -79.97899 #>  #> $`Cayman Is.3`$y #>  [1] 19.70820 19.70252 19.70686 19.66591 19.66839 19.68267 19.69611 19.70608 #>  [9] 19.70993 19.71825 19.71929 19.70993 19.70820 #>  #> $`Cayman Is.3`$isHole #> [1] FALSE #>  #>  #> $`St. Pierre and Miquelon1` #> $`St. Pierre and Miquelon1`$x #>  [1] -56.26710 -56.35423 -56.38477 -56.37723 -56.33255 -56.33395 -56.38689 #>  [8] -56.37795 -56.36464 -56.28736 -56.27837 -56.31490 -56.28979 -56.25548 #> [15] -56.26710 #>  #> $`St. Pierre and Miquelon1`$y #>  [1] 46.83849 46.79534 46.81942 46.84763 46.91595 46.93564 47.06798 47.08955 #>  [9] 47.09899 47.07098 47.03501 46.95388 46.89988 46.86096 46.83849 #>  #> $`St. Pierre and Miquelon1`$isHole #> [1] FALSE #>  #>  #> $`St. Pierre and Miquelon2` #> $`St. Pierre and Miquelon2`$x #> [1] -56.15073 -56.17171 -56.24328 -56.20917 -56.18507 -56.15261 -56.13734 #> [8] -56.13926 -56.15073 #>  #> $`St. Pierre and Miquelon2`$y #> [1] 46.76242 46.75286 46.76720 46.79823 46.80727 46.81110 46.80156 46.77864 #> [9] 46.76242 #>  #> $`St. Pierre and Miquelon2`$isHole #> [1] FALSE #>  #>  #> $Grenada #> $Grenada$x #> [1] -61.71550 -61.78219 -61.75573 -61.74989 -61.71499 -61.66047 -61.60704 #> [8] -61.62714 -61.71550 #>  #> $Grenada$y #> [1] 12.01265 12.00844 12.04547 12.10843 12.18517 12.23703 12.22329 12.05394 #> [9] 12.01265 #>  #> $Grenada$isHole #> [1] FALSE #>  #>  #> $`St. Kitts and Nevis1` #> $`St. Kitts and Nevis1`$x #>  [1] -62.63069 -62.65648 -62.70201 -62.77554 -62.83890 -62.84047 -62.83941 #>  [8] -62.82704 -62.79461 -62.71374 -62.67581 -62.64051 -62.63069 #>  #> $`St. Kitts and Nevis1`$y #>  [1] 17.23998 17.22443 17.28603 17.30282 17.33925 17.34706 17.36532 17.38641 #>  [9] 17.40261 17.35326 17.29093 17.26228 17.23998 #>  #> $`St. Kitts and Nevis1`$isHole #> [1] FALSE #>  #>  #> $`St. Kitts and Nevis2` #> $`St. Kitts and Nevis2`$x #> [1] -62.53222 -62.58243 -62.62493 -62.61527 -62.57470 -62.53416 -62.53222 #>  #> $`St. Kitts and Nevis2`$y #> [1] 17.12185 17.10061 17.12957 17.19911 17.20104 17.17014 17.12185 #>  #> $`St. Kitts and Nevis2`$isHole #> [1] FALSE #>  #>  #> $`Marshall Is.1` #> $`Marshall Is.1`$x #>  [1] 171.1019 171.2270 171.3937 171.3669 171.3047 171.2633 171.2354 171.2023 #>  [9] 171.0955 171.0357 171.0504 171.1019 #>  #> $`Marshall Is.1`$y #>  [1] 7.138221 7.086958 7.110936 7.095536 7.081170 7.068768 7.068768 7.073522 #>  [9] 7.109282 7.156101 7.171759 7.138221 #>  #> $`Marshall Is.1`$isHole #> [1] FALSE #>  #>  #> $`Marshall Is.2` #> $`Marshall Is.2`$x #>  [1] 169.6351 169.6154 169.5905 169.6122 169.6271 169.6511 169.7004 169.7346 #>  [9] 169.7263 169.6726 169.6351 #>  #> $`Marshall Is.2`$y #>  [1] 5.830084 5.799801 5.801920 5.824399 5.855819 5.945115 5.977051 6.014155 #>  [9] 5.975708 5.935194 5.830084 #>  #> $`Marshall Is.2`$isHole #> [1] FALSE #>  #>  #> $`Marshall Is.3` #> $`Marshall Is.3`$x #>  [1] 171.5774 171.6148 171.6884 171.7568 171.7304 171.6933 171.6594 171.6142 #>  [9] 171.5928 171.5774 #>  #> $`Marshall Is.3`$y #>  [1] 7.048252 7.026600 7.028253 6.973166 6.976629 7.000142 7.010063 7.007170 #>  [9] 7.016265 7.048252 #>  #> $`Marshall Is.3`$isHole #> [1] FALSE #>  #>  #> $`Marshall Is.4` #> $`Marshall Is.4`$x #> [1] 168.8302 168.8155 168.7192 168.6751 168.6793 168.7555 168.8302 #>  #> $`Marshall Is.4`$y #> [1] 7.308960 7.293560 7.302759 7.321931 7.336245 7.322473 7.308960 #>  #> $`Marshall Is.4`$isHole #> [1] FALSE #>  #>  #> $`Marshall Is.5` #> $`Marshall Is.5`$x #> [1] 166.8903 166.8644 166.8447 166.8589 166.8881 166.8994 166.8903 #>  #> $`Marshall Is.5`$y #> [1] 11.15307 11.14622 11.15338 11.16630 11.16865 11.16506 11.15307 #>  #> $`Marshall Is.5`$isHole #> [1] FALSE #>  #>  #> $Niue #> $Niue$x #> [1] -169.8034 -169.9038 -169.9483 -169.9087 -169.8616 -169.8340 -169.7934 #> [8] -169.8034 #>  #> $Niue$y #> [1] -19.08302 -19.13790 -19.07289 -18.99021 -18.96866 -18.96603 -19.04261 #> [8] -19.08302 #>  #> $Niue$isHole #> [1] FALSE #>  #>  #> $Liechtenstein #> $Liechtenstein$x #>  [1] 9.580222 9.502294 9.487721 9.479453 9.484310 9.527512 9.536814 9.542136 #>  [9] 9.551076 9.555779 9.571850 9.601202 9.610504 9.595725 9.580222 #>  #> $Liechtenstein$y #>  [1] 47.05739 47.06273 47.06224 47.09751 47.17268 47.27076 47.25464 47.23415 #>  [9] 47.21223 47.18549 47.15792 47.13206 47.10715 47.07583 47.05739 #>  #> $Liechtenstein$isHole #> [1] FALSE #>  #>  #> $Jersey #> $Jersey$x #> [1] -2.018631 -2.009898 -2.053745 -2.091030 -2.165676 -2.235827 -2.220479 #> [8] -2.082245 -2.018631 #>  #> $Jersey$y #> [1] 49.23126 49.18080 49.16982 49.18739 49.18739 49.17638 49.26637 49.25539 #> [9] 49.23126 #>  #> $Jersey$isHole #> [1] FALSE #>  #>  #> $`Saint Helena1` #> $`Saint Helena1`$x #> [1] -5.692153 -5.782510 -5.775042 -5.707863 -5.662517 -5.659701 -5.692153 #>  #> $`Saint Helena1`$y #> [1] -15.99773 -16.00404 -15.95670 -15.90616 -15.91278 -15.97086 -15.99773 #>  #> $`Saint Helena1`$isHole #> [1] FALSE #>  #>  #> $`Saint Helena2` #> $`Saint Helena2`$x #>  [1] -14.36436 -14.39868 -14.40870 -14.41495 -14.39857 -14.38364 -14.36038 #>  [8] -14.32886 -14.30256 -14.31682 -14.36436 #>  #> $`Saint Helena2`$y #>  [1] -7.974345 -7.975792 -7.967472 -7.943753 -7.905719 -7.882568 -7.885978 #>  [8] -7.912643 -7.935484 -7.956155 -7.974345 #>  #> $`Saint Helena2`$isHole #> [1] FALSE #>  #>  #> $Seychelles #> $Seychelles$x #> [1] 55.54031 55.54300 55.49473 55.48119 55.41680 55.38342 55.45577 55.54031 #>  #> $Seychelles$y #> [1] -4.693098 -4.785496 -4.754593 -4.694855 -4.650310 -4.609279 -4.558740 #> [8] -4.693098 #>  #> $Seychelles$isHole #> [1] FALSE #>  #>  #> $Aruba #> $Aruba$x #>  [1] -69.89914 -69.89568 -69.94216 -70.00415 -70.06613 -70.05086 -70.03513 #>  [8] -69.97314 -69.91180 -69.89914 #>  #> $Aruba$y #>  [1] 12.45201 12.42301 12.43852 12.50050 12.54699 12.59709 12.61411 12.56763 #>  [9] 12.48048 12.45201 #>  #> $Aruba$isHole #> [1] FALSE #>  #>  #> $`Indian Ocean Ter.1` #> $`Indian Ocean Ter.1`$x #> [1] 105.7254 105.6968 105.6443 105.5841 105.5957 105.6455 105.6699 105.7055 #> [9] 105.7254 #>  #> $`Indian Ocean Ter.1`$y #> [1] -10.49295 -10.56416 -10.52504 -10.51248 -10.45967 -10.45223 -10.44939 #> [8] -10.43063 -10.49295 #>  #> $`Indian Ocean Ter.1`$isHole #> [1] FALSE #>  #>  #> $`Indian Ocean Ter.2` #> $`Indian Ocean Ter.2`$x #>  [1] 96.84043 96.85200 96.86740 96.87360 96.84952 96.83484 96.82771 96.82585 #>  [9] 96.83267 96.83267 96.83422 96.83950 96.83567 96.84043 #>  #> $`Indian Ocean Ter.2`$y #>  [1] -12.18179 -12.18685 -12.18148 -12.18768 -12.19739 -12.17972 -12.15068 #>  [8] -12.12618 -12.12618 -12.13600 -12.14417 -12.16029 -12.17125 -12.18179 #>  #> $`Indian Ocean Ter.2`$isHole #> [1] FALSE #>  #>  #> $`Indian Ocean Ter.3` #> $`Indian Ocean Ter.3`$x #>  [1] 96.91825 96.90657 96.89675 96.89396 96.89293 96.90440 96.91339 96.91897 #>  [9] 96.92052 96.92528 96.92435 96.91825 #>  #> $`Indian Ocean Ter.3`$y #>  [1] -12.19419 -12.19977 -12.19553 -12.19254 -12.18716 -12.18654 -12.18179 #>  [8] -12.17331 -12.16153 -12.17321 -12.18468 -12.19419 #>  #> $`Indian Ocean Ter.3`$isHole #> [1] FALSE #>  #>  #> $`British Virgin Is.1` #> $`British Virgin Is.1`$x #> [1] -64.59367 -64.67181 -64.69509 -64.65098 -64.56913 -64.54515 -64.59367 #>  #> $`British Virgin Is.1`$y #> [1] 18.40286 18.39914 18.41167 18.44254 18.44626 18.43813 18.40286 #>  #> $`British Virgin Is.1`$isHole #> [1] FALSE #>  #>  #> $`British Virgin Is.2` #> $`British Virgin Is.2`$x #> [1] -64.39524 -64.42113 -64.43803 -64.44374 -64.42609 -64.32467 -64.39524 #>  #> $`British Virgin Is.2`$y #> [1] 18.46458 18.45743 18.45900 18.47339 18.51308 18.51750 18.46458 #>  #> $`British Virgin Is.2`$isHole #> [1] FALSE #>  #>  #> $`British Virgin Is.3` #> $`British Virgin Is.3`$x #> [1] -64.28788 -64.27359 -64.28235 -64.33943 -64.38340 -64.40149 -64.41141 #> [8] -64.32310 -64.28788 #>  #> $`British Virgin Is.3`$y #> [1] 18.74056 18.70713 18.70770 18.73069 18.73260 18.73860 18.75116 18.75271 #> [9] 18.74056 #>  #> $`British Virgin Is.3`$isHole #> [1] FALSE #>  #>  #> $`Wallis and Futuna1` #> $`Wallis and Futuna1`$x #> [1] -178.0467 -178.1033 -178.1586 -178.1944 -178.1780 -178.1422 -178.1050 #> [8] -178.0437 -178.0467 #>  #> $`Wallis and Futuna1`$y #> [1] -14.31835 -14.32491 -14.31189 -14.25551 -14.23159 -14.24259 -14.28419 #> [8] -14.30321 -14.31835 #>  #> $`Wallis and Futuna1`$isHole #> [1] FALSE #>  #>  #> $`Wallis and Futuna2` #> $`Wallis and Futuna2`$x #> [1] -176.1606 -176.1769 -176.1954 -176.1712 -176.1480 -176.1281 -176.1606 #>  #> $`Wallis and Futuna2`$y #> [1] -13.33278 -13.34094 -13.30167 -13.24255 -13.22167 -13.26818 -13.33278 #>  #> $`Wallis and Futuna2`$isHole #> [1] FALSE #>  #>  #> $`Br. Indian Ocean Ter.` #> $`Br. Indian Ocean Ter.`$x #>  [1] 72.49194 72.46879 72.42910 72.40760 72.34972 72.37287 72.42745 72.44729 #>  [9] 72.46713 72.46217 72.47375 72.46548 72.43571 72.44564 72.49359 72.49855 #> [17] 72.49194 #>  #> $`Br. Indian Ocean Ter.`$y #>  [1] -7.377482 -7.417170 -7.435360 -7.334487 -7.263381 -7.263381 -7.299761 #>  [8] -7.395672 -7.367560 -7.337795 -7.309683 -7.278263 -7.230308 -7.220386 #> [15] -7.261727 -7.294800 -7.377482 #>  #> $`Br. Indian Ocean Ter.`$isHole #> [1] FALSE #>  #>  #> $`American Samoa` #> $`American Samoa`$x #> [1] -170.7263 -170.7693 -170.8205 -170.7208 -170.6891 -170.5681 -170.6405 #> [8] -170.7263 #>  #> $`American Samoa`$y #> [1] -14.35122 -14.35980 -14.31215 -14.27598 -14.25748 -14.26678 -14.28228 #> [8] -14.35122 #>  #> $`American Samoa`$isHole #> [1] FALSE #>  #>  #> $`San Marino` #> $`San Marino`$x #> [1] 12.48526 12.42635 12.39690 12.44108 12.50366 12.51467 12.48526 #>  #> $`San Marino`$y #> [1] 43.90143 43.89409 43.93455 43.98241 43.98977 43.95298 43.90143 #>  #> $`San Marino`$isHole #> [1] FALSE #>  #>  #> $Anguilla #> $Anguilla$x #> [1] -63.00121 -63.16002 -63.15335 -63.02602 -62.97956 -63.00121 #>  #> $Anguilla$y #> [1] 18.22178 18.17140 18.20028 18.26974 18.26478 18.22178 #>  #> $Anguilla$isHole #> [1] FALSE #>  #>  #> $Montserrat #> $Montserrat$x #> [1] -62.14845 -62.15426 -62.22162 -62.22307 -62.19134 -62.17579 -62.14845 #>  #> $Montserrat$y #> [1] 16.74032 16.68120 16.69950 16.75159 16.80440 16.80957 16.74032 #>  #> $Montserrat$isHole #> [1] FALSE #>  #>  #> $Bermuda #> $Bermuda$x #> [1] -64.73026 -64.82015 -64.84505 -64.86286 -64.77118 -64.69465 -64.66832 #> [8] -64.73026 #>  #> $Bermuda$y #> [1] 32.29346 32.25963 32.26229 32.27387 32.30769 32.38691 32.38193 32.29346 #>  #> $Bermuda$isHole #> [1] FALSE #>  #>  #> $Guernsey #> $Guernsey$x #> [1] -2.512322 -2.547384 -2.639007 -2.646138 -2.542191 -2.520926 -2.512322 #>  #> $Guernsey$y #> [1] 49.49452 49.42871 49.45094 49.46822 49.50659 49.50628 49.49452 #>  #> $Guernsey$isHole #> [1] FALSE #>  #>  #> $Maldives1 #> $Maldives1$x #> [1] 73.41658 73.39529 73.38206 73.38491 73.40155 73.42775 73.44273 73.43498 #> [9] 73.41658 #>  #> $Maldives1$y #> [1] 3.231224 3.229416 3.246495 3.271403 3.288792 3.289825 3.274297 3.250164 #> [9] 3.231224 #>  #> $Maldives1$isHole #> [1] FALSE #>  #>  #> $Maldives2 #> $Maldives2$x #>  [1] 73.51224 73.49482 73.47865 73.47307 73.48113 73.49477 73.50412 73.51782 #>  [9] 73.52836 73.52712 73.52216 73.51906 73.51224 #>  #> $Maldives2$y #>  [1] 4.164526 4.155199 4.158920 4.170728 4.188117 4.210441 4.234626 4.247648 #>  [9] 4.243307 4.229665 4.211061 4.186877 4.164526 #>  #> $Maldives2$isHole #> [1] FALSE #>  #>  #> $`Cook Is.` #> $`Cook Is.`$x #>  [1] -159.7405 -159.7725 -159.8131 -159.8396 -159.8425 -159.8320 -159.8106 #>  [8] -159.7684 -159.7395 -159.7369 -159.7405 #>  #> $`Cook Is.`$y #>  [1] -21.24925 -21.24950 -21.24206 -21.23813 -21.22909 -21.20051 -21.18646 #>  [8] -21.18842 -21.20811 -21.24062 -21.24925 #>  #> $`Cook Is.`$isHole #> [1] FALSE #>  #>  #> $`St. Martin` #> $`St. Martin`$x #> [1] -63.01117 -63.12302 -63.11501 -63.06307 -63.02478 -63.00943 -63.01117 #>  #> $`St. Martin`$y #> [1] 18.06894 18.06894 18.09070 18.11535 18.11311 18.10432 18.06894 #>  #> $`St. Martin`$isHole #> [1] FALSE #>  #>  #> $`Norfolk Island` #> $`Norfolk Island`$x #>  [1] 167.9394 167.9598 167.9781 167.9904 167.9886 167.9790 167.9677 167.9641 #>  [9] 167.9619 167.9606 167.9607 167.9547 167.9444 167.9338 167.9265 167.9204 #> [17] 167.9183 167.9142 167.9124 167.9164 167.9240 167.9246 167.9186 167.9062 #> [25] 167.9206 167.9394 #>  #> $`Norfolk Island`$y #>  [1] -29.01766 -29.02831 -29.03430 -29.04205 -29.05900 -29.07564 -29.08277 #>  [8] -29.08536 -29.08846 -29.09218 -29.09631 -29.08215 -29.07295 -29.07213 #> [15] -29.08277 -29.08277 -29.07192 -29.06190 -29.05280 -29.04515 -29.03585 #> [22] -29.02851 -29.02510 -29.02810 -29.01394 -29.01766 #>  #> $`Norfolk Island`$isHole #> [1] FALSE #>  #>  #> $`Sint Maarten` #> $`Sint Maarten`$x #> [1] -63.12302 -63.01117 -63.01232 -63.02307 -63.09046 -63.12472 -63.12302 #>  #> $`Sint Maarten`$y #> [1] 18.06894 18.06894 18.04541 18.01918 18.04143 18.06432 18.06894 #>  #> $`Sint Maarten`$isHole #> [1] FALSE #>  #>  #> $`Pitcairn Is.` #> $`Pitcairn Is.`$x #> [1] -128.2901 -128.3000 -128.3206 -128.3422 -128.3502 -128.3301 -128.3036 #> [8] -128.2908 -128.2901 #>  #> $`Pitcairn Is.`$y #> [1] -24.39737 -24.41257 -24.39970 -24.37071 -24.34027 -24.32322 -24.33355 #> [8] -24.36466 -24.39737 #>  #> $`Pitcairn Is.`$isHole #> [1] FALSE #>  #>  #> $Nauru #> $Nauru$x #> [1] 166.9584 166.9390 166.9165 166.9071 166.9136 166.9390 166.9556 166.9584 #>  #> $Nauru$y #> [1] -0.5166090 -0.5508188 -0.5464780 -0.5237403 -0.4991423 -0.4893755 -0.4969719 #> [8] -0.5166090 #>  #> $Nauru$isHole #> [1] FALSE #>  #>  #> $`St. Barthelemy` #> $`St. Barthelemy`$x #>  [1] -62.83192 -62.84691 -62.85895 -62.86939 -62.87543 -62.87424 -62.86546 #>  [8] -62.79973 -62.80701 -62.81818 -62.83192 #>  #> $`St. Barthelemy`$y #>  [1] 17.87648 17.87519 17.88366 17.89860 17.91358 17.92227 17.91829 17.90867 #>  [9] 17.89767 17.88547 17.87648 #>  #> $`St. Barthelemy`$isHole #> [1] FALSE #>  #>  #> $Macau #> $Macau$x #> [1] 113.4789 113.4811 113.4942 113.5271 113.5481 113.5455 113.4988 113.4842 #> [9] 113.4789 #>  #> $Macau$y #> [1] 22.19554 22.21746 22.24154 22.24593 22.22262 22.22149 22.20167 22.19777 #> [9] 22.19554 #>  #> $Macau$isHole #> [1] FALSE #>  #>  #> $Tuvalu1 #> $Tuvalu1$x #>  [1] 179.1997 179.1914 179.2002 179.2043 179.2025 179.1982 179.1976 179.1984 #>  [9] 179.1990 179.1995 179.2068 179.2072 179.2073 179.2082 179.2157 179.2177 #> [17] 179.2125 179.2098 179.1997 #>  #> $Tuvalu1$y #>  [1] -8.536734 -8.542113 -8.529711 -8.519065 -8.509867 -8.497981 -8.481652 #>  [8] -8.473243 -8.465992 -8.460774 -8.474210 -8.496514 -8.498602 -8.499994 #> [15] -8.511417 -8.520616 -8.526947 -8.530228 -8.536734 #>  #> $Tuvalu1$isHole #> [1] FALSE #>  #>  #> $Tuvalu2 #> $Tuvalu2$x #>  [1] 178.6942 178.6914 178.6829 178.6681 178.6654 178.6731 178.6886 178.6912 #>  [9] 178.6935 178.6940 178.6942 #>  #> $Tuvalu2$y #>  [1] -7.493908 -7.498663 -7.491635 -7.463833 -7.454221 -7.460939 -7.474478 #>  [8] -7.475512 -7.484090 -7.490975 -7.493908 #>  #> $Tuvalu2$isHole #> [1] FALSE #>  #>  #> $Tuvalu3 #> $Tuvalu3$x #> [1] 178.3910 178.3809 178.3739 178.3734 178.3758 178.3828 178.3833 178.3910 #>  #> $Tuvalu3$y #> [1] -8.026589 -8.070101 -8.069238 -8.069170 -8.056251 -8.040424 -8.039405 #> [8] -8.026589 #>  #> $Tuvalu3$isHole #> [1] FALSE #>  #>  #> $Tuvalu4 #> $Tuvalu4$x #> [1] 176.1406 176.1486 176.1355 176.1255 176.1301 176.1406 #>  #> $Tuvalu4$y #> [1] -5.687197 -5.706834 -5.692881 -5.679239 -5.677688 -5.687197 #>  #> $Tuvalu4$isHole #> [1] FALSE #>  #>  #> $Tuvalu5 #> $Tuvalu5$x #> [1] 177.3565 177.3443 177.3402 177.3384 177.3374 177.3489 177.3567 177.3565 #>  #> $Tuvalu5$y #> [1] -6.118799 -6.121176 -6.114768 -6.111150 -6.108360 -6.110737 -6.114768 #> [8] -6.118799 #>  #> $Tuvalu5$isHole #> [1] FALSE #>  #>  #> $Tuvalu6 #> $Tuvalu6$x #> [1] 179.9062 179.9054 179.9041 179.8986 179.9013 179.9067 179.9062 #>  #> $Tuvalu6$y #> [1] -9.418597 -9.420716 -9.400407 -9.386816 -9.387953 -9.399373 -9.418597 #>  #> $Tuvalu6$isHole #> [1] FALSE #>  #>  #> $Tuvalu7 #> $Tuvalu7$x #> [1] 179.8784 179.8771 179.8717 179.8676 179.8678 179.8733 179.8784 #>  #> $Tuvalu7$y #> [1] -9.360823 -9.362993 -9.350178 -9.344286 -9.343150 -9.346870 -9.360823 #>  #> $Tuvalu7$isHole #> [1] FALSE #>  #>  #> $Tuvalu8 #> $Tuvalu8$x #> [1] 176.3227 176.3144 176.3193 176.3231 176.3227 #>  #> $Tuvalu8$y #> [1] -6.295222 -6.302353 -6.289331 -6.289021 -6.295222 #>  #> $Tuvalu8$isHole #> [1] FALSE #>  #>  #> $Tuvalu9 #> $Tuvalu9$x #> [1] 177.1535 177.1528 177.1528 177.1524 177.1506 177.1503 177.1531 177.1535 #>  #> $Tuvalu9$y #> [1] -7.199353 -7.200386 -7.197492 -7.195219 -7.190464 -7.188294 -7.195115 #> [8] -7.199353 #>  #> $Tuvalu9$isHole #> [1] FALSE #>  #>  #> $Monaco #> $Monaco$x #> [1] 7.438699 7.377721 7.380098 7.394981 7.414411 7.436942 7.438699 #>  #> $Monaco$y #> [1] 43.75046 43.73175 43.75325 43.76534 43.77092 43.76146 43.75046 #>  #> $Monaco$isHole #> [1] FALSE #>  #>  #> $`Ashmore and Cartier Is.` #> $`Ashmore and Cartier Is.`$x #> [1] 123.5945 123.5952 123.5731 123.5725 123.5945 #>  #> $`Ashmore and Cartier Is.`$y #> [1] -12.42570 -12.43593 -12.43418 -12.42394 -12.42570 #>  #> $`Ashmore and Cartier Is.`$isHole #> [1] FALSE #>  #>  #> $Vatican #> $Vatican$x #> [1] 12.43917 12.43059 12.42749 12.43059 12.43834 12.43917 #>  #> $Vatican$y #> [1] 41.89837 41.89757 41.90072 41.90545 41.90620 41.89837 #>  #> $Vatican$isHole #> [1] FALSE #>  #>  names(uxy) #>   [1] \"Antarctica\"                 \"Antarctica\"                 #>   [3] \"Antarctica\"                 \"Antarctica\"                 #>   [5] \"Antarctica\"                 \"Antarctica\"                 #>   [7] \"Antarctica\"                 \"Antarctica\"                 #>   [9] \"Russia\"                     \"Russia\"                     #>  [11] \"Russia\"                     \"Russia\"                     #>  [13] \"Russia\"                     \"Russia\"                     #>  [15] \"Russia\"                     \"Russia\"                     #>  [17] \"Russia\"                     \"Russia\"                     #>  [19] \"Russia\"                     \"Russia\"                     #>  [21] \"Russia\"                     \"Canada\"                     #>  [23] \"Canada\"                     \"Canada\"                     #>  [25] \"Canada\"                     \"Canada\"                     #>  [27] \"Canada\"                     \"Canada\"                     #>  [29] \"Canada\"                     \"Canada\"                     #>  [31] \"Canada\"                     \"Canada\"                     #>  [33] \"Canada\"                     \"Canada\"                     #>  [35] \"Canada\"                     \"Canada\"                     #>  [37] \"Canada\"                     \"Canada\"                     #>  [39] \"Canada\"                     \"Canada\"                     #>  [41] \"Canada\"                     \"Canada\"                     #>  [43] \"Canada\"                     \"Canada\"                     #>  [45] \"Canada\"                     \"Canada\"                     #>  [47] \"Canada\"                     \"Canada\"                     #>  [49] \"Canada\"                     \"Canada\"                     #>  [51] \"Canada\"                     \"United States\"              #>  [53] \"United States\"              \"United States\"              #>  [55] \"United States\"              \"United States\"              #>  [57] \"United States\"              \"United States\"              #>  [59] \"United States\"              \"United States\"              #>  [61] \"United States\"              \"China\"                      #>  [63] \"China\"                      \"Brazil\"                     #>  [65] \"Australia\"                  \"Australia\"                  #>  [67] \"Greenland\"                  \"Kazakhstan\"                 #>  [69] \"Argentina\"                  \"Argentina\"                  #>  [71] \"India\"                      \"Algeria\"                    #>  [73] \"Congo (Kinshasa)\"           \"Mongolia\"                   #>  [75] \"Mexico\"                     \"Saudi Arabia\"               #>  [77] \"Sudan\"                      \"Iran\"                       #>  [79] \"Libya\"                      \"Indonesia\"                  #>  [81] \"Indonesia\"                  \"Indonesia\"                  #>  [83] \"Indonesia\"                  \"Indonesia\"                  #>  [85] \"Indonesia\"                  \"Indonesia\"                  #>  [87] \"Indonesia\"                  \"Indonesia\"                  #>  [89] \"Indonesia\"                  \"Indonesia\"                  #>  [91] \"Indonesia\"                  \"Indonesia\"                  #>  [93] \"South Africa\"               \"South Africa\"               #>  [95] \"Peru\"                       \"Chad\"                       #>  [97] \"Mali\"                       \"Angola\"                     #>  [99] \"Angola\"                     \"Niger\"                      #> [101] \"Colombia\"                   \"Ethiopia\"                   #> [103] \"Bolivia\"                    \"Mauritania\"                 #> [105] \"Norway\"                     \"Norway\"                     #> [107] \"Norway\"                     \"Norway\"                     #> [109] \"Egypt\"                      \"Chile\"                      #> [111] \"Chile\"                      \"Turkey\"                     #> [113] \"Turkey\"                     \"Pakistan\"                   #> [115] \"Sweden\"                     \"Tanzania\"                   #> [117] \"Nigeria\"                    \"Venezuela\"                  #> [119] \"Ukraine\"                    \"Namibia\"                    #> [121] \"Mozambique\"                 \"France\"                     #> [123] \"France\"                     \"Finland\"                    #> [125] \"Afghanistan\"                \"Zambia\"                     #> [127] \"Myanmar\"                    \"Morocco\"                    #> [129] \"Spain\"                      \"Botswana\"                   #> [131] \"S. Sudan\"                   \"Central African Rep.\"       #> [133] \"Madagascar\"                 \"Turkmenistan\"               #> [135] \"Uzbekistan\"                 \"Kenya\"                      #> [137] \"Germany\"                    \"Thailand\"                   #> [139] \"Iraq\"                       \"Japan\"                      #> [141] \"Japan\"                      \"Japan\"                      #> [143] \"Poland\"                     \"Somalia\"                    #> [145] \"Yemen\"                      \"Papua New Guinea\"           #> [147] \"Papua New Guinea\"           \"Papua New Guinea\"           #> [149] \"Papua New Guinea\"           \"Cameroon\"                   #> [151] \"Paraguay\"                   \"Italy\"                      #> [153] \"Italy\"                      \"Italy\"                      #> [155] \"United Kingdom\"             \"United Kingdom\"             #> [157] \"Zimbabwe\"                   \"New Zealand\"                #> [159] \"New Zealand\"                \"Vietnam\"                    #> [161] \"Belarus\"                    \"Romania\"                    #> [163] \"Congo (Brazzaville)\"        \"Malaysia\"                   #> [165] \"Malaysia\"                   \"Ivory Coast\"                #> [167] \"Oman\"                       \"Oman\"                       #> [169] \"Philippines\"                \"Philippines\"                #> [171] \"Philippines\"                \"Philippines\"                #> [173] \"Philippines\"                \"Philippines\"                #> [175] \"Philippines\"                \"Burkina Faso\"               #> [177] \"Gabon\"                      \"Kyrgyzstan\"                 #> [179] \"Iceland\"                    \"Ecuador\"                    #> [181] \"Uganda\"                     \"Ghana\"                      #> [183] \"Guinea\"                     \"Laos\"                       #> [185] \"Syria\"                      \"Guyana\"                     #> [187] \"Uruguay\"                    \"Senegal\"                    #> [189] \"Tunisia\"                    \"Cambodia\"                   #> [191] \"Tajikistan\"                 \"Nepal\"                      #> [193] \"Greece\"                     \"Greece\"                     #> [195] \"N. Korea\"                   \"Bulgaria\"                   #> [197] \"Bangladesh\"                 \"Suriname\"                   #> [199] \"Hungary\"                    \"Nicaragua\"                  #> [201] \"Austria\"                    \"Czech Rep.\"                 #> [203] \"Eritrea\"                    \"Cuba\"                       #> [205] \"S. Korea\"                   \"Portugal\"                   #> [207] \"Azerbaijan\"                 \"Azerbaijan\"                 #> [209] \"Benin\"                      \"Honduras\"                   #> [211] \"Latvia\"                     \"Malawi\"                     #> [213] \"Guatemala\"                  \"Lithuania\"                  #> [215] \"Serbia\"                     \"W. Sahara\"                  #> [217] \"Jordan\"                     \"Liberia\"                    #> [219] \"Ireland\"                    \"Georgia\"                    #> [221] \"United Arab Emirates\"       \"French Guiana\"              #> [223] \"Estonia\"                    \"Croatia\"                    #> [225] \"Sierra Leone\"               \"Panama\"                     #> [227] \"Denmark\"                    \"Denmark\"                    #> [229] \"Slovakia\"                   \"Bosnia and Herz.\"           #> [231] \"Switzerland\"                \"Sri Lanka\"                  #> [233] \"Netherlands\"                \"Togo\"                       #> [235] \"Costa Rica\"                 \"Dominican Rep.\"             #> [237] \"Moldova\"                    \"Belgium\"                    #> [239] \"Bhutan\"                     \"Albania\"                    #> [241] \"Taiwan\"                     \"Armenia\"                    #> [243] \"Guinea Bissau\"              \"Macedonia\"                  #> [245] \"Lesotho\"                    \"Haiti\"                      #> [247] \"Slovenia\"                   \"Eq. Guinea\"                 #> [249] \"Israel\"                     \"Burundi\"                    #> [251] \"Falkland Is.\"               \"Solomon Is.\"                #> [253] \"Solomon Is.\"                \"Solomon Is.\"                #> [255] \"Solomon Is.\"                \"Solomon Is.\"                #> [257] \"New Caledonia\"              \"Rwanda\"                     #> [259] \"Belize\"                     \"Djibouti\"                   #> [261] \"El Salvador\"                \"Swaziland\"                  #> [263] \"Fiji\"                       \"Fiji\"                       #> [265] \"Fiji\"                       \"Kuwait\"                     #> [267] \"Montenegro\"                 \"Fr. S. and Antarctic Lands\" #> [269] \"Bahamas\"                    \"Bahamas\"                    #> [271] \"Bahamas\"                    \"Kosovo\"                     #> [273] \"East Timor\"                 \"Gambia\"                     #> [275] \"Jamaica\"                    \"Qatar\"                      #> [277] \"Lebanon\"                    \"Brunei\"                     #> [279] \"Puerto Rico\"                \"Trinidad and Tobago\"        #> [281] \"Vanuatu\"                    \"Vanuatu\"                    #> [283] \"Cyprus\"                     \"S. Geo. and S. Sandw. Is.\"  #> [285] \"S. Geo. and S. Sandw. Is.\"  \"West Bank\"                  #> [287] \"N. Cyprus\"                  \"Cape Verde\"                 #> [289] \"Cape Verde\"                 \"Cape Verde\"                 #> [291] \"Cape Verde\"                 \"Cape Verde\"                 #> [293] \"Cape Verde\"                 \"Cape Verde\"                 #> [295] \"Cape Verde\"                 \"Luxembourg\"                 #> [297] \"Samoa\"                      \"Samoa\"                      #> [299] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [301] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [303] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [305] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [307] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [309] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [311] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [313] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [315] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [317] \"Fr. Polynesia\"              \"Fr. Polynesia\"              #> [319] \"Fr. Polynesia\"              NA                           #> [321] \"Faroe Is.\"                  \"Faroe Is.\"                  #> [323] \"Faroe Is.\"                  \"Faroe Is.\"                  #> [325] \"Faroe Is.\"                  \"Mauritius\"                  #> [327] \"Comoros\"                    \"Comoros\"                    #> [329] \"Comoros\"                    \"Aland\"                      #> [331] \"Aland\"                      \"Aland\"                      #> [333] \"Hong Kong\"                  \"Hong Kong\"                  #> [335] \"Hong Kong\"                  \"Sao Tome and Principe\"      #> [337] \"Sao Tome and Principe\"      \"Isle of Man\"                #> [339] \"Kiribati\"                   \"Kiribati\"                   #> [341] \"Kiribati\"                   \"Kiribati\"                   #> [343] \"Kiribati\"                   \"Kiribati\"                   #> [345] \"Kiribati\"                   \"Kiribati\"                   #> [347] \"Kiribati\"                   \"Kiribati\"                   #> [349] \"Kiribati\"                   \"Kiribati\"                   #> [351] \"Kiribati\"                   \"Kiribati\"                   #> [353] \"Kiribati\"                   \"Kiribati\"                   #> [355] \"Kiribati\"                   \"Kiribati\"                   #> [357] \"Kiribati\"                   \"Dominica\"                   #> [359] \"Heard I. and McDonald Is.\"  \"Bahrain\"                    #> [361] \"Andorra\"                    \"Saint Lucia\"                #> [363] \"Micronesia\"                 \"Micronesia\"                 #> [365] \"Micronesia\"                 \"Micronesia\"                 #> [367] \"Micronesia\"                 \"Guam\"                       #> [369] \"Singapore\"                  \"Tonga\"                      #> [371] \"Tonga\"                      \"Tonga\"                      #> [373] \"Antigua and Barb.\"          \"Antigua and Barb.\"          #> [375] \"Curacao\"                    \"Gaza\"                       #> [377] \"N. Mariana Is.\"             \"N. Mariana Is.\"             #> [379] \"N. Mariana Is.\"             \"N. Mariana Is.\"             #> [381] \"N. Mariana Is.\"             \"N. Mariana Is.\"             #> [383] \"Barbados\"                   \"Turks and Caicos Is.\"       #> [385] \"Turks and Caicos Is.\"       \"Turks and Caicos Is.\"       #> [387] \"Palau\"                      \"Palau\"                      #> [389] \"Malta\"                      \"Malta\"                      #> [391] \"U.S. Virgin Is.\"            \"U.S. Virgin Is.\"            #> [393] \"U.S. Virgin Is.\"            \"St. Vin. and Gren.\"         #> [395] \"St. Vin. and Gren.\"         \"St. Vin. and Gren.\"         #> [397] \"Cayman Is.\"                 \"Cayman Is.\"                 #> [399] \"Cayman Is.\"                 \"St. Pierre and Miquelon\"    #> [401] \"St. Pierre and Miquelon\"    \"Grenada\"                    #> [403] \"St. Kitts and Nevis\"        \"St. Kitts and Nevis\"        #> [405] \"Marshall Is.\"               \"Marshall Is.\"               #> [407] \"Marshall Is.\"               \"Marshall Is.\"               #> [409] \"Marshall Is.\"               \"Niue\"                       #> [411] \"Liechtenstein\"              \"Jersey\"                     #> [413] \"Saint Helena\"               \"Saint Helena\"               #> [415] \"Seychelles\"                 \"Aruba\"                      #> [417] \"Indian Ocean Ter.\"          \"Indian Ocean Ter.\"          #> [419] \"Indian Ocean Ter.\"          \"British Virgin Is.\"         #> [421] \"British Virgin Is.\"         \"British Virgin Is.\"         #> [423] \"Wallis and Futuna\"          \"Wallis and Futuna\"          #> [425] \"Br. Indian Ocean Ter.\"      \"American Samoa\"             #> [427] \"San Marino\"                 \"Anguilla\"                   #> [429] \"Montserrat\"                 \"Bermuda\"                    #> [431] \"Guernsey\"                   \"Maldives\"                   #> [433] \"Maldives\"                   \"Cook Is.\"                   #> [435] \"St. Martin\"                 \"Norfolk Island\"             #> [437] \"Sint Maarten\"               \"Pitcairn Is.\"               #> [439] \"Nauru\"                      \"St. Barthelemy\"             #> [441] \"Macau\"                      \"Tuvalu\"                     #> [443] \"Tuvalu\"                     \"Tuvalu\"                     #> [445] \"Tuvalu\"                     \"Tuvalu\"                     #> [447] \"Tuvalu\"                     \"Tuvalu\"                     #> [449] \"Tuvalu\"                     \"Tuvalu\"                     #> [451] \"Monaco\"                     \"Ashmore and Cartier Is.\"    #> [453] \"Vatican\"                     # here, unlist would be wrong."},{"path":"https://great-northern-diver.github.io/loon/reference/spunlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","title":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","text":"spunlist simple helper function taking output spAsList. helper function rarely called directly user. base unlist.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/spunlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","text":"","code":"spunlist(x)"},{"path":"https://great-northern-diver.github.io/loon/reference/spunlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","text":"x list spatial data object.","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/spunlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","text":"appropriately flattened list relevant components spatial data object.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/loon/reference/spunlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a flat list of polygon specifications from the list of sp components returned by spAsList — spunlist","text":"","code":"a <- list(list(x=1:2, y=1:2),           list(list(x=1:3, y=1:3),                list(x=1:4, y=1:4))) spunlist(a) #> [[1]] #> [[1]]$x #> [1] 1 2 #>  #> [[1]]$y #> [1] 1 2 #>  #>  #> [[2]] #> [[2]]$x #> [1] 1 2 3 #>  #> [[2]]$y #> [1] 1 2 3 #>  #>  #> [[3]] #> [[3]]$x #> [1] 1 2 3 4 #>  #> [[3]]$y #> [1] 1 2 3 4 #>  #>   # Compare to unlist(a, recursive=TRUE) #> x1 x2 y1 y2 x1 x2 x3 y1 y2 y3 x1 x2 x3 x4 y1 y2 y3 y4  #>  1  2  1  2  1  2  3  1  2  3  1  2  3  4  1  2  3  4  # or to unlist(a, recursive=FALSE) #> $x #> [1] 1 2 #>  #> $y #> [1] 1 2 #>  #> [[3]] #> [[3]]$x #> [1] 1 2 3 #>  #> [[3]]$y #> [1] 1 2 3 #>  #>  #> [[4]] #> [[4]]$x #> [1] 1 2 3 4 #>  #> [[4]]$y #> [1] 1 2 3 4 #>  #>"},{"path":"https://great-northern-diver.github.io/loon/reference/tcl_img_2_r_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"A tk Image Object to a Raster Object — tcl_img_2_r_raster","title":"A tk Image Object to a Raster Object — tcl_img_2_r_raster","text":"Turn tk image object R raster object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/tcl_img_2_r_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tk Image Object to a Raster Object — tcl_img_2_r_raster","text":"","code":"tcl_img_2_r_raster(img)"},{"path":"https://great-northern-diver.github.io/loon/reference/tcl_img_2_r_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tk Image Object to a Raster Object — tcl_img_2_r_raster","text":"img tk image object","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/tcl_img_2_r_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tk Image Object to a Raster Object — tcl_img_2_r_raster","text":"","code":"if(requireNamespace(\"grid\")) { puglia <- list.files(file.path(find.package(package = 'loon'), \"images\"),                      full.names = TRUE)[1L] # `img` is a tk image object img <- setNames(l_image_import_files(puglia),                 tools::file_path_sans_ext(basename(puglia))) raster <- tcl_img_2_r_raster(img) grid::grid.newpage() grid::grid.raster(raster) }"},{"path":"https://great-northern-diver.github.io/loon/reference/tkcolors.html","id":null,"dir":"Reference","previous_headings":"","what":"List the valid Tk color names — tkcolors","title":"List the valid Tk color names — tkcolors","text":"core Loon implemented Tcl Tk. Hence,   defining colors using color names, Loon uses Tcl color representation   R. colors taken Tk sources:   doc/colors.n. want make sure color names represented exactly   R can convert color names hexencoded color   strings, see examples .","code":""},{"path":"https://great-northern-diver.github.io/loon/reference/tkcolors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the valid Tk color names — tkcolors","text":"","code":"tkcolors()"},{"path":"https://great-northern-diver.github.io/loon/reference/tkcolors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the valid Tk color names — tkcolors","text":"","code":"# check if R colors names and TK color names are the same setdiff(tolower(colors()), tolower(tkcolors())) #> character(0) setdiff(tolower(tkcolors()), tolower(colors())) #>  [1] \"alice\"      \"antique\"    \"blanched\"   \"almond\"     \"cadet\"      #>  [6] \"cornflower\" \"dark\"       \"olive\"      \"sea\"        \"slate\"      #> [11] \"deep\"       \"sky\"        \"dim\"        \"dodger\"     \"floral\"     #> [16] \"forest\"     \"ghost\"      \"hot\"        \"indian\"     \"blush\"      #> [21] \"lawn\"       \"lemon\"      \"chiffon\"    \"light\"      \"steel\"      #> [26] \"lime\"       \"medium\"     \"spring\"     \"midnight\"   \"mint\"       #> [31] \"cream\"      \"misty\"      \"rose\"       \"navajo\"     \"old\"        #> [36] \"lace\"       \"drab\"       \"pale\"       \"papaya\"     \"whip\"       #> [41] \"peach\"      \"puff\"       \"powder\"     \"rosy\"       \"royal\"      #> [46] \"saddle\"     \"sandy\"      \"smoke\"       # hence there are currently more valid color names in Tk # than there are in R  # Let's compare the colors of the R color names in R and Tk tohex <- function(x) {     sapply(x, function(xi) {         crgb <- as.vector(col2rgb(xi))         rgb(crgb[1], crgb[2], crgb[3], maxColorValue = 255)     }) }  df <- data.frame(     R_col = tohex(colors()),     Tcl_col = hex12tohex6(l_hexcolor(colors())),     row.names = colors(),     stringsAsFactors = FALSE )  df_diff <- df[df$R_col != df$Tcl_col,]  if (requireNamespace(\"grid\", quietly = TRUE)) {   grid::grid.newpage()   grid::pushViewport(grid::plotViewport())    x_col <- grid::unit(0, \"npc\")   x_R <- grid::unit(6, \"lines\")   x_Tcl <- grid::unit(10, \"lines\")    grid::grid.text('color', x=x_col, y=grid::unit(1, \"npc\"),                   just='left', gp=grid::gpar(fontface='bold'))   grid::grid.text('R', x=x_R, y=grid::unit(1, \"npc\"), just='center',                    gp=grid::gpar(fontface='bold'))   grid::grid.text('Tcl', x=x_Tcl, y=grid::unit(1, \"npc\"), just='center',                    gp=grid::gpar(fontface='bold'))   for (i in 1:nrow(df_diff)) {       y <- grid::unit(1, \"npc\") - grid::unit(i*1.2, \"lines\")       grid::grid.text(rownames(df_diff)[i], x=x_col, y=y, just='left')       grid::grid.rect(x=x_R, y=y, width=grid::unit(3, \"line\"),                 height=grid::unit(1, \"line\"), gp=grid::gpar(fill=df_diff[i,1]))       grid::grid.rect(x=x_Tcl, y=y, width=grid::unit(3, \"line\"),                 height=grid::unit(1, \"line\"), gp=grid::gpar(fill=df_diff[i,2]))   } }"},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-142","dir":"Changelog","previous_headings":"","what":"loon 1.4.2","title":"loon 1.4.2","text":"Addresses minor documentation issues: Added system requirement Tcl/Tk = 8.6 (current version packaged R 8.6.x) Added documentation (internal) functions now exported.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-141","dir":"Changelog","previous_headings":"","what":"loon 1.4.1","title":"loon 1.4.1","text":"CRAN release: 2023-06-15 Addresses minor issue: Issue: Despite setting connectedScales parameter “none”, every loon plot continued share identical scales. Cause: due connectedScales parameter passed function, leading failure logical check.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-140","dir":"Changelog","previous_headings":"","what":"loon 1.4.0","title":"loon 1.4.0","text":"CRAN release: 2022-03-12 Minor changes additions Added \"loon.shiny\" l_web() now appears part diveR package Added arguments l_hist() character vectors factors. Now factors ALWAYS created placed layer. Factor layer simply hidden showFactors = FALSE flexibility given user terms factor text size, angle rotation, colour Changed default y positions 0 labels disappear switch yshows = \"density\".","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-139","dir":"Changelog","previous_headings":"","what":"loon 1.3.9","title":"loon 1.3.9","text":"CRAN release: 2022-02-07 minor changes facets: facet_wrap, number facet variables increase, layout pattern consistent (e.g., one variable: layout row; one variables: layout column). fix typos: “extent” –> “extend”","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-138","dir":"Changelog","previous_headings":"","what":"loon 1.3.8","title":"loon 1.3.8","text":"CRAN release: 2021-09-27 Removed vignette “Example analysis” minority data make room new vignette “Publishing loon plots” New helper functions changing grobs produced loonGrob() l_instantiateGrob, l_setGrobPlotView, l_updateGrob Export useful helper functions: glyph_to_pch: turn loon point glyph R graphics plotting “character”. get_display_color: return displayed color. as_hex6color: return 6 hexidecimal digit color representations. get_font_info_from_tk: return font information. get_layer_states: get layer states get_model_display_order: get order displayed elements, e.g., points scatterplot lines serialaxes. tcl_img_2_r_raster: turn tk image object R raster object. char2num.data.frame: character data frame numerical data frame.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-137","dir":"Changelog","previous_headings":"","what":"loon 1.3.7","title":"loon 1.3.7","text":"CRAN release: 2021-06-14 new function l_colorName exported returns build-color names based 12 6 hex code. loonGrob, remove lines base tick marks","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-136","dir":"Changelog","previous_headings":"","what":"loon 1.3.6","title":"loon 1.3.6","text":"CRAN release: 2021-05-10 fixed printing bug just introduced change facets.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-135","dir":"Changelog","previous_headings":"","what":"loon 1.3.5","title":"loon 1.3.5","text":"CRAN release: 2021-05-06 l_web() now expanded provide access loon related package documentation great-northern-diver github organization’s set repositories (anticipation putting diveR CRAN) Improved look compound displays. (lot result changes loon.ggplot package). Includes new arguments plotWidth plotHeight l_facet() l_pairs() look labels (identifying facetted rows columns) facetted displays now loon consistent default argument look ; .e. now standardized via l_getOption() (e.g. bg = l_getOption(\"canvas_bg_guides\")) meaningful names given grobs facets. (loonGrob()) initial tk window sizes now larger (500 x 500 instead 200 x 200)","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-134","dir":"Changelog","previous_headings":"","what":"loon 1.3.4","title":"loon 1.3.4","text":"CRAN release: 2021-03-16 new vignette “Logical queries interactive graphics” Explains use loon’s interactive plots inspector construct logical queries displayed data. enriched version mtcars used illustration. plot’s linkingKey (Loon’s linking model) can used access correct elements logical operation also described. minor bug fixes improvements Three minor bug fixes facets formula loon n-dimensional states, need provide additional data, formula able converted data frame given states info. missing values, treated n-dimensional states: drop NAs, leave warnings (one removed) Removed unnecessary warnings. l_pairs() progress bar constructing, linking, connecting scales plots. now new argument showProgressBar allows suppressed (e.g. RMarkdown files) histograms factors character vectors: default setting arg showFactors previously: TRUE whenever number factor levels (equivalent unique strings) < 10 now: TRUE whenever < 25 accomodate common factors like month 24 hours day. updated documentation l_layer() testing examples wrapped (interactive), check interactive examples ensure work well hexadecimal colours seem get slightly (generally ignorable) different hexadecimal values colours tcltk Solaris (see 1.3.3 comments). caused problems testing exact colours Solaris. sorted , testing colour hex values test suite commented prevent loon unnecessarily archived CRAN. (colours correct, previous solution generated warnings, may cause problems CRAN acceptance.) Likely, future, suppress warning l_hexcolor() testing. iris dataset tests, drop observation species, number observations different.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-133","dir":"Changelog","previous_headings":"","what":"loon 1.3.3","title":"loon 1.3.3","text":"CRAN release: 2021-02-25 extremely minor update test functions changed accommodate possibly inconsistent hex colours Solaris OS. example, Solaris , hex12 color “red” appears “#FFFF00000000” “#FF0000000000”. can lead failures testing equality hex12 strings (though appeared creating hex12 version R’s “red” TCL, l_hexcolor(\"red\")) hex 12 representations convert hex 6 “#FF0000”. , hex12tohex6(\"#FFFF00000000\") hex12tohex6(\"#FF0000000000\") return \"#FF0000\" except second also generates warning. also took opportunity give meaningful names grobs loonGrob() called l_compound update documentation summary l_plot_arguments include arguments , , layout, connectedScales related facetting plots creation. wrap examples Bin_cut (interactive()) {}","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-132","dir":"Changelog","previous_headings":"","what":"loon 1.3.2","title":"loon 1.3.2","text":"CRAN release: 2021-02-23 Updated linking natural Problem: plot p1 say already exists participates linking group, say “mylinkingGroup”, creating new plot linking group via command line console (using inspector) decisions syncing new plot’s linked states need made. end, new plot can make decisions via argument sync p2 <- l_plot(x, linkingGroup = \"myLinkingGroup\", sync = \"pull\", ...) p2 <- l_plot(x, linkingGroup = \"myLinkingGroup\", sync = \"push\", ...) value sync given, default sync = \"pull\", idea user intends pull linkable state values indicated p2 join group time creation. considered happens , remaining ... arguments, user simultaneously includes values linkable states color = \"red\". solution tries infer intention user, can, warn . Solution: Suppose p1 exists plot linkingGroup = \"myLinkingGroup\" user now creating new plot, say p2, argument linkingGroup = \"myLinkingGroup\" given call create p2. argument sync = \"push\" given call, linkable states explicitly given part call: explicitly given values pushed members group; explicitly given explicitly pushed. linkable states explicitly given part call: linkable states default values pushed group warning given. argument sync = \"pull\" (either default explicitly given \"pull\") values explicitly specified linkable states, ignored, different values states shared group, warning given. loon histogram, input list, histogram split multiple panels. x facet corresponds element list new feature added l_serialaxes(..., andrews = TRUE) produce Andrews’s Fourier functional curves data. new statistical layer l_layer_smooth generate smooth active points add layer Minor bugs fixed/improvements made allowing single point plot drawn polygon glyph pairs pan zoom work histograms shown diagonal progress bars added pairs (l_compounds) lot plots constructed. compound plots (e.g. pairs plots) now accept parent can later packed part complex user defined plot","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-131","dir":"Changelog","previous_headings":"","what":"loon 1.3.1","title":"loon 1.3.1","text":"CRAN release: 2020-06-17 Added new functions l_loonWidgets() returns widgets displayed loon plots. Related functions include l_basePaths() l_compoundPaths l_getFromPath() Fixed bug l_make_glyphs() works Mac OS Catalina (Thanks Brian Ripley Simon Urbanek) Cool new example produces Periodic Table Elements scatterplot (data “elements” loon.data package). Actually see periodicity brushing. minor bug fix respect facet label layout “color”, “size”, “linewidth”, “glyph”, added ‘l_userOptions()’ default “color”, “size”, “linewidth”, “glyph”, etc. now set look default ‘l_getOption(“linewidth”)’ etc. allows user change default look plots simply using ‘l_setOption(“color”, “black”)’ example.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-130","dir":"Changelog","previous_headings":"","what":"loon 1.3.0","title":"loon 1.3.0","text":"CRAN release: 2020-05-24 NAs now accommodated histograms recognize factors produce barplots l_plot() l_hist() now accept arguments facet new vignettes better organized reference manual via l_web() seems problem tcltk function tkimage.create() tkimage.create() function works older .png files seemingly newer ones l_make_glyphs() calls l_image_import_files() although still create necessary png files, may fail read back . problem observed (unreliably) work png processed outside R. demo(“l_make_glyphs”) removed","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-1239000","dir":"Changelog","previous_headings":"","what":"loon 1.2.3.9000","title":"loon 1.2.3.9000","text":"replaced l_saveStates reasoning name change name used Python release functionality introduced l_getSavedStates() read states (instead readRDS reason ). Fixed reading labels retrieve raw characters braces etc. can appear labels updated l_hist.factor layer factor level labels appear corresponding bar","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-123","dir":"Changelog","previous_headings":"","what":"loon 1.2.3","title":"loon 1.2.3","text":"CRAN release: 2019-10-16 saves named states disk later retrieval (e.g. Rmarkdown) copies info_state values source target. basic states excluded can overridden.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-122","dir":"Changelog","previous_headings":"","what":"loon 1.2.2","title":"loon 1.2.2","text":"CRAN release: 2019-03-23 added l_plot3D contributed Martin Gauch (rwo) l_pairs linking issues arguments histograms serialaxes display fixed added new vignette “loon RMarkdown” tidied others new demo(l_make_glyphs) illustrate statistical glyphs tiny new data set oliveLocations lat long olive data growing areas (used demo) tidied couple demos (superficially)","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-121","dir":"Changelog","previous_headings":"","what":"loon 1.2.1","title":"loon 1.2.1","text":"CRAN release: 2018-12-10 provide meaningful grobs (including better descriptions informative “empty” grobs). added condGrob() effect conditional construction either desired grob (visible loon plot) empty grob placeholder containing relevant arguments introduced method plot.loon() plot(p) loon plot p now draw corresponding grid object current device","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-120","dir":"Changelog","previous_headings":"","what":"loon 1.2.0","title":"loon 1.2.0","text":"CRAN release: 2018-09-30 added loonGrob() grid.loon() functionality loon plot can now converted saved grid graphics object permits printing/exporting snapshots loon plots documentation S3 class structure extended loon plots l_compound classes introduced ease user creation complex layouts includes simple programming interface extend loonGrob() user-defined converted current compound layouts new l_compound model (e.g. l_pairs, l_stl) l_getPlots returns list loon plots display (works simple loon plots ) l_getLocations returns matrix showing location loon plots (order) (works simple loon plots ) implemented simple loon plots (perhaps ) loonGrob_layoutType returns string indicating whether \"location\" \"arrangeGrobArgs” used creating grid version l_compound. (default \"locations\", possibility \"arrangeGrobArgs\" Fixed widget handle class order: specific classes first. l_hexcolor.R l_plot_decomposed_ts l_cget l_configure now generics methods objects class loon, character, l_compound. New functions l_getOption, l_getOptionNames, l_userOptions, l_userOptionDefault, l_setOption New function l_primitiveGlyphs names loon object handles print state names. l_state_names can used alternatively","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-110","dir":"Changelog","previous_headings":"","what":"loon 1.1.0","title":"loon 1.1.0","text":"CRAN release: 2017-07-26 first release CRAN itemlabel itemLabel showItemlabels showItemLabels unexported l_nestedTclList2Rlist l_data remove local copy website make l_help point official website.","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-101","dir":"Changelog","previous_headings":"","what":"loon 1.0.1","title":"loon 1.0.1","text":"Bug fix geodesic2d 4d transitions","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-091","dir":"Changelog","previous_headings":"","what":"loon 0.9.1","title":"loon 0.9.1","text":"Bug fix layering maps (sp classes) asSingleLayer=TRUE Bug fix scale_image","code":""},{"path":"https://great-northern-diver.github.io/loon/news/index.html","id":"loon-09","dir":"Changelog","previous_headings":"","what":"loon 0.9","title":"loon 0.9","text":"initial beta release general public","code":""}]
