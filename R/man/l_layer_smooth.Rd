% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/l-layer-smooth.R
\name{l_layer_smooth}
\alias{l_layer_smooth}
\title{Layer a smooth line for \code{loon}}
\usage{
l_layer_smooth(
  widget,
  x = NULL,
  y = NULL,
  method = "loess",
  group = "",
  formula = y ~ x,
  se = TRUE,
  n = 80,
  span = 0.75,
  level = 0.95,
  method.args = list(),
  linecolor = "steelblue",
  secolor = "gray80",
  linewidth = 2,
  sewidth = 4,
  linedash = "",
  sedash = "",
  label = "smooth",
  parent = "root",
  index = 0,
  ...
)
}
\arguments{
\item{widget}{widget path name as a string}

\item{x}{The \code{x} coordinates of line. If it is not provided, \code{x} will be inherited from widget}

\item{y}{The \code{y} coordinates of line. If it is not provided, \code{y} will be inherited from widget}

\item{method}{Smoothing method (function) to use, accepts either a character vector,
e.g. "lm", "glm", "loess" or a function, e.g. MASS::rlm or mgcv::gam, stats::lm, or stats::loess.}

\item{group}{Coordinates can be grouped by aesthetics attributes, e.g. "color".
If \code{x} and \code{y} are inherited from widget, \code{group} can be set as any N
dimensional states of corresponding widget; if not, \code{group} can only be set as either "linecolor" or "linewidth"}

\item{formula}{Formula to use in smoothing function, eg. y ~ x, y ~ poly(x, 2), y ~ log(x)}

\item{se}{Display confidence interval around smooth? (TRUE by default, see level to control.)}

\item{n}{Number of points at which to evaluate smoother.}

\item{span}{Controls the amount of smoothing for the default loess smoother. Smaller numbers produce wigglier lines, larger numbers produce smoother lines.}

\item{level}{Level of confidence interval to use (0.95 by default).}

\item{method.args}{List of additional arguments passed on to the modelling function defined by method.}

\item{linecolor}{fitted line color. Note that the \code{linecolor} of fitted lines are respect to whether \code{x} and \code{y} are provided.
If coordinates are inherited from widget, the linecolor can only be set via \code{\link{l_configure}}}

\item{secolor}{fitted standard deviation line color}

\item{linewidth}{fitted line width}

\item{sewidth}{fitted standard deviation line width}

\item{linedash}{fitted line dash}

\item{sedash}{fitted standard deviation line dash}

\item{label}{label used in the layers inspector}

\item{parent}{group layer}

\item{index}{index of the newly added layer in its parent group}

\item{...}{additional state initialization arguments, see \code{\link{l_info_states}}}
}
\description{
Display a smooth line layer
}
\examples{
if(interactive()) {

p <- l_plot(iris, color = iris$Species)
#' # the fitted line is based on all active points
l1 <- l_layer_smooth(p)
l_layer_hide(l1)
# the fits are grouped by points color
l2 <- l_layer_smooth(p, group = "color")
l_layer_hide(l2)

# Draw a fitted line based on a new data set
shortSepalLength <- (iris$Sepal.Length < 5)
l3 <- l_layer_smooth(p,
                     x = iris$Sepal.Length[shortSepalLength],
                     y = iris$Sepal.Width[shortSepalLength],
                     method = "lm",
                     linecolor = "firebrick")

if(require(mgcv)) {
  l_layer_hide(l3)
  # a full tensor product smooth
  ## linecolor is the same with the points color
  l4 <- l_layer_smooth(p,
                       method = "gam",
                       formula = y~te(x))
  l_layer_hide(l4)
}

# facets
fp <- l_facet(p, by = iris$Species, inheritLayers = FALSE)
l5 <- l_layer_smooth(fp, method = "lm")
}



}
