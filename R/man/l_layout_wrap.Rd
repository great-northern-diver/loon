% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/l_layout_wrap.R
\name{l_layout_wrap}
\alias{l_layout_wrap}
\title{Layout Facets in a grid}
\usage{
l_layout_wrap(
  widget,
  by,
  linkingGroup,
  inheritLayers = TRUE,
  separate = FALSE,
  scales = c("fixed", "fixed_x", "fixed_y", "free_x", "free_y", "free"),
  nrow = NULL,
  ncol = NULL,
  byrow = TRUE,
  labels_loc = c("top", "bottom"),
  span = 10,
  label_background = "gray80",
  label_foreground = "black",
  label_borderwidth = 2,
  label_relief = c("groove", "flat", "raised", "sunken", "ridge", "solid"),
  parent = NULL,
  ...
)
}
\arguments{
\item{widget}{A loon widget}

\item{by}{Layout categories. It could be "color", "size", etc.
Available layout categories can be achieved by \code{l_nDimStateNames(your widget)}}

\item{linkingGroup}{A linkingGroup for widgets. If missing, default would be a paste of
"layout" and the current tk path number}

\item{inheritLayers}{Logical. Should widget layers be inherited into layout panels?}

\item{separate}{Logical value. Separate several windows or pack all as a whole.}

\item{scales}{All panels can share the same scales if it is "fixed"; or all panels only vary the
scales across rows ("free_x" or "fixed_y"); or all panels only vary the
scales across columns ("free_y" or "fixed_x"); or their scales are totally free ("free"). Note that when rows or
columns share the same scale, the dynamic chages of scales will be synchronized.}

\item{nrow}{The number of layout rows}

\item{ncol}{The number of layout columns}

\item{byrow}{Are labels display by row or not?}

\item{labels_loc}{Labels location, "top" or "bottom"?}

\item{span}{It is used to control the proportion of panel size (height or width) and
the label size (label height and label width)}

\item{label_background}{Label background color}

\item{label_foreground}{Label foreground color}

\item{label_borderwidth}{Label border width}

\item{label_relief}{Label relief}

\item{parent}{parent widget path}

\item{...}{named arguments to modify the `loon` widget states}
}
\value{
an `l_layout` object (an `l_compound` object), being a list with named elements,
each representing a separate interactive plot.
The names of the plots should be self explanatory and a list
of all plots can be accessed from the `l_layout` object via `l_getPlots()`.
}
\description{
It takes a loon widget and forms a matrix of loon widgets
layout by aesthetics ("color", "size", "glyph", etc). It can handle mutiple (more than 2) layout categories
}
\examples{
p <- with(mtcars, l_plot3D(mpg, hp, wt, color = cyl))
fp <- l_layout_wrap(p, by = "color")

}
